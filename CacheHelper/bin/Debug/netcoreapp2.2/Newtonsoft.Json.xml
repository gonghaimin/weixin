<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Newtonsoft.Json</name>
    </assembly>
    <members>
        <member name="T:Newtonsoft.Json.Bson.BsonObjectId">
            <summary>
            表示 BSON Oid (对象 id)。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.BsonObjectId.Value">
            <summary>
            获取或设置 Oid 的值。
            </summary>
            <value>The value of the Oid.</value>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonObjectId.#ctor(System.Byte[])">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.Bson.BsonObjectId"/>类的新实例。
            </summary>
            <param name="value">"Eid" 值。</param>
        </member>
        <member name="T:Newtonsoft.Json.Bson.BsonReader">
            <summary>
            表示提供对序列化 BSON 数据的快速、非缓存、仅向前访问的读取器。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.BsonReader.JsonNet35BinaryCompatibility">
            <summary>
            获取或设置一个值, 该值指示二进制数据读取是否应与不正确的 Json-net 3.5 写入二进制文件兼容。
            </summary>
            <value>
            	<c>true</c> if binary data reading will be compatible with incorrect Json.NET 3.5 written binary; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Bson.BsonReader.ReadRootValueAsArray">
            <summary>
            获取或设置一个值, 该值指示根对象是否将被读取为 JSON 数组。
            </summary>
            <value>
            	<c>true</c> if the root object will be read as a JSON array; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Bson.BsonReader.DateTimeKindHandling">
            <summary>
            获取或设置从 BSON 读取<see cref="T:System.DateTimeKind" />值时使用的<see cref="T:System.DateTime"/>。
            </summary>
            <value>The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime"/> values from BSON.</value>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.Stream)">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.Bson.BsonReader"/>类的新实例。
            </summary>
            <param name="stream">包含要读取的 BSON 数据的<see cref="T:System.IO.Stream"/>。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.BinaryReader)">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.Bson.BsonReader"/>类的新实例。
            </summary>
            <param name="reader">包含要读取的 BSON 数据的<see cref="T:System.IO.BinaryReader"/>。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.Stream,System.Boolean,System.DateTimeKind)">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.Bson.BsonReader"/>类的新实例。
            </summary>
            <param name="stream">包含要读取的 BSON 数据的<see cref="T:System.IO.Stream"/>。</param>
            <param name="readRootValueAsArray">如果设置为 <c> true </c> 根对象将被读取为 JSON 数组。</param>
            <param name="dateTimeKindHandling">从 BSON 读取<see cref="T:System.DateTimeKind" />值时使用的<see cref="T:System.DateTime"/>。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.BinaryReader,System.Boolean,System.DateTimeKind)">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.Bson.BsonReader"/>类的新实例。
            </summary>
            <param name="reader">包含要读取的 BSON 数据的<see cref="T:System.IO.BinaryReader"/>。</param>
            <param name="readRootValueAsArray">如果设置为 <c> true </c> 根对象将被读取为 JSON 数组。</param>
            <param name="dateTimeKindHandling">从 BSON 读取<see cref="T:System.DateTimeKind" />值时使用的<see cref="T:System.DateTime"/>。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonReader.Read">
            <summary>
            从底层<see cref="T:System.IO.Stream"/>读取下一个 JSON 令牌。
            </summary>
            <returns>
            如果下一个令牌被成功读取, 则 <c> 真实 </c>; 如果向下一个令牌被成功读取, 则真实的。如果没有更多的令牌可供读取, <c> 虚假 </c>。
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonReader.Close">
            <summary>
            将读取器的状态更改为<see cref="F:Newtonsoft.Json.JsonReader.State.Closed"/>。
            如果<see cref="P:Newtonsoft.Json.JsonReader.CloseInput"/>被设定为 <c> 真实的 </c>, 则底层<see cref="T:System.IO.Stream"/>也是封闭的。
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Bson.BsonWriter">
            <summary>
            表示提供快速、非缓存、仅向前生成 BSON 数据的方法的编写器。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.BsonWriter.DateTimeKindHandling">
            <summary>
            获取或设置将<see cref="T:System.DateTimeKind" />值写入 BSON 时使用的<see cref="T:System.DateTime"/>。
            当设置为<see cref="F:System.DateTimeKind.Unspecified" />时, 不会发生转换。
            </summary>
            <value>The <see cref="T:System.DateTimeKind" /> used when writing <see cref="T:System.DateTime"/> values to BSON.</value>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.#ctor(System.IO.Stream)">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.Bson.BsonWriter"/>类的新实例。
            </summary>
            <param name="stream">要写到的<see cref="T:System.IO.Stream"/>。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.#ctor(System.IO.BinaryWriter)">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.Bson.BsonWriter"/>类的新实例。
            </summary>
            <param name="writer">要写到的<see cref="T:System.IO.BinaryWriter"/>。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.Flush">
            <summary>
            将缓冲区中的任何内容刷新到底层<see cref="T:System.IO.Stream"/>, 并刷新底层流。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
            <summary>
            写入结束。
            </summary>
            <param name="token">令牌。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteComment(System.String)">
            <summary>
            <C>/*. * */</c> 包含指定文本的注释。
            </summary>
            <param name="text">要放置在注释中的文本。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteStartConstructor(System.String)">
            <summary>
            写入具有给定名称的构造函数的开头。
            </summary>
            <param name="name">构造函数的名称。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRaw(System.String)">
            <summary>
            写入原始 JSON。
            </summary>
            <param name="json">要编写的原始 JSON。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRawValue(System.String)">
            <summary>
            写入需要值的原始 JSON, 并更新编写器的状态。
            </summary>
            <param name="json">要编写的原始 JSON。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteStartArray">
            <summary>
            写入 JSON 数组的开头。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteStartObject">
            <summary>
            写入 JSON 对象的开头。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WritePropertyName(System.String)">
            <summary>
            在 JSON 对象上写入 name/值对的属性名称。
            </summary>
            <param name="name">属性的名称。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.Close">
            <summary>
            关闭此编写器。
            如果<see cref="P:Newtonsoft.Json.JsonWriter.CloseOutput"/>被设定为 <c> 真实的 </c>, 则底层<see cref="T:System.IO.Stream"/>也是封闭的。
            如果<see cref="P:Newtonsoft.Json.JsonWriter.AutoCompleteOnClose"/>设置为 <c> 真实的 </c>, 则 JSON 将自动完成。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Object)">
            <summary>
            写入一个<see cref="T:System.Object"/>值。
            如果该值不能写入单个 JSON 令牌, 则会引发错误。
            </summary>
            <param name="value">要写入的<see cref="T:System.Object"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteNull">
            <summary>
            写入空值。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteUndefined">
            <summary>
            写入未定义的值。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.String)">
            <summary>
            写入一个<see cref="T:System.String"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.String"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int32)">
            <summary>
            写入一个<see cref="T:System.Int32"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Int32"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt32)">
            <summary>
            写入一个<see cref="T:System.UInt32"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.UInt32"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int64)">
            <summary>
            写入一个<see cref="T:System.Int64"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Int64"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt64)">
            <summary>
            写入一个<see cref="T:System.UInt64"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.UInt64"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Single)">
            <summary>
            写入一个<see cref="T:System.Single"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Single"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Double)">
            <summary>
            写入一个<see cref="T:System.Double"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Double"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Boolean)">
            <summary>
            写入一个<see cref="T:System.Boolean"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Boolean"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int16)">
            <summary>
            写入一个<see cref="T:System.Int16"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Int16"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt16)">
            <summary>
            写入一个<see cref="T:System.UInt16"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.UInt16"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Char)">
            <summary>
            写入一个<see cref="T:System.Char"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Char"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Byte)">
            <summary>
            写入一个<see cref="T:System.Byte"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Byte"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.SByte)">
            <summary>
            写入一个<see cref="T:System.SByte"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.SByte"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Decimal)">
            <summary>
            写入一个<see cref="T:System.Decimal"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Decimal"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.DateTime)">
            <summary>
            写入一个<see cref="T:System.DateTime"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.DateTime"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            写入一个<see cref="T:System.DateTimeOffset"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.DateTimeOffset"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Byte[])">
            <summary>
            写入一个<see cref="T:System.Byte"/> [] 值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Byte"/> [] 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Guid)">
            <summary>
            写入一个<see cref="T:System.Guid"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Guid"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.TimeSpan)">
            <summary>
            写入一个<see cref="T:System.TimeSpan"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.TimeSpan"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Uri)">
            <summary>
            写入一个<see cref="T:System.Uri"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Uri"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteObjectId(System.Byte[])">
            <summary>
            写入表示 BSON 对象 id 的<see cref="T:System.Byte"/> [] 值。
            </summary>
            <param name="value">要写入的对象 ID 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRegex(System.String,System.String)">
            <summary>
            写入 BSON 正则表达式。
            </summary>
            <param name="pattern">正则表达式。</param>
            <param name="options">正则表达式选项。</param>
        </member>
        <member name="T:Newtonsoft.Json.ConstructorHandling">
            <summary>
            指定在<see cref="T:Newtonsoft.Json.JsonSerializer"/>反序列化过程中初始化对象时使用构造函数的方式。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.ConstructorHandling.Default">
            <summary>
            首先尝试使用公共默认构造函数, 然后返回到单个参数化构造函数, 然后返回到非公共默认构造函数。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.ConstructorHandling.AllowNonPublicDefaultConstructor">
            <summary>
            在返回到参数化构造函数之前, Json.NET net 将使用非公共默认构造函数。
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Converters.BinaryConverter">
            <summary>
            将二进制值转换为基础64字符串值。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.BinaryConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            写入对象的 JSON 表示形式。
            </summary>
            <param name="writer">要写到的<see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="value">值。</param>
            <param name="serializer">调用序列化程序。</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            读取对象的 JSON 表示形式。
            </summary>
            <param name="reader">要阅读的<see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="objectType">对象的类型。</param>
            <param name="existingValue">正在读取的对象的现有值。</param>
            <param name="serializer">调用序列化程序。</param>
            <returns>对象值。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)">
            <summary>
            确定此实例是否可以转换指定的对象类型。
            </summary>
            <param name="objectType">对象的类型。</param>
            <returns>
            	如果此实例可以转换指定的对象类型, 则 <c> true </c> 如果此实例可以转换指定的对象类型。否则, <c> 虚假的 </c>。
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.BsonObjectIdConverter">
            <summary>
            将<see cref="T:Newtonsoft.Json.Bson.BsonObjectId"/>转换为 JSON 和 BSON。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.BsonObjectIdConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            写入对象的 JSON 表示形式。
            </summary>
            <param name="writer">要写到的<see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="value">值。</param>
            <param name="serializer">调用序列化程序。</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.BsonObjectIdConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            读取对象的 JSON 表示形式。
            </summary>
            <param name="reader">要阅读的<see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="objectType">对象的类型。</param>
            <param name="existingValue">正在读取的对象的现有值。</param>
            <param name="serializer">调用序列化程序。</param>
            <returns>对象值。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.BsonObjectIdConverter.CanConvert(System.Type)">
            <summary>
            确定此实例是否可以转换指定的对象类型。
            </summary>
            <param name="objectType">对象的类型。</param>
            <returns>
            	如果此实例可以转换指定的对象类型, 则 <c> true </c> 如果此实例可以转换指定的对象类型。否则, <c> 虚假的 </c>。
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.CustomCreationConverter`1">
            <summary>
            创建自定义对象。
            </summary>
            <typeparam name="T">要转换的对象类型。</typeparam>
        </member>
        <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            写入对象的 JSON 表示形式。
            </summary>
            <param name="writer">要写到的<see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="value">值。</param>
            <param name="serializer">调用序列化程序。</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            读取对象的 JSON 表示形式。
            </summary>
            <param name="reader">要阅读的<see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="objectType">对象的类型。</param>
            <param name="existingValue">正在读取的对象的现有值。</param>
            <param name="serializer">调用序列化程序。</param>
            <returns>对象值。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.Create(System.Type)">
            <summary>
            创建一个对象, 然后由序列化程序填充该对象。
            </summary>
            <param name="objectType">对象的类型。</param>
            <returns>创建的对象。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.CanConvert(System.Type)">
            <summary>
            确定此实例是否可以转换指定的对象类型。
            </summary>
            <param name="objectType">对象的类型。</param>
            <returns>
            	如果此实例可以转换指定的对象类型, 则 <c> true </c> 如果此实例可以转换指定的对象类型。否则, <c> 虚假的 </c>。
            </returns>
        </member>
        <member name="P:Newtonsoft.Json.Converters.CustomCreationConverter`1.CanWrite">
            <summary>
            获取一个值, 该值指示此<see cref="T:Newtonsoft.Json.JsonConverter"/>是否可以写入 JSON。
            </summary>
            <value>
            	<c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Newtonsoft.Json.Converters.DataSetConverter">
            <summary>
            将<see cref="T:System.Data.DataSet"/>转换为 JSON 和从 JSON 转换。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataSetConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            写入对象的 JSON 表示形式。
            </summary>
            <param name="writer">要写到的<see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="value">值。</param>
            <param name="serializer">调用序列化程序。</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataSetConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            读取对象的 JSON 表示形式。
            </summary>
            <param name="reader">要阅读的<see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="objectType">对象的类型。</param>
            <param name="existingValue">正在读取的对象的现有值。</param>
            <param name="serializer">调用序列化程序。</param>
            <returns>对象值。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataSetConverter.CanConvert(System.Type)">
            <summary>
            确定此实例是否可以转换指定的值类型。
            </summary>
            <param name="valueType">值的类型。</param>
            <returns>
            	如果此实例可以转换指定的值类型, 则 <c> true </c> 如果此实例可以转换指定的值类型。否则, <c> 虚假的 </c>。
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.DataTableConverter">
            <summary>
            将<see cref="T:System.Data.DataTable"/>转换为 JSON 和从 JSON 转换。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataTableConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            写入对象的 JSON 表示形式。
            </summary>
            <param name="writer">要写到的<see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="value">值。</param>
            <param name="serializer">调用序列化程序。</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataTableConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            读取对象的 JSON 表示形式。
            </summary>
            <param name="reader">要阅读的<see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="objectType">对象的类型。</param>
            <param name="existingValue">正在读取的对象的现有值。</param>
            <param name="serializer">调用序列化程序。</param>
            <returns>对象值。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataTableConverter.CanConvert(System.Type)">
            <summary>
            确定此实例是否可以转换指定的值类型。
            </summary>
            <param name="valueType">值的类型。</param>
            <returns>
            	如果此实例可以转换指定的值类型, 则 <c> true </c> 如果此实例可以转换指定的值类型。否则, <c> 虚假的 </c>。
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.DateTimeConverterBase">
            <summary>
            提供用于将<see cref="T:System.DateTime"/>转换为 JSON 或从 JSON 转换的基类。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DateTimeConverterBase.CanConvert(System.Type)">
            <summary>
            确定此实例是否可以转换指定的对象类型。
            </summary>
            <param name="objectType">对象的类型。</param>
            <returns>
            	如果此实例可以转换指定的对象类型, 则 <c> true </c> 如果此实例可以转换指定的对象类型。否则, <c> 虚假的 </c>。
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.DiscriminatedUnionConverter">
            <summary>
            将 F # 可区分的联合类型转换为 JSON 和从 JSON 转换。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DiscriminatedUnionConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            写入对象的 JSON 表示形式。
            </summary>
            <param name="writer">要写到的<see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="value">值。</param>
            <param name="serializer">调用序列化程序。</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DiscriminatedUnionConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            读取对象的 JSON 表示形式。
            </summary>
            <param name="reader">要阅读的<see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="objectType">对象的类型。</param>
            <param name="existingValue">正在读取的对象的现有值。</param>
            <param name="serializer">调用序列化程序。</param>
            <returns>对象值。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DiscriminatedUnionConverter.CanConvert(System.Type)">
            <summary>
            确定此实例是否可以转换指定的对象类型。
            </summary>
            <param name="objectType">对象的类型。</param>
            <returns>
            	如果此实例可以转换指定的对象类型, 则 <c> true </c> 如果此实例可以转换指定的对象类型。否则, <c> 虚假的 </c>。
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.EntityKeyMemberConverter">
            <summary>
            将实体框架<see cref="T:System.Data.EntityKeyMember"/>转换为 JSON 和从 JSON 转换。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.EntityKeyMemberConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            写入对象的 JSON 表示形式。
            </summary>
            <param name="writer">要写到的<see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="value">值。</param>
            <param name="serializer">调用序列化程序。</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.EntityKeyMemberConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            读取对象的 JSON 表示形式。
            </summary>
            <param name="reader">要阅读的<see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="objectType">对象的类型。</param>
            <param name="existingValue">正在读取的对象的现有值。</param>
            <param name="serializer">调用序列化程序。</param>
            <returns>对象值。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.EntityKeyMemberConverter.CanConvert(System.Type)">
            <summary>
            确定此实例是否可以转换指定的对象类型。
            </summary>
            <param name="objectType">对象的类型。</param>
            <returns>
            	如果此实例可以转换指定的对象类型, 则 <c> true </c> 如果此实例可以转换指定的对象类型。否则, <c> 虚假的 </c>。
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.ExpandoObjectConverter">
            <summary>
            将<see cref="T:System.Dynamic.ExpandoObject"/>转换为 JSON 和从 JSON 转换。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.ExpandoObjectConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            写入对象的 JSON 表示形式。
            </summary>
            <param name="writer">要写到的<see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="value">值。</param>
            <param name="serializer">调用序列化程序。</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.ExpandoObjectConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            读取对象的 JSON 表示形式。
            </summary>
            <param name="reader">要阅读的<see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="objectType">对象的类型。</param>
            <param name="existingValue">正在读取的对象的现有值。</param>
            <param name="serializer">调用序列化程序。</param>
            <returns>对象值。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.ExpandoObjectConverter.CanConvert(System.Type)">
            <summary>
            确定此实例是否可以转换指定的对象类型。
            </summary>
            <param name="objectType">对象的类型。</param>
            <returns>
            	如果此实例可以转换指定的对象类型, 则 <c> true </c> 如果此实例可以转换指定的对象类型。否则, <c> 虚假的 </c>。
            </returns>
        </member>
        <member name="P:Newtonsoft.Json.Converters.ExpandoObjectConverter.CanWrite">
            <summary>
            获取一个值, 该值指示此<see cref="T:Newtonsoft.Json.JsonConverter"/>是否可以写入 JSON。
            </summary>
            <value>
            	<c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Newtonsoft.Json.Converters.IsoDateTimeConverter">
            <summary>
            将<see cref="T:System.DateTime"/>转换为 ISO 8601 日期格式 (例如 <c> "2008-04-12T12:53Z" </c>)。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.DateTimeStyles">
            <summary>
            获取或设置将日期转换为 JSON 和从 JSON 转换日期时使用的日期时间样式。
            </summary>
            <value>The date time styles used when converting a date to and from JSON.</value>
        </member>
        <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.DateTimeFormat">
            <summary>
            获取或设置将日期转换为 JSON 或从 JSON 转换日期时使用的日期时间格式。
            </summary>
            <value>The date time format used when converting a date to and from JSON.</value>
        </member>
        <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.Culture">
            <summary>
            获取或设置将日期转换为 JSON 或从 JSON 转换时使用的区域性。
            </summary>
            <value>The culture used when converting a date to and from JSON.</value>
        </member>
        <member name="M:Newtonsoft.Json.Converters.IsoDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            写入对象的 JSON 表示形式。
            </summary>
            <param name="writer">要写到的<see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="value">值。</param>
            <param name="serializer">调用序列化程序。</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.IsoDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            读取对象的 JSON 表示形式。
            </summary>
            <param name="reader">要阅读的<see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="objectType">对象的类型。</param>
            <param name="existingValue">正在读取的对象的现有值。</param>
            <param name="serializer">调用序列化程序。</param>
            <returns>对象值。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter">
            <summary>
            将<see cref="T:System.DateTime"/>转换为 JavaScript <c> 日期 </c> 构造函数 (例如 <c> 新的 Date(52231943) </c>)。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            写入对象的 JSON 表示形式。
            </summary>
            <param name="writer">要写到的<see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="value">值。</param>
            <param name="serializer">调用序列化程序。</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            读取对象的 JSON 表示形式。
            </summary>
            <param name="reader">要阅读的<see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="objectType">对象的类型。</param>
            <param name="existingValue">要转换的 JSON 的现有属性值。</param>
            <param name="serializer">调用序列化程序。</param>
            <returns>对象值。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.KeyValuePairConverter">
            <summary>
            将<see cref="T:System.Collections.Generic.KeyValuePair`2"/>转换为 JSON 和从 JSON 转换。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.KeyValuePairConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            写入对象的 JSON 表示形式。
            </summary>
            <param name="writer">要写到的<see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="value">值。</param>
            <param name="serializer">调用序列化程序。</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.KeyValuePairConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            读取对象的 JSON 表示形式。
            </summary>
            <param name="reader">要阅读的<see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="objectType">对象的类型。</param>
            <param name="existingValue">正在读取的对象的现有值。</param>
            <param name="serializer">调用序列化程序。</param>
            <returns>对象值。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.KeyValuePairConverter.CanConvert(System.Type)">
            <summary>
            确定此实例是否可以转换指定的对象类型。
            </summary>
            <param name="objectType">对象的类型。</param>
            <returns>
            	如果此实例可以转换指定的对象类型, 则 <c> true </c> 如果此实例可以转换指定的对象类型。否则, <c> 虚假的 </c>。
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.RegexConverter">
            <summary>
            将<see cref="T:System.Text.RegularExpressions.Regex"/>转换为 JSON 和 BSON。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.RegexConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            写入对象的 JSON 表示形式。
            </summary>
            <param name="writer">要写到的<see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="value">值。</param>
            <param name="serializer">调用序列化程序。</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.RegexConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            读取对象的 JSON 表示形式。
            </summary>
            <param name="reader">要阅读的<see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="objectType">对象的类型。</param>
            <param name="existingValue">正在读取的对象的现有值。</param>
            <param name="serializer">调用序列化程序。</param>
            <returns>对象值。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.RegexConverter.CanConvert(System.Type)">
            <summary>
            确定此实例是否可以转换指定的对象类型。
            </summary>
            <param name="objectType">对象的类型。</param>
            <returns>
            	如果此实例可以转换指定的对象类型, 则 <c> true </c> 如果此实例可以转换指定的对象类型。否则, <c> 虚假的 </c>。
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.StringEnumConverter">
            <summary>
            将<see cref="T:System.Enum"/>转换为一个<see cref="T:System.Enum"/>, 并将其名称字符串值转换为一个<see cref="T:System.Enum"/>。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.StringEnumConverter.CamelCaseText">
            <summary>
            获取或设置一个值, 该值指示写入的枚举文本是否应为 camel 大小写。
            默认值 <c> 错误 </c>。
            </summary>
            <value><c>true</c> if the written enum text will be camel case; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Newtonsoft.Json.Converters.StringEnumConverter.AllowIntegerValues">
            <summary>
            获取或设置一个值, 该值指示反序列化时是否允许整数值。
            默认值 <c> 为 true </c>。
            </summary>
            <value><c>true</c> if integers are allowed when deserializing; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.#ctor">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.Converters.StringEnumConverter"/>类的新实例。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.#ctor(System.Boolean)">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.Converters.StringEnumConverter"/>类的新实例。
            </summary>
            <param name="camelCaseText"><c> 真的 </c> 如果书面的枚举文本将是骆驼的情况;否则, <c> 虚假的 </c>。</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            写入对象的 JSON 表示形式。
            </summary>
            <param name="writer">要写到的<see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="value">值。</param>
            <param name="serializer">调用序列化程序。</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            读取对象的 JSON 表示形式。
            </summary>
            <param name="reader">要阅读的<see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="objectType">对象的类型。</param>
            <param name="existingValue">正在读取的对象的现有值。</param>
            <param name="serializer">调用序列化程序。</param>
            <returns>对象值。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.CanConvert(System.Type)">
            <summary>
            确定此实例是否可以转换指定的对象类型。
            </summary>
            <param name="objectType">对象的类型。</param>
            <returns>
            如果此实例可以转换指定的对象类型, 则 <c> true </c> 如果此实例可以转换指定的对象类型。否则, <c> 虚假的 </c>。
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.UnixDateTimeConverter">
            <summary>
            将<see cref="T:System.DateTime"/>转换为 Unix 时代时间
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.UnixDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            写入对象的 JSON 表示形式。
            </summary>
            <param name="writer">要写到的<see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="value">值。</param>
            <param name="serializer">调用序列化程序。</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.UnixDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            读取对象的 JSON 表示形式。
            </summary>
            <param name="reader">要阅读的<see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="objectType">对象的类型。</param>
            <param name="existingValue">要转换的 JSON 的现有属性值。</param>
            <param name="serializer">调用序列化程序。</param>
            <returns>对象值。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.VersionConverter">
            <summary>
            将<see cref="T:System.Version"/>转换为字符串 (例如 <c> "1.2.3.4" </c>)。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.VersionConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            写入对象的 JSON 表示形式。
            </summary>
            <param name="writer">要写到的<see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="value">值。</param>
            <param name="serializer">调用序列化程序。</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.VersionConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            读取对象的 JSON 表示形式。
            </summary>
            <param name="reader">要阅读的<see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="objectType">对象的类型。</param>
            <param name="existingValue">要转换的 JSON 的现有属性值。</param>
            <param name="serializer">调用序列化程序。</param>
            <returns>对象值。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.VersionConverter.CanConvert(System.Type)">
            <summary>
            确定此实例是否可以转换指定的对象类型。
            </summary>
            <param name="objectType">对象的类型。</param>
            <returns>
            	如果此实例可以转换指定的对象类型, 则 <c> true </c> 如果此实例可以转换指定的对象类型。否则, <c> 虚假的 </c>。
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.XmlNodeConverter">
            <summary>
            将 XML 转换为 JSON 和从 JSON 转换为 xml。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeRootElementName">
            <summary>
            获取或设置在反序列化到 XML 时要插入的根元素的名称, 如果 JSON 结构已生成多个根元素。
            </summary>
            <value>The name of the deserialized root element.</value>
        </member>
        <member name="P:Newtonsoft.Json.Converters.XmlNodeConverter.WriteArrayAttribute">
            <summary>
            获取或设置一个标志, 以指示是否编写 Json.NET net 数组属性。
            在将编写的 XML 转换回 JSON 时, 此属性有助于保留数组。
            </summary>
            <value><c>true</c> if the array attribute is written to the XML; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Newtonsoft.Json.Converters.XmlNodeConverter.OmitRootObject">
            <summary>
            获取或设置一个值, 该值指示是否写入根 JSON 对象。
            </summary>
            <value><c>true</c> if the JSON root object is omitted; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            写入对象的 JSON 表示形式。
            </summary>
            <param name="writer">要写到的<see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="serializer">调用序列化程序。</param>
            <param name="value">值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            读取对象的 JSON 表示形式。
            </summary>
            <param name="reader">要阅读的<see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="objectType">对象的类型。</param>
            <param name="existingValue">正在读取的对象的现有值。</param>
            <param name="serializer">调用序列化程序。</param>
            <returns>对象值。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.IsNamespaceAttribute(System.String,System.String@)">
            <summary>
            检查<paramref name="attributeName"/>是否为命名空间属性。
            </summary>
            <param name="attributeName">要测试的属性名称。</param>
            <param name="prefix">属性名称前缀 (如果有一个), 否则为空字符串。</param>
            <returns>如果属性名称用于命名空间属性, 则 <c> true </c> 否则 <c> 错误的 </c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.CanConvert(System.Type)">
            <summary>
            确定此实例是否可以转换指定的值类型。
            </summary>
            <param name="valueType">值的类型。</param>
            <returns>
            	如果此实例可以转换指定的值类型, 则 <c> true </c> 如果此实例可以转换指定的值类型。否则, <c> 虚假的 </c>。
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.DateFormatHandling">
            <summary>
            指定编写 JSON 文本时日期的格式设置。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.DateFormatHandling.IsoDateFormat">
            <summary>
            日期以 ISO 8601 格式编写, 例如 <c> "2012-03-21T05: 40z" </c>。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.DateFormatHandling.MicrosoftDateFormat">
            <summary>
            日期是以 Microsoft JSON 格式编写的, 例如 <c> "\/Date(1198908717056)\/" </c>。
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.DateParseHandling">
            <summary>
            指定在读取 JSON 文本时如何分析日期格式的字符串, 例如 <c> "\/Date(1198908717056)\/" </c> 和 <c> "2012-03-21T05: 40z" </c>。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.DateParseHandling.None">
            <summary>
            日期格式的字符串不会解析为日期类型, 并作为字符串读取。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.DateParseHandling.DateTime">
            <summary>
            日期格式的字符串, 例如 <c> "\/Date(1198908717056)\/" </c> 和 <c> "2012-03-21T05: 40z" </c> 被解析为<see cref="F:Newtonsoft.Json.DateParseHandling.DateTime"/>。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.DateParseHandling.DateTimeOffset">
            <summary>
            日期格式的字符串, 例如 <c> "\/Date(1198908717056)\/" </c> 和 <c> "2012-03-21T05: 40z" </c> 被解析为<see cref="F:Newtonsoft.Json.DateParseHandling.DateTimeOffset"/>。
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.DateTimeZoneHandling">
            <summary>
            指定如何在字符串和<see cref="T:System.DateTime"/>之间转换时处理时间值。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.DateTimeZoneHandling.Local">
            <summary>
            将其视为当地时间。如果<see cref="T:System.DateTime"/>对象表示协调世界时 (UTC), 则会将其转换为本地时间。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.DateTimeZoneHandling.Utc">
            <summary>
            将其视为 UTC。如果<see cref="T:System.DateTime"/>对象表示本地时间, 则会将其转换为 UTC。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.DateTimeZoneHandling.Unspecified">
            <summary>
            如果<see cref="T:System.DateTime"/>被转换为字符串, 则视为本地时间。
            如果字符串转换为<see cref="T:System.DateTime"/>, 则在指定时区的情况下转换为本地时间。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.DateTimeZoneHandling.RoundtripKind">
            <summary>
            转换时应保留时区信息。
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.DefaultValueHandling">
            <summary>
            指定<see cref="T:Newtonsoft.Json.JsonSerializer"/>的默认值处理选项。
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeDefaultValueHandlingObject" title="DefaultValueHandling Class" />
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeDefaultValueHandlingExample" title="DefaultValueHandling Ignore Example" />
            </example>
        </member>
        <member name="F:Newtonsoft.Json.DefaultValueHandling.Include">
            <summary>
            在序列化对象时, 包括成员值与成员的默认值相同的成员。
            包含的成员被写入 JSON。反序列化时没有任何效果。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.DefaultValueHandling.Ignore">
            <summary>
            在序列化对象时忽略成员值与成员的默认值相同的成员
            这样它就不会写给 JSON。
            此选项将忽略所有默认值 (例如, 对象和可空类型的 <c> null </c>;<c> 0 </c> 整数,
            小数和浮点数;和 <c> 的虚假 </c> 为布尔值)。可以通过更改忽略的默认值:
            把<see cref="T:System.ComponentModel.DefaultValueAttribute"/>放在这个属性上
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.DefaultValueHandling.Populate">
            <summary>
            反序列化时, 具有默认值但没有 JSON 的成员将设置为其默认值。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.DefaultValueHandling.IgnoreAndPopulate">
            <summary>
            在序列化对象时忽略成员值与成员的默认值相同的成员
            并在反序列化时将成员设置为其默认值。
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.FloatFormatHandling">
            <summary>
            指定在写入特殊浮点数时的浮动格式处理选项, 例如,
            <see cref="F:System.Double.NaN"/>和<see cref="F:System.Double.PositiveInfinity"/>与<see cref="F:System.Double.NegativeInfinity"/>。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.FloatFormatHandling.String">
            <summary>
            在 JSON 中将特殊浮点值写入字符串, 例如 <c> "NaN" </c>、<c> "无限" </c>、<c> "-无限" </c>。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.FloatFormatHandling.Symbol">
            <summary>
            在 JSON 中将特殊的浮点值作为符号写入, 例如 <c> NaN </c>、<c> 无限 </c>、<c>-无限 </C>。
            请注意, 这将产生无效的 JSON。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.FloatFormatHandling.DefaultValue">
            <summary>
            在 JSON 中将特殊浮点值写入属性的默认值, 例如, 一个<see cref="T:System.Double"/>属性为 0.0, <c> 为 </c> 为一个<see cref="T:System.Nullable`1"/>属性的 null。
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.FloatParseHandling">
            <summary>
            指定在读取 JSON 文本时如何分析浮点数 (例如1.0 和 9.9)。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.FloatParseHandling.Double">
            <summary>
            浮点数被解析为<see cref="F:Newtonsoft.Json.FloatParseHandling.Double"/>。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.FloatParseHandling.Decimal">
            <summary>
            浮点数被解析为<see cref="F:Newtonsoft.Json.FloatParseHandling.Decimal"/>。
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Formatting">
            <summary>
            指定<see cref="T:Newtonsoft.Json.JsonTextWriter"/>的格式选项。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Formatting.None">
            <summary>
            不应用特殊格式。这是默认设置。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Formatting.Indented">
            <summary>
            根据<see cref="P:Newtonsoft.Json.JsonTextWriter.Indentation"/>和<see cref="P:Newtonsoft.Json.JsonTextWriter.IndentChar"/>设置使子对象缩进。
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.IArrayPool`1">
            <summary>
            提供用于使用池数组的接口。
            </summary>
            <typeparam name="T">数组类型内容。</typeparam>
        </member>
        <member name="M:Newtonsoft.Json.IArrayPool`1.Rent(System.Int32)">
            <summary>
            从游泳池租一个阵列。当不再需要此数组时, 必须返回它。
            </summary>
            <param name="minimumLength">数组所需的最小长度。返回的数组可能会更长。</param>
            <returns>从游泳池租用的阵列。当不再需要此数组时, 必须返回它。</returns>
        </member>
        <member name="M:Newtonsoft.Json.IArrayPool`1.Return(`0[])">
            <summary>
            将数组返回到池中。
            </summary>
            <param name="array">正在返回的数组。</param>
        </member>
        <member name="T:Newtonsoft.Json.IJsonLineInfo">
            <summary>
            提供一个接口, 使类能够返回行和位置信息。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.IJsonLineInfo.HasLineInfo">
            <summary>
            获取一个值, 该值指示类是否可以返回行信息。
            </summary>
            <returns>
            	如果可以提供<see cref="P:Newtonsoft.Json.IJsonLineInfo.LineNumber"/>和<see cref="P:Newtonsoft.Json.IJsonLineInfo.LinePosition"/>, <c> 真正的 </c>;否则, <c> 虚假的 </c>。
            </returns>
        </member>
        <member name="P:Newtonsoft.Json.IJsonLineInfo.LineNumber">
            <summary>
            获取当前行号。
            </summary>
            <value>The current line number or 0 if no line information is available (for example, when <see cref="M:Newtonsoft.Json.IJsonLineInfo.HasLineInfo"/> returns <c>false</c>).</value>
        </member>
        <member name="P:Newtonsoft.Json.IJsonLineInfo.LinePosition">
            <summary>
            获取当前行位置。
            </summary>
            <value>The current line position or 0 if no line information is available (for example, when <see cref="M:Newtonsoft.Json.IJsonLineInfo.HasLineInfo"/> returns <c>false</c>).</value>
        </member>
        <member name="T:Newtonsoft.Json.JsonArrayAttribute">
            <summary>
            指示<see cref="T:Newtonsoft.Json.JsonSerializer"/>如何序列化集合。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonArrayAttribute.AllowNullItems">
            <summary>
            获取或设置一个值, 该值指示是否允许在集合中使用空项。
            </summary>
            <value><c>true</c> if null items are allowed in the collection; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.JsonArrayAttribute"/>类的新实例。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor(System.Boolean)">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.JsonObjectAttribute"/>类的新实例, 并带有指示数组是否可以包含空项的标志。
            </summary>
            <param name="allowNullItems">指示数组是否可以包含空项的标志。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor(System.String)">
            <summary>
            使用指定的容器 Id 初始化<see cref="T:Newtonsoft.Json.JsonArrayAttribute"/>类的新实例。
            </summary>
            <param name="id">容器 Id。</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonConstructorAttribute">
            <summary>
            指示<see cref="T:Newtonsoft.Json.JsonSerializer"/>在反序列化该对象时使用指定的构造函数。
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonContainerAttribute">
            <summary>
            指示<see cref="T:Newtonsoft.Json.JsonSerializer"/>如何序列化对象。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.Id">
            <summary>
            获取或设置 id。
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.Title">
            <summary>
            获取或设置标题。
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.Description">
            <summary>
            获取或设置说明。
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemConverterType">
            <summary>
            获取或设置集合的项转换器。
            </summary>
            <value>The collection's items converter.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemConverterParameters">
            <summary>
            构建由<see cref="T:Newtonsoft.Json.JsonConverter"/>描述的<see cref="P:Newtonsoft.Json.JsonContainerAttribute.ItemConverterType"/>时使用的参数列表。
            如果 <c> null </c>, 则使用默认构造函数。
            当非 <c> null </c> 时, 必须有一个在<see cref="T:Newtonsoft.Json.JsonConverter"/>中定义的构造函数与数字完全匹配,
            这些参数的顺序和类型。
            </summary>
            <example>
            <code>
            [JsonContainer(ItemConverterType = typeof(MyContainerConverter), ItemConverterParameters = new object[] { 123, "Four" })]
            </code>
            </example>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.NamingStrategyType">
            <summary>
            获取或设置<see cref="T:System.Type"/>的<see cref="T:Newtonsoft.Json.Serialization.NamingStrategy"/>。
            </summary>
            <value>The <see cref="T:System.Type"/> of the <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy"/>.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.NamingStrategyParameters">
            <summary>
            构建由<see cref="T:Newtonsoft.Json.Serialization.NamingStrategy"/>描述的<see cref="P:Newtonsoft.Json.JsonContainerAttribute.NamingStrategyType"/>时使用的参数列表。
            如果 <c> null </c>, 则使用默认构造函数。
            当非 <c> null </c> 时, 必须有一个在<see cref="T:Newtonsoft.Json.Serialization.NamingStrategy"/>中定义的构造函数与数字完全匹配,
            这些参数的顺序和类型。
            </summary>
            <example>
            <code>
            [JsonContainer(NamingStrategyType = typeof(MyNamingStrategy), NamingStrategyParameters = new object[] { 123, "Four" })]
            </code>
            </example>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.IsReference">
            <summary>
            获取或设置一个值, 该值指示是否保留对象引用。
            </summary>
            <value>
            	<c>true</c> to keep object reference; otherwise, <c>false</c>. The default is <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemIsReference">
            <summary>
            获取或设置一个值, 该值指示是否保留集合的项引用。
            </summary>
            <value>
            	<c>true</c> to keep collection's items object references; otherwise, <c>false</c>. The default is <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemReferenceLoopHandling">
            <summary>
            获取或设置序列化集合项时使用的引用循环处理。
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemTypeNameHandling">
            <summary>
            获取或设置序列化集合项时使用的类型名称处理。
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonContainerAttribute.#ctor">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.JsonContainerAttribute"/>类的新实例。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonContainerAttribute.#ctor(System.String)">
            <summary>
            使用指定的容器 Id 初始化<see cref="T:Newtonsoft.Json.JsonContainerAttribute"/>类的新实例。
            </summary>
            <param name="id">容器 Id。</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonConvert">
            <summary>
            提供在. net 类型和 JSON 类型之间进行转换的方法。
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="SerializeObject" title="Serializing and Deserializing JSON with JsonConvert" />
            </example>
        </member>
        <member name="P:Newtonsoft.Json.JsonConvert.DefaultSettings">
            <summary>
            获取或设置创建默认<see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>的函数。
            <see cref="T:Newtonsoft.Json.JsonConvert"/>上的序列化方法会自动使用默认设置,
            <see cref="M:Newtonsoft.Json.Linq.JToken.ToObject``1"/>和<see cref="M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object)"/>在<see cref="T:Newtonsoft.Json.Linq.JToken"/>上
            若要在不使用任何默认设置的情况下序列化, 请创建一个带有
            <see cref="T:Newtonsoft.Json.JsonSerializer"/>。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.True">
            <summary>
            表示 JavaScript 的布尔值 <c> true </c> 为字符串。此字段是只读的。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.False">
            <summary>
            表示 JavaScript 的布尔值 <c> 作为字符串的假 </c>。此字段是只读的。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.Null">
            <summary>
            表示 JavaScript 的 <c> 空 </c> 为字符串。此字段是只读的。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.Undefined">
            <summary>
            表示 JavaScript 的 <c> 未定义的 </c> 作为字符串。此字段是只读的。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.PositiveInfinity">
            <summary>
            表示 JavaScript 作为字符串的正无穷大。此字段是只读的。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.NegativeInfinity">
            <summary>
            表示 JavaScript 作为字符串的负无穷大。此字段是只读的。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.NaN">
            <summary>
            表示 JavaScript 的 <c> NaN </c> 作为字符串。此字段是只读的。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTime)">
            <summary>
            将<see cref="T:System.DateTime"/>转换为它的 JSON 字符串表示形式。
            </summary>
            <param name="value">要转换的值。</param>
            <returns><see cref="T:System.DateTime"/>的 JSON 字符串表示形式。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTime,Newtonsoft.Json.DateFormatHandling,Newtonsoft.Json.DateTimeZoneHandling)">
            <summary>
            使用指定的<see cref="T:System.DateTime"/>将<see cref="T:Newtonsoft.Json.DateFormatHandling"/>转换为其 JSON 字符串表示形式。
            </summary>
            <param name="value">要转换的值。</param>
            <param name="format">日期将转换为的格式。</param>
            <param name="timeZoneHandling">将日期转换为字符串时的时区处理。</param>
            <returns><see cref="T:System.DateTime"/>的 JSON 字符串表示形式。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset)">
            <summary>
            将<see cref="T:System.DateTimeOffset"/>转换为它的 JSON 字符串表示形式。
            </summary>
            <param name="value">要转换的值。</param>
            <returns><see cref="T:System.DateTimeOffset"/>的 JSON 字符串表示形式。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset,Newtonsoft.Json.DateFormatHandling)">
            <summary>
            使用指定的<see cref="T:System.DateTimeOffset"/>将<see cref="T:Newtonsoft.Json.DateFormatHandling"/>转换为其 JSON 字符串表示形式。
            </summary>
            <param name="value">要转换的值。</param>
            <param name="format">日期将转换为的格式。</param>
            <returns><see cref="T:System.DateTimeOffset"/>的 JSON 字符串表示形式。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Boolean)">
            <summary>
            将<see cref="T:System.Boolean"/>转换为它的 JSON 字符串表示形式。
            </summary>
            <param name="value">要转换的值。</param>
            <returns><see cref="T:System.Boolean"/>的 JSON 字符串表示形式。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Char)">
            <summary>
            将<see cref="T:System.Char"/>转换为它的 JSON 字符串表示形式。
            </summary>
            <param name="value">要转换的值。</param>
            <returns><see cref="T:System.Char"/>的 JSON 字符串表示形式。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Enum)">
            <summary>
            将<see cref="T:System.Enum"/>转换为它的 JSON 字符串表示形式。
            </summary>
            <param name="value">要转换的值。</param>
            <returns><see cref="T:System.Enum"/>的 JSON 字符串表示形式。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int32)">
            <summary>
            将<see cref="T:System.Int32"/>转换为它的 JSON 字符串表示形式。
            </summary>
            <param name="value">要转换的值。</param>
            <returns><see cref="T:System.Int32"/>的 JSON 字符串表示形式。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int16)">
            <summary>
            将<see cref="T:System.Int16"/>转换为它的 JSON 字符串表示形式。
            </summary>
            <param name="value">要转换的值。</param>
            <returns><see cref="T:System.Int16"/>的 JSON 字符串表示形式。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt16)">
            <summary>
            将<see cref="T:System.UInt16"/>转换为它的 JSON 字符串表示形式。
            </summary>
            <param name="value">要转换的值。</param>
            <returns><see cref="T:System.UInt16"/>的 JSON 字符串表示形式。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt32)">
            <summary>
            将<see cref="T:System.UInt32"/>转换为它的 JSON 字符串表示形式。
            </summary>
            <param name="value">要转换的值。</param>
            <returns><see cref="T:System.UInt32"/>的 JSON 字符串表示形式。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int64)">
            <summary>
            将<see cref="T:System.Int64"/>转换为它的 JSON 字符串表示形式。
            </summary>
            <param name="value">要转换的值。</param>
            <returns><see cref="T:System.Int64"/>的 JSON 字符串表示形式。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt64)">
            <summary>
            将<see cref="T:System.UInt64"/>转换为它的 JSON 字符串表示形式。
            </summary>
            <param name="value">要转换的值。</param>
            <returns><see cref="T:System.UInt64"/>的 JSON 字符串表示形式。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Single)">
            <summary>
            将<see cref="T:System.Single"/>转换为它的 JSON 字符串表示形式。
            </summary>
            <param name="value">要转换的值。</param>
            <returns><see cref="T:System.Single"/>的 JSON 字符串表示形式。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Double)">
            <summary>
            将<see cref="T:System.Double"/>转换为它的 JSON 字符串表示形式。
            </summary>
            <param name="value">要转换的值。</param>
            <returns><see cref="T:System.Double"/>的 JSON 字符串表示形式。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Byte)">
            <summary>
            将<see cref="T:System.Byte"/>转换为它的 JSON 字符串表示形式。
            </summary>
            <param name="value">要转换的值。</param>
            <returns><see cref="T:System.Byte"/>的 JSON 字符串表示形式。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.SByte)">
            <summary>
            将<see cref="T:System.SByte"/>转换为它的 JSON 字符串表示形式。
            </summary>
            <param name="value">要转换的值。</param>
            <returns><see cref="T:System.SByte"/>的 JSON 字符串表示形式。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Decimal)">
            <summary>
            将<see cref="T:System.Decimal"/>转换为它的 JSON 字符串表示形式。
            </summary>
            <param name="value">要转换的值。</param>
            <returns><see cref="T:System.SByte"/>的 JSON 字符串表示形式。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Guid)">
            <summary>
            将<see cref="T:System.Guid"/>转换为它的 JSON 字符串表示形式。
            </summary>
            <param name="value">要转换的值。</param>
            <returns><see cref="T:System.Guid"/>的 JSON 字符串表示形式。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.TimeSpan)">
            <summary>
            将<see cref="T:System.TimeSpan"/>转换为它的 JSON 字符串表示形式。
            </summary>
            <param name="value">要转换的值。</param>
            <returns><see cref="T:System.TimeSpan"/>的 JSON 字符串表示形式。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Uri)">
            <summary>
            将<see cref="T:System.Uri"/>转换为它的 JSON 字符串表示形式。
            </summary>
            <param name="value">要转换的值。</param>
            <returns><see cref="T:System.Uri"/>的 JSON 字符串表示形式。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.String)">
            <summary>
            将<see cref="T:System.String"/>转换为它的 JSON 字符串表示形式。
            </summary>
            <param name="value">要转换的值。</param>
            <returns><see cref="T:System.String"/>的 JSON 字符串表示形式。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.String,System.Char)">
            <summary>
            将<see cref="T:System.String"/>转换为它的 JSON 字符串表示形式。
            </summary>
            <param name="value">要转换的值。</param>
            <param name="delimiter">字符串分隔符字符。</param>
            <returns><see cref="T:System.String"/>的 JSON 字符串表示形式。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.String,System.Char,Newtonsoft.Json.StringEscapeHandling)">
            <summary>
            将<see cref="T:System.String"/>转换为它的 JSON 字符串表示形式。
            </summary>
            <param name="value">要转换的值。</param>
            <param name="delimiter">字符串分隔符字符。</param>
            <param name="stringEscapeHandling">字符串转义处理。</param>
            <returns><see cref="T:System.String"/>的 JSON 字符串表示形式。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Object)">
            <summary>
            将<see cref="T:System.Object"/>转换为它的 JSON 字符串表示形式。
            </summary>
            <param name="value">要转换的值。</param>
            <returns><see cref="T:System.Object"/>的 JSON 字符串表示形式。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object)">
            <summary>
            将指定的对象序列化为 JSON 字符串。
            </summary>
            <param name="value">要序列化的对象。</param>
            <returns>对象的 JSON 字符串表示形式。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting)">
            <summary>
            使用格式将指定的对象序列化为 JSON 字符串。
            </summary>
            <param name="value">要序列化的对象。</param>
            <param name="formatting">指示输出的格式。</param>
            <returns>
            对象的 JSON 字符串表示形式。
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.JsonConverter[])">
            <summary>
            使用<see cref="T:Newtonsoft.Json.JsonConverter"/>集合将指定的对象序列化为 JSON 字符串。
            </summary>
            <param name="value">要序列化的对象。</param>
            <param name="converters">序列化时使用的转换器的集合。</param>
            <returns>对象的 JSON 字符串表示形式。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonConverter[])">
            <summary>
            使用格式设置和<see cref="T:Newtonsoft.Json.JsonConverter"/>集合将指定的对象序列化为 JSON 字符串。
            </summary>
            <param name="value">要序列化的对象。</param>
            <param name="formatting">指示输出的格式。</param>
            <param name="converters">序列化时使用的转换器的集合。</param>
            <returns>对象的 JSON 字符串表示形式。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            使用<see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>将指定的对象序列化为 JSON 字符串。
            </summary>
            <param name="value">要序列化的对象。</param>
            <param name="settings">用于序列化对象的<see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>。
            如果这 <c> 为 null </c>, 则将使用默认序列化设置。</param>
            <returns>
            对象的 JSON 字符串表示形式。
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,System.Type,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            使用类型、格式和<see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>将指定的对象序列化为 JSON 字符串。
            </summary>
            <param name="value">要序列化的对象。</param>
            <param name="settings">用于序列化对象的<see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>。
            如果这 <c> 为 null </c>, 则将使用默认序列化设置。</param>
            <param name="type">
            要序列化的值的类型。
            当<see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling"/>是<see cref="F:Newtonsoft.Json.TypeNameHandling.Auto"/>时, 如果值的类型不匹配, 则使用此参数写出类型名称。
            指定类型是可选的。
            </param>
            <returns>
            对象的 JSON 字符串表示形式。
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            使用格式和<see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>将指定的对象序列化为 JSON 字符串。
            </summary>
            <param name="value">要序列化的对象。</param>
            <param name="formatting">指示输出的格式。</param>
            <param name="settings">用于序列化对象的<see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>。
            如果这 <c> 为 null </c>, 则将使用默认序列化设置。</param>
            <returns>
            对象的 JSON 字符串表示形式。
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,System.Type,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            使用类型、格式和<see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>将指定的对象序列化为 JSON 字符串。
            </summary>
            <param name="value">要序列化的对象。</param>
            <param name="formatting">指示输出的格式。</param>
            <param name="settings">用于序列化对象的<see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>。
            如果这 <c> 为 null </c>, 则将使用默认序列化设置。</param>
            <param name="type">
            要序列化的值的类型。
            当<see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling"/>是<see cref="F:Newtonsoft.Json.TypeNameHandling.Auto"/>时, 如果值的类型不匹配, 则使用此参数写出类型名称。
            指定类型是可选的。
            </param>
            <returns>
            对象的 JSON 字符串表示形式。
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String)">
            <summary>
            将 JSON 反序列化为. net 对象。
            </summary>
            <param name="value">要反序列化的 JSON。</param>
            <returns>JSON 字符串中的反序列化对象。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            使用<see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>将 JSON 反序列化到. net 对象。
            </summary>
            <param name="value">要反序列化的 JSON。</param>
            <param name="settings">
            用来反序列化物体的<see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>。
            如果这 <c> 为 null </c>, 则将使用默认序列化设置。
            </param>
            <returns>JSON 字符串中的反序列化对象。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type)">
            <summary>
            将 JSON 反序列化为指定的. net 类型。
            </summary>
            <param name="value">要反序列化的 JSON。</param>
            <param name="type">被反序列化的天体<see cref="T:System.Type"/>。</param>
            <returns>JSON 字符串中的反序列化对象。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String)">
            <summary>
            将 JSON 反序列化为指定的. net 类型。
            </summary>
            <typeparam name="T">要反序列化到的对象的类型。</typeparam>
            <param name="value">要反序列化的 JSON。</param>
            <returns>JSON 字符串中的反序列化对象。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeAnonymousType``1(System.String,``0)">
            <summary>
            将 JSON 反序列化为给定的匿名类型。
            </summary>
            <typeparam name="T">
            要反序列化到的匿名类型。无法指定此信息
            传统上, 必须从传递的匿名类型推断
            作为参数。
            </typeparam>
            <param name="value">要反序列化的 JSON。</param>
            <param name="anonymousTypeObject">匿名类型对象。</param>
            <returns>JSON 字符串中的反序列化匿名类型。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeAnonymousType``1(System.String,``0,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            利用<see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>将 JSON 反序列化到给定的匿名类型。
            </summary>
            <typeparam name="T">
            要反序列化到的匿名类型。无法指定此信息
            传统上, 必须从传递的匿名类型推断
            作为参数。
            </typeparam>
            <param name="value">要反序列化的 JSON。</param>
            <param name="anonymousTypeObject">匿名类型对象。</param>
            <param name="settings">
            用来反序列化物体的<see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>。
            如果这 <c> 为 null </c>, 则将使用默认序列化设置。
            </param>
            <returns>JSON 字符串中的反序列化匿名类型。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String,Newtonsoft.Json.JsonConverter[])">
            <summary>
            使用<see cref="T:Newtonsoft.Json.JsonConverter"/>集合将 JSON 反序列化到指定的. net 类型。
            </summary>
            <typeparam name="T">要反序列化到的对象的类型。</typeparam>
            <param name="value">要反序列化的 JSON。</param>
            <param name="converters">转换为在反序列化时使用。</param>
            <returns>JSON 字符串中的反序列化对象。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            使用<see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>将 JSON 反序列化到指定的. net 类型。
            </summary>
            <typeparam name="T">要反序列化到的对象的类型。</typeparam>
            <param name="value">要反序列化的对象。</param>
            <param name="settings">
            用来反序列化物体的<see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>。
            如果这 <c> 为 null </c>, 则将使用默认序列化设置。
            </param>
            <returns>JSON 字符串中的反序列化对象。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type,Newtonsoft.Json.JsonConverter[])">
            <summary>
            使用<see cref="T:Newtonsoft.Json.JsonConverter"/>集合将 JSON 反序列化到指定的. net 类型。
            </summary>
            <param name="value">要反序列化的 JSON。</param>
            <param name="type">要反序列化的对象的类型。</param>
            <param name="converters">转换为在反序列化时使用。</param>
            <returns>JSON 字符串中的反序列化对象。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            使用<see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>将 JSON 反序列化到指定的. net 类型。
            </summary>
            <param name="value">要反序列化的 JSON。</param>
            <param name="type">要反序列化到的对象的类型。</param>
            <param name="settings">
            用来反序列化物体的<see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>。
            如果这 <c> 为 null </c>, 则将使用默认序列化设置。
            </param>
            <returns>JSON 字符串中的反序列化对象。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.PopulateObject(System.String,System.Object)">
            <summary>
            使用 JSON 字符串中的值填充对象。
            </summary>
            <param name="value">要从其填充值的 JSON。</param>
            <param name="target">要在其上填充值的目标对象。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.PopulateObject(System.String,System.Object,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            使用<see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>使用 JSON 字符串中的值填充对象。
            </summary>
            <param name="value">要从其填充值的 JSON。</param>
            <param name="target">要在其上填充值的目标对象。</param>
            <param name="settings">
            用来反序列化物体的<see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>。
            如果这 <c> 为 null </c>, 则将使用默认序列化设置。
            </param>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode)">
            <summary>
            将<see cref="T:System.Xml.XmlNode"/>序列化为 JSON 字符串。
            </summary>
            <param name="node">要序列化的节点。</param>
            <returns><see cref="T:System.Xml.XmlNode"/>的一个 JSON 弦。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode,Newtonsoft.Json.Formatting)">
            <summary>
            使用格式将<see cref="T:System.Xml.XmlNode"/>序列化为 JSON 字符串。
            </summary>
            <param name="node">要序列化的节点。</param>
            <param name="formatting">指示输出的格式。</param>
            <returns><see cref="T:System.Xml.XmlNode"/>的一个 JSON 弦。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode,Newtonsoft.Json.Formatting,System.Boolean)">
            <summary>
            使用格式化将<see cref="T:System.Xml.XmlNode"/>序列化为 JSON 字符串, 如果 </c> 的<paramref name="omitRootObject"/> <c> 真实的, 则省略根对象。
            </summary>
            <param name="node">要序列化的节点。</param>
            <param name="formatting">指示输出的格式。</param>
            <param name="omitRootObject">忽略写入根对象。</param>
            <returns><see cref="T:System.Xml.XmlNode"/>的一个 JSON 弦。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String)">
            <summary>
            从 JSON 字符串反序列化<see cref="T:System.Xml.XmlNode"/>。
            </summary>
            <param name="value">JSON 字符串。</param>
            <returns>反化的<see cref="T:System.Xml.XmlNode"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String,System.String)">
            <summary>
            从嵌套在<see cref="T:System.Xml.XmlNode"/>指定的根元素中的 JSON 字符串反序列化<paramref name="deserializeRootElementName"/>。
            </summary>
            <param name="value">JSON 字符串。</param>
            <param name="deserializeRootElementName">反序列化时要追加的根元素的名称。</param>
            <returns>反化的<see cref="T:System.Xml.XmlNode"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String,System.String,System.Boolean)">
            <summary>
            从嵌套在<see cref="T:System.Xml.XmlNode"/>指定的根元素中的 JSON 字符串反序列化<paramref name="deserializeRootElementName"/>
            并为集合编写 Json.NET net 数组属性。
            </summary>
            <param name="value">JSON 字符串。</param>
            <param name="deserializeRootElementName">反序列化时要追加的根元素的名称。</param>
            <param name="writeArrayAttribute">
            指示是否编写 Json.NET net 数组属性的标志。
            在将编写的 XML 转换回 JSON 时, 此属性有助于保留数组。
            </param>
            <returns>反化的<see cref="T:System.Xml.XmlNode"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject)">
            <summary>
            将<see cref="T:System.Xml.Linq.XNode"/>序列化为 JSON 字符串。
            </summary>
            <param name="node">要转换为 JSON 的节点。</param>
            <returns><see cref="T:System.Xml.Linq.XNode"/>的一个 JSON 弦。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject,Newtonsoft.Json.Formatting)">
            <summary>
            使用格式将<see cref="T:System.Xml.Linq.XNode"/>序列化为 JSON 字符串。
            </summary>
            <param name="node">要转换为 JSON 的节点。</param>
            <param name="formatting">指示输出的格式。</param>
            <returns><see cref="T:System.Xml.Linq.XNode"/>的一个 JSON 弦。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject,Newtonsoft.Json.Formatting,System.Boolean)">
            <summary>
            使用格式化将<see cref="T:System.Xml.Linq.XNode"/>序列化为 JSON 字符串, 如果 </c> 的<paramref name="omitRootObject"/> <c> 真实的, 则省略根对象。
            </summary>
            <param name="node">要序列化的节点。</param>
            <param name="formatting">指示输出的格式。</param>
            <param name="omitRootObject">忽略写入根对象。</param>
            <returns><see cref="T:System.Xml.Linq.XNode"/>的一个 JSON 弦。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String)">
            <summary>
            从 JSON 字符串反序列化<see cref="T:System.Xml.Linq.XNode"/>。
            </summary>
            <param name="value">JSON 字符串。</param>
            <returns>反化的<see cref="T:System.Xml.Linq.XNode"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String,System.String)">
            <summary>
            从嵌套在<see cref="T:System.Xml.Linq.XNode"/>指定的根元素中的 JSON 字符串反序列化<paramref name="deserializeRootElementName"/>。
            </summary>
            <param name="value">JSON 字符串。</param>
            <param name="deserializeRootElementName">反序列化时要追加的根元素的名称。</param>
            <returns>反化的<see cref="T:System.Xml.Linq.XNode"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String,System.String,System.Boolean)">
            <summary>
            从嵌套在<see cref="T:System.Xml.Linq.XNode"/>指定的根元素中的 JSON 字符串反序列化<paramref name="deserializeRootElementName"/>
            并为集合编写 Json.NET net 数组属性。
            </summary>
            <param name="value">JSON 字符串。</param>
            <param name="deserializeRootElementName">反序列化时要追加的根元素的名称。</param>
            <param name="writeArrayAttribute">
            指示是否编写 Json.NET net 数组属性的标志。
            在将编写的 XML 转换回 JSON 时, 此属性有助于保留数组。
            </param>
            <returns>反化的<see cref="T:System.Xml.Linq.XNode"/>。</returns>
        </member>
        <member name="T:Newtonsoft.Json.JsonConverter">
            <summary>
            将对象转换为 JSON 或从 JSON 转换对象。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            写入对象的 JSON 表示形式。
            </summary>
            <param name="writer">要写到的<see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="value">值。</param>
            <param name="serializer">调用序列化程序。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            读取对象的 JSON 表示形式。
            </summary>
            <param name="reader">要阅读的<see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="objectType">对象的类型。</param>
            <param name="existingValue">正在读取的对象的现有值。</param>
            <param name="serializer">调用序列化程序。</param>
            <returns>对象值。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConverter.CanConvert(System.Type)">
            <summary>
            确定此实例是否可以转换指定的对象类型。
            </summary>
            <param name="objectType">对象的类型。</param>
            <returns>
            	如果此实例可以转换指定的对象类型, 则 <c> true </c> 如果此实例可以转换指定的对象类型。否则, <c> 虚假的 </c>。
            </returns>
        </member>
        <member name="P:Newtonsoft.Json.JsonConverter.CanRead">
            <summary>
            获取一个值, 该值指示此<see cref="T:Newtonsoft.Json.JsonConverter"/>是否可以读取 JSON。
            </summary>
            <value><c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter"/> can read JSON; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonConverter.CanWrite">
            <summary>
            获取一个值, 该值指示此<see cref="T:Newtonsoft.Json.JsonConverter"/>是否可以写入 JSON。
            </summary>
            <value><c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Newtonsoft.Json.JsonConverter`1">
            <summary>
            将对象转换为 JSON 或从 JSON 转换对象。
            </summary>
            <typeparam name="T">要转换的对象类型。</typeparam>
        </member>
        <member name="M:Newtonsoft.Json.JsonConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            写入对象的 JSON 表示形式。
            </summary>
            <param name="writer">要写到的<see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="value">值。</param>
            <param name="serializer">调用序列化程序。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,`0,Newtonsoft.Json.JsonSerializer)">
            <summary>
            写入对象的 JSON 表示形式。
            </summary>
            <param name="writer">要写到的<see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="value">值。</param>
            <param name="serializer">调用序列化程序。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            读取对象的 JSON 表示形式。
            </summary>
            <param name="reader">要阅读的<see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="objectType">对象的类型。</param>
            <param name="existingValue">正在读取的对象的现有值。</param>
            <param name="serializer">调用序列化程序。</param>
            <returns>对象值。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,`0,System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <summary>
            读取对象的 JSON 表示形式。
            </summary>
            <param name="reader">要阅读的<see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="objectType">对象的类型。</param>
            <param name="existingValue">正在读取的对象的现有值。如果没有现有值, 则将使用 <c> null </c>。</param>
            <param name="hasExistingValue">现有值具有一个值。</param>
            <param name="serializer">调用序列化程序。</param>
            <returns>对象值。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConverter`1.CanConvert(System.Type)">
            <summary>
            确定此实例是否可以转换指定的对象类型。
            </summary>
            <param name="objectType">对象的类型。</param>
            <returns>
            	如果此实例可以转换指定的对象类型, 则 <c> true </c> 如果此实例可以转换指定的对象类型。否则, <c> 虚假的 </c>。
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.JsonConverterAttribute">
            <summary>
            指示<see cref="T:Newtonsoft.Json.JsonSerializer"/>在序列化成员或类时使用指定的<see cref="T:Newtonsoft.Json.JsonConverter"/>。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonConverterAttribute.ConverterType">
            <summary>
            获取<see cref="T:System.Type"/>的<see cref="T:Newtonsoft.Json.JsonConverter"/>。
            </summary>
            <value>The <see cref="T:System.Type"/> of the <see cref="T:Newtonsoft.Json.JsonConverter"/>.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonConverterAttribute.ConverterParameters">
            <summary>
            构建由<see cref="T:Newtonsoft.Json.JsonConverter"/>描述的<see cref="P:Newtonsoft.Json.JsonConverterAttribute.ConverterType"/>时使用的参数列表。
            如果 <c> null </c>, 则使用默认构造函数。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonConverterAttribute.#ctor(System.Type)">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.JsonConverterAttribute"/>类的新实例。
            </summary>
            <param name="converterType"><see cref="T:Newtonsoft.Json.JsonConverter"/>的类型。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonConverterAttribute.#ctor(System.Type,System.Object[])">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.JsonConverterAttribute"/>类的新实例。
            </summary>
            <param name="converterType"><see cref="T:Newtonsoft.Json.JsonConverter"/>的类型。</param>
            <param name="converterParameters">构建<see cref="T:Newtonsoft.Json.JsonConverter"/>时要使用的参数列表。可以 <c> 空 </c>。</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonConverterCollection">
            <summary>
            表示<see cref="T:Newtonsoft.Json.JsonConverter"/>的集合。
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonDictionaryAttribute">
            <summary>
            指示<see cref="T:Newtonsoft.Json.JsonSerializer"/>如何序列化集合。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonDictionaryAttribute.#ctor">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.JsonDictionaryAttribute"/>类的新实例。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonDictionaryAttribute.#ctor(System.String)">
            <summary>
            使用指定的容器 Id 初始化<see cref="T:Newtonsoft.Json.JsonDictionaryAttribute"/>类的新实例。
            </summary>
            <param name="id">容器 Id。</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonException">
            <summary>
            在 JSON 序列化或反序列化过程中发生错误时引发的异常。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonException.#ctor">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.JsonException"/>类的新实例。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonException.#ctor(System.String)">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.JsonException"/>类的新实例
            并显示指定的错误消息。
            </summary>
            <param name="message">解释异常原因的错误消息。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonException.#ctor(System.String,System.Exception)">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.JsonException"/>类的新实例
            并引用导致此异常的内部异常。
            </summary>
            <param name="message">解释异常原因的错误消息。</param>
            <param name="innerException">导致当前异常的异常, 如果未指定内部异常, 则 <c> null </c>。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.JsonException"/>类的新实例。
            </summary>
            <param name="info">保存有关正在引发的异常的序列化对象数据的<see cref="T:System.Runtime.Serialization.SerializationInfo"/>。</param>
            <param name="context">包含有关源或目标的上下文信息的<see cref="T:System.Runtime.Serialization.StreamingContext"/>。</param>
            <exception cref="T:System.ArgumentNullException"></C>, "<paramref name="info"/>" 参数 <c> 为空。</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">类名 <c> 为 null </c> 或<see cref="P:System.Exception.HResult"/>为零 (0)。</exception>
        </member>
        <member name="T:Newtonsoft.Json.JsonExtensionDataAttribute">
            <summary>
            指示<see cref="T:Newtonsoft.Json.JsonSerializer"/>将没有匹配类成员的属性反序列化到指定的集合中
            并在序列化过程中写入值。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonExtensionDataAttribute.WriteData">
            <summary>
            获取或设置一个值, 该值指示序列化对象时是否写入扩展数据。
            </summary>
            <value>
            	<c>true</c> to write extension data when serializing the object; otherwise, <c>false</c>. The default is <c>true</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.JsonExtensionDataAttribute.ReadData">
            <summary>
            获取或设置一个值, 该值指示在反序列化对象时是否读取扩展数据。
            </summary>
            <value>
            	<c>true</c> to read extension data when deserializing the object; otherwise, <c>false</c>. The default is <c>true</c>.
            </value>
        </member>
        <member name="M:Newtonsoft.Json.JsonExtensionDataAttribute.#ctor">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.JsonExtensionDataAttribute"/>类的新实例。
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonIgnoreAttribute">
            <summary>
            指示<see cref="T:Newtonsoft.Json.JsonSerializer"/>不要序列化公共字段或公共阅读/写入属性值。
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonObjectAttribute">
            <summary>
            指示<see cref="T:Newtonsoft.Json.JsonSerializer"/>如何序列化对象。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonObjectAttribute.MemberSerialization">
            <summary>
            获取或设置成员序列化。
            </summary>
            <value>The member serialization.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonObjectAttribute.ItemNullValueHandling">
            <summary>
            获取或设置在序列化和反序列化过程中如何处理具有空值的对象的属性。
            </summary>
            <value>How the object's properties with null values are handled during serialization and deserialization.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonObjectAttribute.ItemRequired">
            <summary>
            获取或设置一个值, 该值指示是否需要对象的属性。
            </summary>
            <value>
            	A value indicating whether the object's properties are required.
            </value>
        </member>
        <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.JsonObjectAttribute"/>类的新实例。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor(Newtonsoft.Json.MemberSerialization)">
            <summary>
            使用指定的成员序列化初始化<see cref="T:Newtonsoft.Json.JsonObjectAttribute"/>类的新实例。
            </summary>
            <param name="memberSerialization">成员序列化。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor(System.String)">
            <summary>
            使用指定的容器 Id 初始化<see cref="T:Newtonsoft.Json.JsonObjectAttribute"/>类的新实例。
            </summary>
            <param name="id">容器 Id。</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonPropertyAttribute">
            <summary>
            指示<see cref="T:Newtonsoft.Json.JsonSerializer"/>始终使用指定的名称序列化成员。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemConverterType">
            <summary>
            获取或设置序列化属性的集合项时使用的<see cref="T:Newtonsoft.Json.JsonConverter"/>。
            </summary>
            <value>The collection's items <see cref="T:Newtonsoft.Json.JsonConverter"/>.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemConverterParameters">
            <summary>
            构建由<see cref="T:Newtonsoft.Json.JsonConverter"/>描述的<see cref="P:Newtonsoft.Json.JsonPropertyAttribute.ItemConverterType"/>时使用的参数列表。
            如果 <c> null </c>, 则使用默认构造函数。
            当非 <c> null </c> 时, 必须有一个在<see cref="T:Newtonsoft.Json.JsonConverter"/>中定义的构造函数与数字完全匹配,
            这些参数的顺序和类型。
            </summary>
            <example>
            <code>
            [JsonProperty(ItemConverterType = typeof(MyContainerConverter), ItemConverterParameters = new object[] { 123, "Four" })]
            </code>
            </example>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.NamingStrategyType">
            <summary>
            获取或设置<see cref="T:System.Type"/>的<see cref="T:Newtonsoft.Json.Serialization.NamingStrategy"/>。
            </summary>
            <value>The <see cref="T:System.Type"/> of the <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy"/>.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.NamingStrategyParameters">
            <summary>
            构建由<see cref="T:Newtonsoft.Json.Serialization.NamingStrategy"/>描述的<see cref="P:Newtonsoft.Json.JsonPropertyAttribute.NamingStrategyType"/>时使用的参数列表。
            如果 <c> null </c>, 则使用默认构造函数。
            当非 <c> null </c> 时, 必须有一个在<see cref="T:Newtonsoft.Json.Serialization.NamingStrategy"/>中定义的构造函数与数字完全匹配,
            这些参数的顺序和类型。
            </summary>
            <example>
            <code>
            [JsonProperty(NamingStrategyType = typeof(MyNamingStrategy), NamingStrategyParameters = new object[] { 123, "Four" })]
            </code>
            </example>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.NullValueHandling">
            <summary>
            获取或设置序列化此属性时使用的空值处理。
            </summary>
            <value>The null value handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.DefaultValueHandling">
            <summary>
            获取或设置序列化此属性时使用的默认值处理。
            </summary>
            <value>The default value handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ReferenceLoopHandling">
            <summary>
            获取或设置序列化此属性时使用的引用循环处理。
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ObjectCreationHandling">
            <summary>
            获取或设置反序列化此属性时使用的对象创建处理。
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.TypeNameHandling">
            <summary>
            获取或设置序列化此属性时使用的类型名称处理。
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.IsReference">
            <summary>
            获取或设置此属性的值是否序列化为引用。
            </summary>
            <value>Whether this property's value is serialized as a reference.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.Order">
            <summary>
            获取或设置成员的序列化顺序。
            </summary>
            <value>The numeric order of serialization.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.Required">
            <summary>
            获取或设置一个值, 该值指示是否需要此属性。
            </summary>
            <value>
            	A value indicating whether this property is required.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.PropertyName">
            <summary>
            获取或设置属性的名称。
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemReferenceLoopHandling">
            <summary>
            获取或设置序列化属性的集合项时使用的引用循环处理。
            </summary>
            <value>The collection's items reference loop handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemTypeNameHandling">
            <summary>
            获取或设置序列化属性的集合项时使用的类型名称处理。
            </summary>
            <value>The collection's items type name handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemIsReference">
            <summary>
            获取或设置是否将此属性的集合项序列化为引用。
            </summary>
            <value>Whether this property's collection items are serialized as a reference.</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonPropertyAttribute.#ctor">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.JsonPropertyAttribute"/>类的新实例。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)">
            <summary>
            初始化具有指定名称的<see cref="T:Newtonsoft.Json.JsonPropertyAttribute"/>类的新实例。
            </summary>
            <param name="propertyName">属性的名称。</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonReader">
            <summary>
            表示提供对序列化 JSON 数据的快速、非缓存、仅向前访问的读取器。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsync(System.Threading.CancellationToken)">
            <summary>
            从源异步读取下一个 JSON 令牌。
            </summary>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步读取的<see cref="T:System.Threading.Tasks.Task`1"/>。<see cref="P:System.Threading.Tasks.Task`1.Result"/>
            如果成功读取了下一个令牌, 则属性返回 <c> true </c>; 如果成功读取下一个令牌, 则返回如果没有更多的令牌可供读取, <c> 虚假 </c>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.SkipAsync(System.Threading.CancellationToken)">
            <summary>
            异步跳过当前令牌的子标记。
            </summary>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsBooleanAsync(System.Threading.CancellationToken)">
            <summary>
            从源头作为<see cref="T:System.Nullable`1"/>异步读取下一个 JSON 令牌。
            </summary>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步读取的<see cref="T:System.Threading.Tasks.Task`1"/>。<see cref="P:System.Threading.Tasks.Task`1.Result"/>
            属性返回<see cref="T:System.Nullable`1"/>。此结果将在数组末尾 <c> 为 null </c>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsBytesAsync(System.Threading.CancellationToken)">
            <summary>
            以<see cref="T:System.Byte"/>的身份从源异步读取下一个 JSON 令牌 []。
            </summary>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步读取的<see cref="T:System.Threading.Tasks.Task`1"/>。<see cref="P:System.Threading.Tasks.Task`1.Result"/>
            属性返回<see cref="T:System.Byte"/> []。此结果将在数组末尾 <c> 为 null </c>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsDateTimeAsync(System.Threading.CancellationToken)">
            <summary>
            从源头作为<see cref="T:System.Nullable`1"/>异步读取下一个 JSON 令牌。
            </summary>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步读取的<see cref="T:System.Threading.Tasks.Task`1"/>。<see cref="P:System.Threading.Tasks.Task`1.Result"/>
            属性返回<see cref="T:System.Nullable`1"/>。此结果将在数组末尾 <c> 为 null </c>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsDateTimeOffsetAsync(System.Threading.CancellationToken)">
            <summary>
            从源头作为<see cref="T:System.Nullable`1"/>异步读取下一个 JSON 令牌。
            </summary>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步读取的<see cref="T:System.Threading.Tasks.Task`1"/>。<see cref="P:System.Threading.Tasks.Task`1.Result"/>
            属性返回<see cref="T:System.Nullable`1"/>。此结果将在数组末尾 <c> 为 null </c>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsDecimalAsync(System.Threading.CancellationToken)">
            <summary>
            从源头作为<see cref="T:System.Nullable`1"/>异步读取下一个 JSON 令牌。
            </summary>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步读取的<see cref="T:System.Threading.Tasks.Task`1"/>。<see cref="P:System.Threading.Tasks.Task`1.Result"/>
            属性返回<see cref="T:System.Nullable`1"/>。此结果将在数组末尾 <c> 为 null </c>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsDoubleAsync(System.Threading.CancellationToken)">
            <summary>
            从源头作为<see cref="T:System.Nullable`1"/>异步读取下一个 JSON 令牌。
            </summary>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步读取的<see cref="T:System.Threading.Tasks.Task`1"/>。<see cref="P:System.Threading.Tasks.Task`1.Result"/>
            属性返回<see cref="T:System.Nullable`1"/>。此结果将在数组末尾 <c> 为 null </c>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsInt32Async(System.Threading.CancellationToken)">
            <summary>
            从源头作为<see cref="T:System.Nullable`1"/>异步读取下一个 JSON 令牌。
            </summary>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步读取的<see cref="T:System.Threading.Tasks.Task`1"/>。<see cref="P:System.Threading.Tasks.Task`1.Result"/>
            属性返回<see cref="T:System.Nullable`1"/>。此结果将在数组末尾 <c> 为 null </c>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsStringAsync(System.Threading.CancellationToken)">
            <summary>
            以<see cref="T:System.String"/>的身份从源异步读取下一个 JSON 令牌。
            </summary>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步读取的<see cref="T:System.Threading.Tasks.Task`1"/>。<see cref="P:System.Threading.Tasks.Task`1.Result"/>
            属性返回<see cref="T:System.String"/>。此结果将在数组末尾 <c> 为 null </c>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="T:Newtonsoft.Json.JsonReader.State">
            <summary>
            指定读取器的状态。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Start">
            <summary>
            没有调用<see cref="T:Newtonsoft.Json.JsonReader"/>读取方法。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Complete">
            <summary>
            已成功到达文件的末尾。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Property">
            <summary>
            读者在一个楼盘。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.ObjectStart">
            <summary>
            读取器位于对象的开头。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Object">
            <summary>
            读取器位于对象中。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.ArrayStart">
            <summary>
            读取器位于数组的开头。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Array">
            <summary>
            读取器在数组中。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Closed">
            <summary>
            <see cref="M:Newtonsoft.Json.JsonReader.Close"/>的方法被称为。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.PostValue">
            <summary>
            读者刚刚读了一个值。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.ConstructorStart">
            <summary>
            读取器位于构造函数的开头。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Constructor">
            <summary>
            读取器在构造函数中。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Error">
            <summary>
            发生错误, 阻止读取操作继续。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Finished">
            <summary>
            已成功到达文件的末尾。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.CurrentState">
            <summary>
            获取当前读取器状态。
            </summary>
            <value>The current reader state.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.CloseInput">
            <summary>
            获取或设置一个值, 该值指示在此读取器关闭时是否应关闭源。
            </summary>
            <value>
            <c>true</c> to close the source when this reader is closed; otherwise <c>false</c>. The default is <c>true</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.SupportMultipleContent">
            <summary>
            获取或设置一个值, 该值指示 JSON 内容的多个部分是否可以
            从连续流中读取而不出错。
            </summary>
            <value>
            <c>true</c> to support reading multiple pieces of JSON content; otherwise <c>false</c>.
            The default is <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.QuoteChar">
            <summary>
            获取用于包含字符串值的引号字符。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.DateTimeZoneHandling">
            <summary>
            获取或设置读取 JSON 时如何处理<see cref="T:System.DateTime"/>时区。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.DateParseHandling">
            <summary>
            获取或设置在读取 JSON 时如何分析日期格式的字符串 (例如 "\/Date(1198908717056)\/" 和 "2012-03-21T05: 40z"。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.FloatParseHandling">
            <summary>
            获取或设置在读取 JSON 文本时如何分析浮点数 (例如1.0 和 9.9)。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.DateFormatString">
            <summary>
            获取或设置读取 JSON 时如何分析自定义日期格式的字符串。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.MaxDepth">
            <summary>
            获取或设置读取 JSON 时允许的最大深度。读过去的深度会抛出一个<see cref="T:Newtonsoft.Json.JsonReaderException"/>。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.TokenType">
            <summary>
            获取当前 JSON 令牌的类型。 
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.Value">
            <summary>
            获取当前 JSON 令牌的文本值。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.ValueType">
            <summary>
            获取当前 JSON 令牌的. net 类型。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.Depth">
            <summary>
            获取 JSON 文档中当前令牌的深度。
            </summary>
            <value>The depth of the current token in the JSON document.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.Path">
            <summary>
            获取当前 JSON 令牌的路径。 
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.Culture">
            <summary>
            获取或设置读取 JSON 时使用的区域性。默认为<see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.#ctor">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.JsonReader"/>类的新实例。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.Read">
            <summary>
            从源读取下一个 JSON 令牌。
            </summary>
            <returns>如果下一个令牌被成功读取, 则 <c> 真实 </c>; 如果向下一个令牌被成功读取, 则真实的。如果没有更多的令牌可供读取, <c> 虚假 </c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsInt32">
            <summary>
            从源头读取下一个 JSON 令牌作为一个<see cref="T:System.Nullable`1"/>。
            </summary>
            <returns>一个<see cref="T:System.Nullable`1"/>。此方法将返回数组末尾 <c> null </c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsString">
            <summary>
            从源中读取下一个 JSON 令牌作为一个<see cref="T:System.String"/>。
            </summary>
            <returns>一个<see cref="T:System.String"/>。此方法将返回数组末尾 <c> null </c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsBytes">
            <summary>
            从源读取下一个 JSON 令牌作为<see cref="T:System.Byte"/> []。
            </summary>
            <returns>如果下一个 JSON 令牌为空, 则为 </c> 的<see cref="T:System.Byte"/> [] 或 <c> 空。此方法将返回数组末尾 <c> null </c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsDouble">
            <summary>
            从源头读取下一个 JSON 令牌作为一个<see cref="T:System.Nullable`1"/>。
            </summary>
            <returns>一个<see cref="T:System.Nullable`1"/>。此方法将返回数组末尾 <c> null </c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsBoolean">
            <summary>
            从源头读取下一个 JSON 令牌作为一个<see cref="T:System.Nullable`1"/>。
            </summary>
            <returns>一个<see cref="T:System.Nullable`1"/>。此方法将返回数组末尾 <c> null </c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsDecimal">
            <summary>
            从源头读取下一个 JSON 令牌作为一个<see cref="T:System.Nullable`1"/>。
            </summary>
            <returns>一个<see cref="T:System.Nullable`1"/>。此方法将返回数组末尾 <c> null </c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsDateTime">
            <summary>
            从源头读取下一个 JSON 令牌作为一个<see cref="T:System.Nullable`1"/>。
            </summary>
            <returns>一个<see cref="T:System.Nullable`1"/>。此方法将返回数组末尾 <c> null </c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsDateTimeOffset">
            <summary>
            从源头读取下一个 JSON 令牌作为一个<see cref="T:System.Nullable`1"/>。
            </summary>
            <returns>一个<see cref="T:System.Nullable`1"/>。此方法将返回数组末尾 <c> null </c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.Skip">
            <summary>
            跳过当前令牌的子标记。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.SetToken(Newtonsoft.Json.JsonToken)">
            <summary>
            设置当前令牌。
            </summary>
            <param name="newToken">新标记。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.SetToken(Newtonsoft.Json.JsonToken,System.Object)">
            <summary>
            设置当前标记和值。
            </summary>
            <param name="newToken">新标记。</param>
            <param name="value">值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.SetToken(Newtonsoft.Json.JsonToken,System.Object,System.Boolean)">
            <summary>
            设置当前标记和值。
            </summary>
            <param name="newToken">新标记。</param>
            <param name="value">值。</param>
            <param name="updateIndex">指示是否应更新数组内的位置索引的标志。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.SetStateBasedOnCurrent">
            <summary>
            设置基于当前令牌类型的状态。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.Dispose(System.Boolean)">
            <summary>
            释放非托管和 (可选) 管理的资源。
            </summary>
            <param name="disposing"><c> 真正的 </c> 发布托管和非托管资源;<c> 错误 </c> 只释放非托管资源。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.Close">
            <summary>
            将读取器的状态更改为<see cref="F:Newtonsoft.Json.JsonReader.State.Closed"/>。
            如果<see cref="P:Newtonsoft.Json.JsonReader.CloseInput"/>被设置为 <c> 真实的 </c>, 源也会关闭。
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonReaderException">
            <summary>
            读取 JSON 文本时发生错误时引发的异常。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReaderException.LineNumber">
            <summary>
            获取指示错误发生位置的行号。
            </summary>
            <value>The line number indicating where the error occurred.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonReaderException.LinePosition">
            <summary>
            获取指示错误发生位置的行位置。
            </summary>
            <value>The line position indicating where the error occurred.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonReaderException.Path">
            <summary>
            获取发生错误的 JSON 的路径。
            </summary>
            <value>The path to the JSON where the error occurred.</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonReaderException.#ctor">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.JsonReaderException"/>类的新实例。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.String)">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.JsonReaderException"/>类的新实例
            并显示指定的错误消息。
            </summary>
            <param name="message">解释异常原因的错误消息。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.String,System.Exception)">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.JsonReaderException"/>类的新实例
            并引用导致此异常的内部异常。
            </summary>
            <param name="message">解释异常原因的错误消息。</param>
            <param name="innerException">导致当前异常的异常, 如果未指定内部异常, 则 <c> null </c>。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.JsonReaderException"/>类的新实例。
            </summary>
            <param name="info">保存有关正在引发的异常的序列化对象数据的<see cref="T:System.Runtime.Serialization.SerializationInfo"/>。</param>
            <param name="context">包含有关源或目标的上下文信息的<see cref="T:System.Runtime.Serialization.StreamingContext"/>。</param>
            <exception cref="T:System.ArgumentNullException"></C>, "<paramref name="info"/>" 参数 <c> 为空。</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">类名 <c> 为 null </c> 或<see cref="P:System.Exception.HResult"/>为零 (0)。</exception>
        </member>
        <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.String,System.String,System.Int32,System.Int32,System.Exception)">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.JsonReaderException"/>类的新实例
            具有指定的错误消息、JSON 路径、行号、行位置以及对导致此异常的内部异常的引用。
            </summary>
            <param name="message">解释异常原因的错误消息。</param>
            <param name="path">发生错误的 JSON 的路径。</param>
            <param name="lineNumber">指示错误发生位置的行号。</param>
            <param name="linePosition">指示错误发生位置的行位置。</param>
            <param name="innerException">导致当前异常的异常, 如果未指定内部异常, 则 <c> null </c>。</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonRequiredAttribute">
            <summary>
            指示<see cref="T:Newtonsoft.Json.JsonSerializer"/>始终序列化该成员, 并要求该成员具有一个值。
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonSerializationException">
            <summary>
            在 JSON 序列化或反序列化过程中发生错误时引发的异常。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.JsonSerializationException"/>类的新实例。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.String)">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.JsonSerializationException"/>类的新实例
            并显示指定的错误消息。
            </summary>
            <param name="message">解释异常原因的错误消息。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.String,System.Exception)">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.JsonSerializationException"/>类的新实例
            并引用导致此异常的内部异常。
            </summary>
            <param name="message">解释异常原因的错误消息。</param>
            <param name="innerException">导致当前异常的异常, 如果未指定内部异常, 则 <c> null </c>。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.JsonSerializationException"/>类的新实例。
            </summary>
            <param name="info">保存有关正在引发的异常的序列化对象数据的<see cref="T:System.Runtime.Serialization.SerializationInfo"/>。</param>
            <param name="context">包含有关源或目标的上下文信息的<see cref="T:System.Runtime.Serialization.StreamingContext"/>。</param>
            <exception cref="T:System.ArgumentNullException"></C>, "<paramref name="info"/>" 参数 <c> 为空。</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">类名 <c> 为 null </c> 或<see cref="P:System.Exception.HResult"/>为零 (0)。</exception>
        </member>
        <member name="T:Newtonsoft.Json.JsonSerializer">
            <summary>
            将对象序列化并反序列化为 JSON 格式。
            <see cref="T:Newtonsoft.Json.JsonSerializer"/>使您能够控制物体如何被编码到 JSON 中。
            </summary>
        </member>
        <member name="E:Newtonsoft.Json.JsonSerializer.Error">
            <summary>
            当序列化和反序列化过程中的<see cref="T:Newtonsoft.Json.JsonSerializer"/>错误时发生。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.ReferenceResolver">
            <summary>
            获取或设置序列化程序在解析引用时使用的<see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver"/>。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.Binder">
            <summary>
            获取或设置序列化程序在解析类型名称时使用的<see cref="P:Newtonsoft.Json.JsonSerializer.SerializationBinder"/>。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.SerializationBinder">
            <summary>
            获取或设置序列化程序在解析类型名称时使用的<see cref="T:Newtonsoft.Json.Serialization.ISerializationBinder"/>。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.TraceWriter">
            <summary>
            获取或设置序列化程序在写入跟踪消息时使用的<see cref="T:Newtonsoft.Json.Serialization.ITraceWriter"/>。
            </summary>
            <value>The trace writer.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.EqualityComparer">
            <summary>
            获取或设置序列化程序在比较引用时使用的相等比较器。
            </summary>
            <value>The equality comparer.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling">
            <summary>
            获取或设置序列化程序如何处理类型名称写入和读取。
            默认值为<see cref="F:Newtonsoft.Json.TypeNameHandling.None" />。
            </summary>
            <remarks>
            当您的应用程序从外部源反序列化 JSON 时, 应谨慎使用<see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling"/>。
            传入类型应使用自定义<see cref="P:Newtonsoft.Json.JsonSerializer.SerializationBinder"/>进行验证
            当反序列化与<see cref="F:Newtonsoft.Json.TypeNameHandling.None"/>以外的值。
            </remarks>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.TypeNameAssemblyFormat">
            <summary>
            获取或设置序列化程序如何写入和解析类型名称程序集。
            默认值为<see cref="F:System.Runtime.Serialization.Formatters.FormatterAssemblyStyle.Simple" />。
            </summary>
            <value>The type name assembly format.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.TypeNameAssemblyFormatHandling">
            <summary>
            获取或设置序列化程序如何写入和解析类型名称程序集。
            默认值为<see cref="F:Newtonsoft.Json.TypeNameAssemblyFormatHandling.Simple" />。
            </summary>
            <value>The type name assembly format.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.PreserveReferencesHandling">
            <summary>
            获取或设置序列化程序如何保留对象引用。
            默认值为<see cref="F:Newtonsoft.Json.PreserveReferencesHandling.None" />。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.ReferenceLoopHandling">
            <summary>
            获取或设置如何处理引用循环 (例如引用本身的类)。
            默认值为<see cref="F:Newtonsoft.Json.ReferenceLoopHandling.Error" />。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.MissingMemberHandling">
            <summary>
            获取或设置在反序列化过程中如何处理缺少的成员 (例如, JSON 包含不是对象上的成员的属性)。
            默认值为<see cref="F:Newtonsoft.Json.MissingMemberHandling.Ignore" />。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.NullValueHandling">
            <summary>
            获取或设置在序列化和反序列化过程中处理空值的方式。
            默认值为<see cref="F:Newtonsoft.Json.NullValueHandling.Include" />。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.DefaultValueHandling">
            <summary>
            获取或设置在序列化和反序列化过程中如何处理默认值。
            默认值为<see cref="F:Newtonsoft.Json.DefaultValueHandling.Include" />。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.ObjectCreationHandling">
            <summary>
            获取或设置反序列化过程中如何创建对象。
            默认值为<see cref="F:Newtonsoft.Json.ObjectCreationHandling.Auto" />。
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.ConstructorHandling">
            <summary>
            获取或设置如何在反序列化过程中使用构造函数。
            默认值为<see cref="F:Newtonsoft.Json.ConstructorHandling.Default" />。
            </summary>
            <value>The constructor handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.MetadataPropertyHandling">
            <summary>
            获取或设置反序列化过程中如何使用元数据属性。
            默认值为<see cref="F:Newtonsoft.Json.MetadataPropertyHandling.Default" />。
            </summary>
            <value>The metadata properties handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.Converters">
            <summary>
            获取将在序列化过程中使用的集合<see cref="T:Newtonsoft.Json.JsonConverter"/>。
            </summary>
            <value>Collection <see cref="T:Newtonsoft.Json.JsonConverter"/> that will be used during serialization.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.ContractResolver">
            <summary>
            获取或设置序列化程序在以下情况下使用的协定解析程序:
            将. net 对象序列化为 JSON, 反之亦然。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.Context">
            <summary>
            获取或设置序列化程序在调用序列化回调方法时使用的<see cref="T:System.Runtime.Serialization.StreamingContext"/>。
            </summary>
            <value>The context.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.Formatting">
            <summary>
            指示 JSON 文本输出的格式设置。
            默认值为<see cref="F:Newtonsoft.Json.Formatting.None" />。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.DateFormatHandling">
            <summary>
            获取或设置如何将日期写入 JSON 文本。
            默认值为<see cref="F:Newtonsoft.Json.DateFormatHandling.IsoDateFormat" />。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.DateTimeZoneHandling">
            <summary>
            获取或设置在序列化和反序列化过程中如何处理<see cref="T:System.DateTime"/>时区。
            默认值为<see cref="F:Newtonsoft.Json.DateTimeZoneHandling.RoundtripKind" />。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.DateParseHandling">
            <summary>
            获取或设置在读取 JSON 时如何分析日期格式化字符串 (例如 <c> "\/Date(1198908717056)\/" </c> 和 <c> "a3:210t05: 40z" </c>。
            默认值为<see cref="F:Newtonsoft.Json.DateParseHandling.DateTime" />。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.FloatParseHandling">
            <summary>
            获取或设置在读取 JSON 文本时如何分析浮点数 (例如1.0 和 9.9)。
            默认值为<see cref="F:Newtonsoft.Json.FloatParseHandling.Double" />。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.FloatFormatHandling">
            <summary>
            获取或设置如何特殊的浮点数, 例如<see cref="F:System.Double.NaN"/>,
            <see cref="F:System.Double.PositiveInfinity"/>和<see cref="F:System.Double.NegativeInfinity"/>,
            被编写为 JSON 文本。
            默认值为<see cref="F:Newtonsoft.Json.FloatFormatHandling.String" />。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.StringEscapeHandling">
            <summary>
            获取或设置编写 JSON 文本时如何转义字符串。
            默认值为<see cref="F:Newtonsoft.Json.StringEscapeHandling.Default" />。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.DateFormatString">
            <summary>
            Gets or sets how <see cref="T:System.DateTime"/> and <see cref="T:System.DateTimeOffset"/> values are formatted when writing JSON text,
            and the expected date format when reading JSON text.
            The default value is <c>"yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK"</c>.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.Culture">
            <summary>
            获取或设置读取 JSON 时使用的区域性。
            默认值为<see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.MaxDepth">
            <summary>
            获取或设置读取 JSON 时允许的最大深度。读过去的深度会抛出一个<see cref="T:Newtonsoft.Json.JsonReaderException"/>。
            空值表示没有最大值。
            默认值 <c> 空 </c>。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.CheckAdditionalContent">
            <summary>
            获取一个值, 该值指示反序列化对象后是否会检查其他 JSON 内容。
            默认值 <c> 错误 </c>。
            </summary>
            <value>
            	<c>true</c> if there will be a check for additional JSON content after deserializing an object; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.#ctor">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.JsonSerializer"/>类的新实例。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Create">
            <summary>
            创建新的<see cref="T:Newtonsoft.Json.JsonSerializer"/>实例。
            <see cref="T:Newtonsoft.Json.JsonSerializer"/>将不使用来自<see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings"/>的默认设置。
            </summary>
            <returns>
            一个新的<see cref="T:Newtonsoft.Json.JsonSerializer"/>实例。
            <see cref="T:Newtonsoft.Json.JsonSerializer"/>将不使用来自<see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings"/>的默认设置。
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Create(Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            使用指定的<see cref="T:Newtonsoft.Json.JsonSerializer"/>创建新的<see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>实例。
            <see cref="T:Newtonsoft.Json.JsonSerializer"/>将不使用来自<see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings"/>的默认设置。
            </summary>
            <param name="settings">要应用于<see cref="T:Newtonsoft.Json.JsonSerializer"/>的设置。</param>
            <returns>
            使用指定<see cref="T:Newtonsoft.Json.JsonSerializer"/>的新<see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>实例。
            <see cref="T:Newtonsoft.Json.JsonSerializer"/>将不使用来自<see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings"/>的默认设置。
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.CreateDefault">
            <summary>
            创建新的<see cref="T:Newtonsoft.Json.JsonSerializer"/>实例。
            <see cref="T:Newtonsoft.Json.JsonSerializer"/>将使用来自<see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings"/>的默认设置。
            </summary>
            <returns>
            一个新的<see cref="T:Newtonsoft.Json.JsonSerializer"/>实例。
            <see cref="T:Newtonsoft.Json.JsonSerializer"/>将使用来自<see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings"/>的默认设置。
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.CreateDefault(Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            使用指定的<see cref="T:Newtonsoft.Json.JsonSerializer"/>创建新的<see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>实例。
            <see cref="T:Newtonsoft.Json.JsonSerializer"/>将使用来自<see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings"/>以及指定<see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>的默认设置。
            </summary>
            <param name="settings">要应用于<see cref="T:Newtonsoft.Json.JsonSerializer"/>的设置。</param>
            <returns>
            使用指定<see cref="T:Newtonsoft.Json.JsonSerializer"/>的新<see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>实例。
            <see cref="T:Newtonsoft.Json.JsonSerializer"/>将使用来自<see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings"/>以及指定<see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>的默认设置。
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Populate(System.IO.TextReader,System.Object)">
            <summary>
            将 JSON 值填充到目标对象上。
            </summary>
            <param name="reader">包含读取器值的 JSON 结构的<see cref="T:System.IO.TextReader"/>。</param>
            <param name="target">要在其上填充值的目标对象。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Populate(Newtonsoft.Json.JsonReader,System.Object)">
            <summary>
            将 JSON 值填充到目标对象上。
            </summary>
            <param name="reader">包含读取器值的 JSON 结构的<see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="target">要在其上填充值的目标对象。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader)">
            <summary>
            反序列化指定<see cref="T:Newtonsoft.Json.JsonReader"/>所包含的 JSON 结构。
            </summary>
            <param name="reader">包含要反序列化的 JSON 结构的<see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <returns><see cref="T:System.Object"/>正在反序列化。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(System.IO.TextReader,System.Type)">
            <summary>
            反序列化指定<see cref="T:System.IO.StringReader"/>所包含的 JSON 结构
            到指定类型的实例中。
            </summary>
            <param name="reader">包含该物体的<see cref="T:System.IO.TextReader"/>。</param>
            <param name="objectType">被反序列化的天体<see cref="T:System.Type"/>。</param>
            <returns><paramref name="objectType"/>被反序列化的例子。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize``1(Newtonsoft.Json.JsonReader)">
            <summary>
            反序列化指定<see cref="T:Newtonsoft.Json.JsonReader"/>所包含的 JSON 结构
            到指定类型的实例中。
            </summary>
            <param name="reader">包含该物体的<see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <typeparam name="T">要反序列化的对象的类型。</typeparam>
            <returns>正在反序列化的 "typeparref 名称 =" t "/> 的实例。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader,System.Type)">
            <summary>
            反序列化指定<see cref="T:Newtonsoft.Json.JsonReader"/>所包含的 JSON 结构
            到指定类型的实例中。
            </summary>
            <param name="reader">包含该物体的<see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="objectType">被反序列化的天体<see cref="T:System.Type"/>。</param>
            <returns><paramref name="objectType"/>被反序列化的例子。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object)">
            <summary>
            序列化指定的<see cref="T:System.Object"/>并写入 JSON 结构
            使用指定的<see cref="T:System.IO.TextWriter"/>。
            </summary>
            <param name="textWriter"><see cref="T:System.IO.TextWriter"/>用来写 JSON 结构。</param>
            <param name="value">要序列化的<see cref="T:System.Object"/>。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter,System.Object,System.Type)">
            <summary>
            序列化指定的<see cref="T:System.Object"/>并写入 JSON 结构
            使用指定的<see cref="T:Newtonsoft.Json.JsonWriter"/>。
            </summary>
            <param name="jsonWriter"><see cref="T:Newtonsoft.Json.JsonWriter"/>用来写 JSON 结构。</param>
            <param name="value">要序列化的<see cref="T:System.Object"/>。</param>
            <param name="objectType">
            要序列化的值的类型。
            当<see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling"/>是<see cref="F:Newtonsoft.Json.TypeNameHandling.Auto"/>时, 如果值的类型不匹配, 则使用此参数写出类型名称。
            指定类型是可选的。
            </param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object,System.Type)">
            <summary>
            序列化指定的<see cref="T:System.Object"/>并写入 JSON 结构
            使用指定的<see cref="T:System.IO.TextWriter"/>。
            </summary>
            <param name="textWriter"><see cref="T:System.IO.TextWriter"/>用来写 JSON 结构。</param>
            <param name="value">要序列化的<see cref="T:System.Object"/>。</param>
            <param name="objectType">
            要序列化的值的类型。
            当 "<see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling"/>" 为 "自动" 时, 如果值的类型不匹配, 则使用此参数写出类型名称。
            指定类型是可选的。
            </param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter,System.Object)">
            <summary>
            序列化指定的<see cref="T:System.Object"/>并写入 JSON 结构
            使用指定的<see cref="T:Newtonsoft.Json.JsonWriter"/>。
            </summary>
            <param name="jsonWriter"><see cref="T:Newtonsoft.Json.JsonWriter"/>用来写 JSON 结构。</param>
            <param name="value">要序列化的<see cref="T:System.Object"/>。</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonSerializerSettings">
            <summary>
            指定<see cref="T:Newtonsoft.Json.JsonSerializer"/>对象上的设置。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.ReferenceLoopHandling">
            <summary>
            获取或设置如何处理引用循环 (例如引用本身的类)。
            默认值为<see cref="F:Newtonsoft.Json.ReferenceLoopHandling.Error" />。
            </summary>
            <value>Reference loop handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.MissingMemberHandling">
            <summary>
            获取或设置在反序列化过程中如何处理缺少的成员 (例如, JSON 包含不是对象上的成员的属性)。
            默认值为<see cref="F:Newtonsoft.Json.MissingMemberHandling.Ignore" />。
            </summary>
            <value>Missing member handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.ObjectCreationHandling">
            <summary>
            获取或设置反序列化过程中如何创建对象。
            默认值为<see cref="F:Newtonsoft.Json.ObjectCreationHandling.Auto" />。
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.NullValueHandling">
            <summary>
            获取或设置在序列化和反序列化过程中处理空值的方式。
            默认值为<see cref="F:Newtonsoft.Json.NullValueHandling.Include" />。
            </summary>
            <value>Null value handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.DefaultValueHandling">
            <summary>
            获取或设置在序列化和反序列化过程中如何处理默认值。
            默认值为<see cref="F:Newtonsoft.Json.DefaultValueHandling.Include" />。
            </summary>
            <value>The default value handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.Converters">
            <summary>
            获取或设置将在序列化过程中使用的<see cref="T:Newtonsoft.Json.JsonConverter"/>集合。
            </summary>
            <value>The converters.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.PreserveReferencesHandling">
            <summary>
            获取或设置序列化程序如何保留对象引用。
            默认值为<see cref="F:Newtonsoft.Json.PreserveReferencesHandling.None" />。
            </summary>
            <value>The preserve references handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.TypeNameHandling">
            <summary>
            获取或设置序列化程序如何处理类型名称写入和读取。
            默认值为<see cref="F:Newtonsoft.Json.TypeNameHandling.None" />。
            </summary>
            <remarks>
            当您的应用程序从外部源反序列化 JSON 时, 应谨慎使用<see cref="P:Newtonsoft.Json.JsonSerializerSettings.TypeNameHandling"/>。
            传入类型应使用自定义<see cref="P:Newtonsoft.Json.JsonSerializerSettings.SerializationBinder"/>进行验证
            当反序列化与<see cref="F:Newtonsoft.Json.TypeNameHandling.None"/>以外的值。
            </remarks>
            <value>The type name handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.MetadataPropertyHandling">
            <summary>
            获取或设置反序列化过程中如何使用元数据属性。
            默认值为<see cref="F:Newtonsoft.Json.MetadataPropertyHandling.Default" />。
            </summary>
            <value>The metadata properties handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.TypeNameAssemblyFormat">
            <summary>
            获取或设置序列化程序如何写入和解析类型名称程序集。
            默认值为<see cref="F:System.Runtime.Serialization.Formatters.FormatterAssemblyStyle.Simple" />。
            </summary>
            <value>The type name assembly format.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.TypeNameAssemblyFormatHandling">
            <summary>
            获取或设置序列化程序如何写入和解析类型名称程序集。
            默认值为<see cref="F:Newtonsoft.Json.TypeNameAssemblyFormatHandling.Simple" />。
            </summary>
            <value>The type name assembly format.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.ConstructorHandling">
            <summary>
            获取或设置如何在反序列化过程中使用构造函数。
            默认值为<see cref="F:Newtonsoft.Json.ConstructorHandling.Default" />。
            </summary>
            <value>The constructor handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.ContractResolver">
            <summary>
            获取或设置序列化程序在以下情况下使用的协定解析程序:
            将. net 对象序列化为 JSON, 反之亦然。
            </summary>
            <value>The contract resolver.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.EqualityComparer">
            <summary>
            获取或设置序列化程序在比较引用时使用的相等比较器。
            </summary>
            <value>The equality comparer.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.ReferenceResolver">
            <summary>
            获取或设置序列化程序在解析引用时使用的<see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver"/>。
            </summary>
            <value>The reference resolver.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.ReferenceResolverProvider">
            <summary>
            获取或设置一个函数, 该函数创建序列化程序在解析引用时使用的<see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver"/>。
            </summary>
            <value>A function that creates the <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver"/> used by the serializer when resolving references.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.TraceWriter">
            <summary>
            获取或设置序列化程序在写入跟踪消息时使用的<see cref="T:Newtonsoft.Json.Serialization.ITraceWriter"/>。
            </summary>
            <value>The trace writer.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.Binder">
            <summary>
            获取或设置序列化程序在解析类型名称时使用的<see cref="P:Newtonsoft.Json.JsonSerializerSettings.SerializationBinder"/>。
            </summary>
            <value>The binder.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.SerializationBinder">
            <summary>
            获取或设置序列化程序在解析类型名称时使用的<see cref="T:Newtonsoft.Json.Serialization.ISerializationBinder"/>。
            </summary>
            <value>The binder.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.Error">
            <summary>
            获取或设置序列化和反序列化过程中调用的错误处理程序。
            </summary>
            <value>The error handler called during serialization and deserialization.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.Context">
            <summary>
            获取或设置序列化程序在调用序列化回调方法时使用的<see cref="T:System.Runtime.Serialization.StreamingContext"/>。
            </summary>
            <value>The context.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateFormatString">
            <summary>
            Gets or sets how <see cref="T:System.DateTime"/> and <see cref="T:System.DateTimeOffset"/> values are formatted when writing JSON text,
            and the expected date format when reading JSON text.
            The default value is <c>"yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK"</c>.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.MaxDepth">
            <summary>
            获取或设置读取 JSON 时允许的最大深度。读过去的深度会抛出一个<see cref="T:Newtonsoft.Json.JsonReaderException"/>。
            空值表示没有最大值。
            默认值 <c> 空 </c>。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.Formatting">
            <summary>
            指示 JSON 文本输出的格式设置。
            默认值为<see cref="F:Newtonsoft.Json.Formatting.None" />。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateFormatHandling">
            <summary>
            获取或设置如何将日期写入 JSON 文本。
            默认值为<see cref="F:Newtonsoft.Json.DateFormatHandling.IsoDateFormat" />。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateTimeZoneHandling">
            <summary>
            获取或设置在序列化和反序列化过程中如何处理<see cref="T:System.DateTime"/>时区。
            默认值为<see cref="F:Newtonsoft.Json.DateTimeZoneHandling.RoundtripKind" />。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateParseHandling">
            <summary>
            获取或设置在读取 JSON 时如何分析日期格式化字符串 (例如 <c> "\/Date(1198908717056)\/" </c> 和 <c> "a3:210t05: 40z" </c>。
            默认值为<see cref="F:Newtonsoft.Json.DateParseHandling.DateTime" />。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.FloatFormatHandling">
            <summary>
            获取或设置如何特殊的浮点数, 例如<see cref="F:System.Double.NaN"/>,
            <see cref="F:System.Double.PositiveInfinity"/>和<see cref="F:System.Double.NegativeInfinity"/>,
            被写入为 JSON。
            默认值为<see cref="F:Newtonsoft.Json.FloatFormatHandling.String" />。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.FloatParseHandling">
            <summary>
            获取或设置在读取 JSON 文本时如何分析浮点数 (例如1.0 和 9.9)。
            默认值为<see cref="F:Newtonsoft.Json.FloatParseHandling.Double" />。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.StringEscapeHandling">
            <summary>
            获取或设置编写 JSON 文本时如何转义字符串。
            默认值为<see cref="F:Newtonsoft.Json.StringEscapeHandling.Default" />。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.Culture">
            <summary>
            获取或设置读取 JSON 时使用的区域性。
            默认值为<see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.CheckAdditionalContent">
            <summary>
            获取一个值, 该值指示反序列化对象后是否会检查其他内容。
            默认值 <c> 错误 </c>。
            </summary>
            <value>
            	<c>true</c> if there will be a check for additional content after deserializing an object; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializerSettings.#ctor">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>类的新实例。
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonTextReader">
            <summary>
            表示提供对 JSON 文本数据的快速、非缓存、仅向前访问的读取器。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsync(System.Threading.CancellationToken)">
            <summary>
            从源异步读取下一个 JSON 令牌。
            </summary>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步读取的<see cref="T:System.Threading.Tasks.Task`1"/>。<see cref="P:System.Threading.Tasks.Task`1.Result"/>
            如果成功读取了下一个令牌, 则属性返回 <c> true </c>; 如果成功读取下一个令牌, 则返回如果没有更多的令牌可供读取, <c> 虚假 </c>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsBooleanAsync(System.Threading.CancellationToken)">
            <summary>
            从源头作为<see cref="T:System.Nullable`1"/>异步读取下一个 JSON 令牌。
            </summary>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步读取的<see cref="T:System.Threading.Tasks.Task`1"/>。<see cref="P:System.Threading.Tasks.Task`1.Result"/>
            属性返回<see cref="T:System.Nullable`1"/>。此结果将在数组末尾 <c> 为 null </c>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsBytesAsync(System.Threading.CancellationToken)">
            <summary>
            以<see cref="T:System.Byte"/>的身份从源异步读取下一个 JSON 令牌 []。
            </summary>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步读取的<see cref="T:System.Threading.Tasks.Task`1"/>。<see cref="P:System.Threading.Tasks.Task`1.Result"/>
            属性返回<see cref="T:System.Byte"/> []。此结果将在数组末尾 <c> 为 null </c>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDateTimeAsync(System.Threading.CancellationToken)">
            <summary>
            从源头作为<see cref="T:System.Nullable`1"/>异步读取下一个 JSON 令牌。
            </summary>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步读取的<see cref="T:System.Threading.Tasks.Task`1"/>。<see cref="P:System.Threading.Tasks.Task`1.Result"/>
            属性返回<see cref="T:System.Nullable`1"/>。此结果将在数组末尾 <c> 为 null </c>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDateTimeOffsetAsync(System.Threading.CancellationToken)">
            <summary>
            从源头作为<see cref="T:System.Nullable`1"/>异步读取下一个 JSON 令牌。
            </summary>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步读取的<see cref="T:System.Threading.Tasks.Task`1"/>。<see cref="P:System.Threading.Tasks.Task`1.Result"/>
            属性返回<see cref="T:System.Nullable`1"/>。此结果将在数组末尾 <c> 为 null </c>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDecimalAsync(System.Threading.CancellationToken)">
            <summary>
            从源头作为<see cref="T:System.Nullable`1"/>异步读取下一个 JSON 令牌。
            </summary>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步读取的<see cref="T:System.Threading.Tasks.Task`1"/>。<see cref="P:System.Threading.Tasks.Task`1.Result"/>
            属性返回<see cref="T:System.Nullable`1"/>。此结果将在数组末尾 <c> 为 null </c>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDoubleAsync(System.Threading.CancellationToken)">
            <summary>
            从源头作为<see cref="T:System.Nullable`1"/>异步读取下一个 JSON 令牌。
            </summary>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步读取的<see cref="T:System.Threading.Tasks.Task`1"/>。<see cref="P:System.Threading.Tasks.Task`1.Result"/>
            属性返回<see cref="T:System.Nullable`1"/>。此结果将在数组末尾 <c> 为 null </c>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsInt32Async(System.Threading.CancellationToken)">
            <summary>
            从源头作为<see cref="T:System.Nullable`1"/>异步读取下一个 JSON 令牌。
            </summary>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步读取的<see cref="T:System.Threading.Tasks.Task`1"/>。<see cref="P:System.Threading.Tasks.Task`1.Result"/>
            属性返回<see cref="T:System.Nullable`1"/>。此结果将在数组末尾 <c> 为 null </c>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsStringAsync(System.Threading.CancellationToken)">
            <summary>
            以<see cref="T:System.String"/>的身份从源异步读取下一个 JSON 令牌。
            </summary>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步读取的<see cref="T:System.Threading.Tasks.Task`1"/>。<see cref="P:System.Threading.Tasks.Task`1.Result"/>
            属性返回<see cref="T:System.String"/>。此结果将在数组末尾 <c> 为 null </c>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.#ctor(System.IO.TextReader)">
            <summary>
            初始化具有指定<see cref="T:Newtonsoft.Json.JsonTextReader"/>的<see cref="T:System.IO.TextReader"/>类的新实例。
            </summary>
            <param name="reader">包含要读取的 JSON 数据的<see cref="T:System.IO.TextReader"/>。</param>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextReader.ArrayPool">
            <summary>
            获取或设置读取器的字符缓冲池。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.Read">
            <summary>
            从底层<see cref="T:System.IO.TextReader"/>读取下一个 JSON 令牌。
            </summary>
            <returns>
            如果下一个令牌被成功读取, 则 <c> 真实 </c>; 如果向下一个令牌被成功读取, 则真实的。如果没有更多的令牌可供读取, <c> 虚假 </c>。
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsInt32">
            <summary>
            从潜在<see cref="T:System.IO.TextReader"/>读取下一个 JSON 令牌, 作为一个<see cref="T:System.Nullable`1"/>。
            </summary>
            <returns>一个<see cref="T:System.Nullable`1"/>。此方法将返回数组末尾 <c> null </c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDateTime">
            <summary>
            从潜在<see cref="T:System.IO.TextReader"/>读取下一个 JSON 令牌, 作为一个<see cref="T:System.Nullable`1"/>。
            </summary>
            <returns>一个<see cref="T:System.Nullable`1"/>。此方法将返回数组末尾 <c> null </c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsString">
            <summary>
            从潜在<see cref="T:System.IO.TextReader"/>作为一个<see cref="T:System.String"/>读取下一个 JSON 令牌。
            </summary>
            <returns>一个<see cref="T:System.String"/>。此方法将返回数组末尾 <c> null </c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsBytes">
            <summary>
            从潜在<see cref="T:System.IO.TextReader"/>作为<see cref="T:System.Byte"/>读取下一个 JSON 令牌 []。
            </summary>
            <returns>如果下一个 JSON 令牌为空, 则为 </c> 的<see cref="T:System.Byte"/> [] 或 <c> 空。此方法将返回数组末尾 <c> null </c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsBoolean">
            <summary>
            从潜在<see cref="T:System.IO.TextReader"/>读取下一个 JSON 令牌, 作为一个<see cref="T:System.Nullable`1"/>。
            </summary>
            <returns>一个<see cref="T:System.Nullable`1"/>。此方法将返回数组末尾 <c> null </c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDateTimeOffset">
            <summary>
            从潜在<see cref="T:System.IO.TextReader"/>读取下一个 JSON 令牌, 作为一个<see cref="T:System.Nullable`1"/>。
            </summary>
            <returns>一个<see cref="T:System.Nullable`1"/>。此方法将返回数组末尾 <c> null </c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDecimal">
            <summary>
            从潜在<see cref="T:System.IO.TextReader"/>读取下一个 JSON 令牌, 作为一个<see cref="T:System.Nullable`1"/>。
            </summary>
            <returns>一个<see cref="T:System.Nullable`1"/>。此方法将返回数组末尾 <c> null </c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDouble">
            <summary>
            从潜在<see cref="T:System.IO.TextReader"/>读取下一个 JSON 令牌, 作为一个<see cref="T:System.Nullable`1"/>。
            </summary>
            <returns>一个<see cref="T:System.Nullable`1"/>。此方法将返回数组末尾 <c> null </c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.Close">
            <summary>
            将读取器的状态更改为<see cref="F:Newtonsoft.Json.JsonReader.State.Closed"/>。
            如果<see cref="P:Newtonsoft.Json.JsonReader.CloseInput"/>被设定为 <c> 真实的 </c>, 则底层<see cref="T:System.IO.TextReader"/>也是封闭的。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.HasLineInfo">
            <summary>
            获取一个值, 该值指示类是否可以返回行信息。
            </summary>
            <returns>
            	如果可以提供<see cref="P:Newtonsoft.Json.JsonTextReader.LineNumber"/>和<see cref="P:Newtonsoft.Json.JsonTextReader.LinePosition"/>, <c> 真正的 </c>;否则, <c> 虚假的 </c>。
            </returns>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextReader.LineNumber">
            <summary>
            获取当前行号。
            </summary>
            <value>
            The current line number or 0 if no line information is available (for example, <see cref="M:Newtonsoft.Json.JsonTextReader.HasLineInfo"/> returns <c>false</c>).
            </value>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextReader.LinePosition">
            <summary>
            获取当前行位置。
            </summary>
            <value>
            The current line position or 0 if no line information is available (for example, <see cref="M:Newtonsoft.Json.JsonTextReader.HasLineInfo"/> returns <c>false</c>).
            </value>
        </member>
        <member name="T:Newtonsoft.Json.JsonTextWriter">
            <summary>
            表示提供快速、非缓存、仅向前生成 JSON 数据的方法的编写器。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.FlushAsync(System.Threading.CancellationToken)">
            <summary>
            异步刷新缓冲区中的任何内容到目标, 并刷新目标。
            </summary>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueDelimiterAsync(System.Threading.CancellationToken)">
            <summary>
            异步写入 JSON 值分隔符。
            </summary>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteEndAsync(Newtonsoft.Json.JsonToken,System.Threading.CancellationToken)">
            <summary>
            异步写入指定的结束令牌。
            </summary>
            <param name="token">要写入的结束令牌。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.CloseAsync(System.Threading.CancellationToken)">
            <summary>
            异步关闭此编写器。
            如果<see cref="P:Newtonsoft.Json.JsonWriter.CloseOutput"/>设置为 <c> 真实的 </c>, 则目标也将关闭。
            </summary>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteEndAsync(System.Threading.CancellationToken)">
            <summary>
            异步写入当前 JSON 对象或数组的末尾。
            </summary>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteIndentAsync(System.Threading.CancellationToken)">
            <summary>
            异步写入缩进字符。
            </summary>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteIndentSpaceAsync(System.Threading.CancellationToken)">
            <summary>
            异步写入缩进空间。
            </summary>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteRawAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            异步编写原始 JSON, 而不更改编写器的状态。
            </summary>
            <param name="json">要编写的原始 JSON。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteNullAsync(System.Threading.CancellationToken)">
            <summary>
            异步写入空值。
            </summary>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WritePropertyNameAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            异步写入 JSON 对象的 name 值对的属性名称。
            </summary>
            <param name="name">属性的名称。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WritePropertyNameAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            异步写入 JSON 对象的 name 值对的属性名称。
            </summary>
            <param name="name">属性的名称。</param>
            <param name="escape">一个标志, 指示在将文本作为 JSON 属性名称写入时是否应转义文本。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartArrayAsync(System.Threading.CancellationToken)">
            <summary>
            异步写入 JSON 数组的开头。
            </summary>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartObjectAsync(System.Threading.CancellationToken)">
            <summary>
            异步写入 JSON 对象的开头。
            </summary>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartConstructorAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            异步写入具有给定名称的构造函数的开始。
            </summary>
            <param name="name">构造函数的名称。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteUndefinedAsync(System.Threading.CancellationToken)">
            <summary>
            异步写入未定义的值。
            </summary>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteWhitespaceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            异步写入给定的空白。
            </summary>
            <param name="ws">空白字符的字符串。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            异步写一个<see cref="T:System.Nullable`1"/>的价值<see cref="T:System.Boolean"/>。
            </summary>
            <param name="value"><see cref="T:System.Nullable`1"/>的<see cref="T:System.Boolean"/>值写。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            异步写入一个<see cref="T:System.Boolean"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Boolean"/>值。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Byte,System.Threading.CancellationToken)">
            <summary>
            异步写入一个<see cref="T:System.Byte"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Byte"/>值。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.Byte},System.Threading.CancellationToken)">
            <summary>
            异步写一个<see cref="T:System.Nullable`1"/>的价值<see cref="T:System.Byte"/>。
            </summary>
            <param name="value"><see cref="T:System.Nullable`1"/>的<see cref="T:System.Byte"/>值写。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Byte[],System.Threading.CancellationToken)">
            <summary>
            异步写入一个<see cref="T:System.Byte"/> [] 值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Byte"/> [] 值。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Char,System.Threading.CancellationToken)">
            <summary>
            异步写入一个<see cref="T:System.Char"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Char"/>值。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.Char},System.Threading.CancellationToken)">
            <summary>
            异步写一个<see cref="T:System.Nullable`1"/>的价值<see cref="T:System.Char"/>。
            </summary>
            <param name="value"><see cref="T:System.Nullable`1"/>的<see cref="T:System.Char"/>值写。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.DateTime,System.Threading.CancellationToken)">
            <summary>
            异步写入一个<see cref="T:System.DateTime"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.DateTime"/>值。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            异步写一个<see cref="T:System.Nullable`1"/>的价值<see cref="T:System.DateTime"/>。
            </summary>
            <param name="value"><see cref="T:System.Nullable`1"/>的<see cref="T:System.DateTime"/>值写。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.DateTimeOffset,System.Threading.CancellationToken)">
            <summary>
            异步写入一个<see cref="T:System.DateTimeOffset"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.DateTimeOffset"/>值。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)">
            <summary>
            异步写一个<see cref="T:System.Nullable`1"/>的价值<see cref="T:System.DateTimeOffset"/>。
            </summary>
            <param name="value"><see cref="T:System.Nullable`1"/>的<see cref="T:System.DateTimeOffset"/>值写。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Decimal,System.Threading.CancellationToken)">
            <summary>
            异步写入一个<see cref="T:System.Decimal"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Decimal"/>值。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.Decimal},System.Threading.CancellationToken)">
            <summary>
            异步写一个<see cref="T:System.Nullable`1"/>的价值<see cref="T:System.Decimal"/>。
            </summary>
            <param name="value"><see cref="T:System.Nullable`1"/>的<see cref="T:System.Decimal"/>值写。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Double,System.Threading.CancellationToken)">
            <summary>
            异步写入一个<see cref="T:System.Double"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Double"/>值。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.Double},System.Threading.CancellationToken)">
            <summary>
            异步写一个<see cref="T:System.Nullable`1"/>的价值<see cref="T:System.Double"/>。
            </summary>
            <param name="value"><see cref="T:System.Nullable`1"/>的<see cref="T:System.Double"/>值写。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Single,System.Threading.CancellationToken)">
            <summary>
            异步写入一个<see cref="T:System.Single"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Single"/>值。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.Single},System.Threading.CancellationToken)">
            <summary>
            异步写一个<see cref="T:System.Nullable`1"/>的价值<see cref="T:System.Single"/>。
            </summary>
            <param name="value"><see cref="T:System.Nullable`1"/>的<see cref="T:System.Single"/>值写。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Guid,System.Threading.CancellationToken)">
            <summary>
            异步写入一个<see cref="T:System.Guid"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Guid"/>值。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.Guid},System.Threading.CancellationToken)">
            <summary>
            异步写一个<see cref="T:System.Nullable`1"/>的价值<see cref="T:System.Guid"/>。
            </summary>
            <param name="value"><see cref="T:System.Nullable`1"/>的<see cref="T:System.Guid"/>值写。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            异步写入一个<see cref="T:System.Int32"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Int32"/>值。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            异步写一个<see cref="T:System.Nullable`1"/>的价值<see cref="T:System.Int32"/>。
            </summary>
            <param name="value"><see cref="T:System.Nullable`1"/>的<see cref="T:System.Int32"/>值写。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            异步写入一个<see cref="T:System.Int64"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Int64"/>值。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            异步写一个<see cref="T:System.Nullable`1"/>的价值<see cref="T:System.Int64"/>。
            </summary>
            <param name="value"><see cref="T:System.Nullable`1"/>的<see cref="T:System.Int64"/>值写。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            异步写入一个<see cref="T:System.Object"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Object"/>值。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.SByte,System.Threading.CancellationToken)">
            <summary>
            异步写入一个<see cref="T:System.SByte"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.SByte"/>值。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.SByte},System.Threading.CancellationToken)">
            <summary>
            异步写一个<see cref="T:System.Nullable`1"/>的价值<see cref="T:System.SByte"/>。
            </summary>
            <param name="value"><see cref="T:System.Nullable`1"/>的<see cref="T:System.SByte"/>值写。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Int16,System.Threading.CancellationToken)">
            <summary>
            异步写入一个<see cref="T:System.Int16"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Int16"/>值。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.Int16},System.Threading.CancellationToken)">
            <summary>
            异步写一个<see cref="T:System.Nullable`1"/>的价值<see cref="T:System.Int16"/>。
            </summary>
            <param name="value"><see cref="T:System.Nullable`1"/>的<see cref="T:System.Int16"/>值写。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            异步写入一个<see cref="T:System.String"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.String"/>值。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            异步写入一个<see cref="T:System.TimeSpan"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.TimeSpan"/>值。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <summary>
            异步写一个<see cref="T:System.Nullable`1"/>的价值<see cref="T:System.TimeSpan"/>。
            </summary>
            <param name="value"><see cref="T:System.Nullable`1"/>的<see cref="T:System.TimeSpan"/>值写。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.UInt32,System.Threading.CancellationToken)">
            <summary>
            异步写入一个<see cref="T:System.UInt32"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.UInt32"/>值。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.UInt32},System.Threading.CancellationToken)">
            <summary>
            异步写一个<see cref="T:System.Nullable`1"/>的价值<see cref="T:System.UInt32"/>。
            </summary>
            <param name="value"><see cref="T:System.Nullable`1"/>的<see cref="T:System.UInt32"/>值写。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.UInt64,System.Threading.CancellationToken)">
            <summary>
            异步写入一个<see cref="T:System.UInt64"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.UInt64"/>值。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.UInt64},System.Threading.CancellationToken)">
            <summary>
            异步写一个<see cref="T:System.Nullable`1"/>的价值<see cref="T:System.UInt64"/>。
            </summary>
            <param name="value"><see cref="T:System.Nullable`1"/>的<see cref="T:System.UInt64"/>值写。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Uri,System.Threading.CancellationToken)">
            <summary>
            异步写入一个<see cref="T:System.Uri"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Uri"/>值。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.UInt16,System.Threading.CancellationToken)">
            <summary>
            异步写入一个<see cref="T:System.UInt16"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.UInt16"/>值。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.UInt16},System.Threading.CancellationToken)">
            <summary>
            异步写一个<see cref="T:System.Nullable`1"/>的价值<see cref="T:System.UInt16"/>。
            </summary>
            <param name="value"><see cref="T:System.Nullable`1"/>的<see cref="T:System.UInt16"/>值写。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteCommentAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            异步写入注释 <c>/*...... */</c> 包含指定的文本。
            </summary>
            <param name="text">要放置在注释中的文本。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteEndArrayAsync(System.Threading.CancellationToken)">
            <summary>
            异步写入数组的末尾。
            </summary>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteEndConstructorAsync(System.Threading.CancellationToken)">
            <summary>
            异步写入构造函数的末尾。
            </summary>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteEndObjectAsync(System.Threading.CancellationToken)">
            <summary>
            异步写入 JSON 对象的末尾。
            </summary>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteRawValueAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            异步写入原始 JSON, 其中需要一个值, 并更新编写器的状态。
            </summary>
            <param name="json">要编写的原始 JSON。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>派生类必须重写此方法才能获得异步行为。否则, 它将
            同步执行, 返回已完成的任务。</remarks>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextWriter.ArrayPool">
            <summary>
            获取或设置编写器的字符数组池。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextWriter.Indentation">
            <summary>
            获取或设置当<see cref="P:Newtonsoft.Json.JsonTextWriter.IndentChar"/>设置为<see cref="P:Newtonsoft.Json.JsonWriter.Formatting"/>时, 层次结构中的每个级别要写入多少个<see cref="F:Newtonsoft.Json.Formatting.Indented"/>。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextWriter.QuoteChar">
            <summary>
            获取或设置要用于引用属性值的字符。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextWriter.IndentChar">
            <summary>
            获取或设置当<see cref="P:Newtonsoft.Json.JsonWriter.Formatting"/>设置为<see cref="F:Newtonsoft.Json.Formatting.Indented"/>时用于缩进的字符。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextWriter.QuoteName">
            <summary>
            获取或设置一个值, 该值指示对象名称是否将用引号括起来。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.#ctor(System.IO.TextWriter)">
            <summary>
            使用指定的<see cref="T:Newtonsoft.Json.JsonTextWriter"/>初始化<see cref="T:System.IO.TextWriter"/>类的新实例。
            </summary>
            <param name="textWriter">要写到的<see cref="T:System.IO.TextWriter"/>。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.Flush">
            <summary>
            将缓冲区中的任何东西刷新到底层<see cref="T:System.IO.TextWriter"/>, 并将底层<see cref="T:System.IO.TextWriter"/>刷新。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.Close">
            <summary>
            关闭此编写器。
            如果<see cref="P:Newtonsoft.Json.JsonWriter.CloseOutput"/>被设定为 <c> 真实的 </c>, 则底层<see cref="T:System.IO.TextWriter"/>也是封闭的。
            如果<see cref="P:Newtonsoft.Json.JsonWriter.AutoCompleteOnClose"/>设置为 <c> 真实的 </c>, 则 JSON 将自动完成。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartObject">
            <summary>
            写入 JSON 对象的开头。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartArray">
            <summary>
            写入 JSON 数组的开头。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartConstructor(System.String)">
            <summary>
            写入具有给定名称的构造函数的开头。
            </summary>
            <param name="name">构造函数的名称。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
            <summary>
            写入指定的结束令牌。
            </summary>
            <param name="token">要写入的结束令牌。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WritePropertyName(System.String)">
            <summary>
            在 JSON 对象上写入 name/值对的属性名称。
            </summary>
            <param name="name">属性的名称。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WritePropertyName(System.String,System.Boolean)">
            <summary>
            在 JSON 对象上写入 name/值对的属性名称。
            </summary>
            <param name="name">属性的名称。</param>
            <param name="escape">一个标志, 指示在将文本作为 JSON 属性名称写入时是否应转义文本。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteIndent">
            <summary>
            写入缩进字符。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueDelimiter">
            <summary>
            写入 JSON 值分隔符。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteIndentSpace">
            <summary>
            写入缩进空间。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Object)">
            <summary>
            写入一个<see cref="T:System.Object"/>值。
            如果该值不能写入单个 JSON 令牌, 则会引发错误。
            </summary>
            <param name="value">要写入的<see cref="T:System.Object"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteNull">
            <summary>
            写入空值。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteUndefined">
            <summary>
            写入未定义的值。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteRaw(System.String)">
            <summary>
            写入原始 JSON。
            </summary>
            <param name="json">要编写的原始 JSON。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.String)">
            <summary>
            写入一个<see cref="T:System.String"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.String"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int32)">
            <summary>
            写入一个<see cref="T:System.Int32"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Int32"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt32)">
            <summary>
            写入一个<see cref="T:System.UInt32"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.UInt32"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int64)">
            <summary>
            写入一个<see cref="T:System.Int64"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Int64"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt64)">
            <summary>
            写入一个<see cref="T:System.UInt64"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.UInt64"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Single)">
            <summary>
            写入一个<see cref="T:System.Single"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Single"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Nullable{System.Single})">
            <summary>
            写出一个<see cref="T:System.Nullable`1"/>的价值。
            </summary>
            <param name="value"><see cref="T:System.Nullable`1"/>的<see cref="T:System.Single"/>值写。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Double)">
            <summary>
            写入一个<see cref="T:System.Double"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Double"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Nullable{System.Double})">
            <summary>
            写出一个<see cref="T:System.Nullable`1"/>的价值。
            </summary>
            <param name="value"><see cref="T:System.Nullable`1"/>的<see cref="T:System.Double"/>值写。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Boolean)">
            <summary>
            写入一个<see cref="T:System.Boolean"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Boolean"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int16)">
            <summary>
            写入一个<see cref="T:System.Int16"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Int16"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt16)">
            <summary>
            写入一个<see cref="T:System.UInt16"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.UInt16"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Char)">
            <summary>
            写入一个<see cref="T:System.Char"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Char"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Byte)">
            <summary>
            写入一个<see cref="T:System.Byte"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Byte"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.SByte)">
            <summary>
            写入一个<see cref="T:System.SByte"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.SByte"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Decimal)">
            <summary>
            写入一个<see cref="T:System.Decimal"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Decimal"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.DateTime)">
            <summary>
            写入一个<see cref="T:System.DateTime"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.DateTime"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Byte[])">
            <summary>
            写入一个<see cref="T:System.Byte"/> [] 值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Byte"/> [] 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            写入一个<see cref="T:System.DateTimeOffset"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.DateTimeOffset"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Guid)">
            <summary>
            写入一个<see cref="T:System.Guid"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Guid"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.TimeSpan)">
            <summary>
            写入一个<see cref="T:System.TimeSpan"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.TimeSpan"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Uri)">
            <summary>
            写入一个<see cref="T:System.Uri"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Uri"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteComment(System.String)">
            <summary>
            <C>/*. * */</c> 包含指定文本的注释。 
            </summary>
            <param name="text">要放置在注释中的文本。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteWhitespace(System.String)">
            <summary>
            写入给定的空白。
            </summary>
            <param name="ws">空白字符的字符串。</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonToken">
            <summary>
            指定 JSON 令牌的类型。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.None">
            <summary>
            如果未调用读取方法, 则由<see cref="T:Newtonsoft.Json.JsonReader"/>返回此值。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.StartObject">
            <summary>
            对象启动令牌。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.StartArray">
            <summary>
            数组启动令牌。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.StartConstructor">
            <summary>
            构造函数启动令牌。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.PropertyName">
            <summary>
            对象属性名称。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Comment">
            <summary>
            评论。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Raw">
            <summary>
            原始的 JSON。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Integer">
            <summary>
            整数。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Float">
            <summary>
            一个浮子。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.String">
            <summary>
            一个字符串。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Boolean">
            <summary>
            布尔值。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Null">
            <summary>
            空标记。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Undefined">
            <summary>
            未定义的标记。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.EndObject">
            <summary>
            对象结束令牌。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.EndArray">
            <summary>
            数组端标记。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.EndConstructor">
            <summary>
            构造函数结束令牌。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Date">
            <summary>
            一个约会。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Bytes">
            <summary>
            字节数据。
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonValidatingReader">
            <summary>
            <para>
            表示提供<see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>验证的读取器。
            </para>
            < 注意类型 = "谨慎" >
            JSON 架构验证已移动到其自己的包。有关更多详细信息, 请参阅<see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see>。
            </note>
            </summary>
        </member>
        <member name="E:Newtonsoft.Json.JsonValidatingReader.ValidationEventHandler">
            <summary>
            设置用于接收架构验证错误的事件处理程序。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.Value">
            <summary>
            获取当前 JSON 令牌的文本值。
            </summary>
            <value></value>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.Depth">
            <summary>
            获取 JSON 文档中当前令牌的深度。
            </summary>
            <value>The depth of the current token in the JSON document.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.Path">
            <summary>
            获取当前 JSON 令牌的路径。 
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.QuoteChar">
            <summary>
            获取用于包含字符串值的引号字符。
            </summary>
            <value></value>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.TokenType">
            <summary>
            获取当前 JSON 令牌的类型。
            </summary>
            <value></value>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.ValueType">
            <summary>
            获取当前 JSON 令牌的. net 类型。
            </summary>
            <value></value>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.#ctor(Newtonsoft.Json.JsonReader)">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.JsonValidatingReader"/>类的一个新实例,
            验证从给定<see cref="T:Newtonsoft.Json.JsonReader"/>返回的内容。
            </summary>
            <param name="reader">验证时要读取的<see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.Schema">
            <summary>
            获取或设置架构。
            </summary>
            <value>The schema.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.Reader">
            <summary>
            获取用于构造这个<see cref="T:Newtonsoft.Json.JsonReader"/>的<see cref="T:Newtonsoft.Json.JsonValidatingReader"/>。
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.JsonReader"/> specified in the constructor.</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.Close">
            <summary>
            将读取器的状态更改为<see cref="F:Newtonsoft.Json.JsonReader.State.Closed"/>。
            如果<see cref="P:Newtonsoft.Json.JsonReader.CloseInput"/>被设定为 <c> 真实的 </c>, 则底层<see cref="T:Newtonsoft.Json.JsonReader"/>也是封闭的。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsInt32">
            <summary>
            从潜在<see cref="T:Newtonsoft.Json.JsonReader"/>读取下一个 JSON 令牌, 作为一个<see cref="T:System.Nullable`1"/>。
            </summary>
            <returns>一个<see cref="T:System.Nullable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsBytes">
            <summary>
            从潜在<see cref="T:Newtonsoft.Json.JsonReader"/>作为<see cref="T:System.Byte"/>读取下一个 JSON 令牌 []。
            </summary>
            <returns>
            如果下一个 JSON 令牌为空, 则为 </c> 的<see cref="T:System.Byte"/> [] 或 <c> 空。
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDecimal">
            <summary>
            从潜在<see cref="T:Newtonsoft.Json.JsonReader"/>读取下一个 JSON 令牌, 作为一个<see cref="T:System.Nullable`1"/>。
            </summary>
            <returns>一个<see cref="T:System.Nullable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDouble">
            <summary>
            从潜在<see cref="T:Newtonsoft.Json.JsonReader"/>读取下一个 JSON 令牌, 作为一个<see cref="T:System.Nullable`1"/>。
            </summary>
            <returns>一个<see cref="T:System.Nullable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsBoolean">
            <summary>
            从潜在<see cref="T:Newtonsoft.Json.JsonReader"/>读取下一个 JSON 令牌, 作为一个<see cref="T:System.Nullable`1"/>。
            </summary>
            <returns>一个<see cref="T:System.Nullable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsString">
            <summary>
            从潜在<see cref="T:Newtonsoft.Json.JsonReader"/>作为一个<see cref="T:System.String"/>读取下一个 JSON 令牌。
            </summary>
            <returns>一个<see cref="T:System.String"/>。此方法将返回数组末尾 <c> null </c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDateTime">
            <summary>
            从潜在<see cref="T:Newtonsoft.Json.JsonReader"/>读取下一个 JSON 令牌, 作为一个<see cref="T:System.Nullable`1"/>。
            </summary>
            <returns>一个<see cref="T:System.Nullable`1"/>。此方法将返回数组末尾 <c> null </c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDateTimeOffset">
            <summary>
            从潜在<see cref="T:Newtonsoft.Json.JsonReader"/>读取下一个 JSON 令牌, 作为一个<see cref="T:System.Nullable`1"/>。
            </summary>
            <returns>一个<see cref="T:System.Nullable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.Read">
            <summary>
            从底层<see cref="T:Newtonsoft.Json.JsonReader"/>读取下一个 JSON 令牌。
            </summary>
            <returns>
            如果下一个令牌被成功读取, 则 <c> 真实 </c>; 如果向下一个令牌被成功读取, 则真实的。如果没有更多的令牌可供读取, <c> 虚假 </c>。
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.JsonWriter">
            <summary>
            表示提供快速、非缓存、仅向前生成 JSON 数据的方法的编写器。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.CloseAsync(System.Threading.CancellationToken)">
            <summary>
            异步关闭此编写器。
            如果<see cref="P:Newtonsoft.Json.JsonWriter.CloseOutput"/>设置为 <c> 真实的 </c>, 则目标也将关闭。
            </summary>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.FlushAsync(System.Threading.CancellationToken)">
            <summary>
            异步刷新缓冲区中的任何内容到目标, 并刷新目标。
            </summary>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEndAsync(Newtonsoft.Json.JsonToken,System.Threading.CancellationToken)">
            <summary>
            异步写入指定的结束令牌。
            </summary>
            <param name="token">要写入的结束令牌。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteIndentAsync(System.Threading.CancellationToken)">
            <summary>
            异步写入缩进字符。
            </summary>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueDelimiterAsync(System.Threading.CancellationToken)">
            <summary>
            异步写入 JSON 值分隔符。
            </summary>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteIndentSpaceAsync(System.Threading.CancellationToken)">
            <summary>
            异步写入缩进空间。
            </summary>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteRawAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            异步编写原始 JSON, 而不更改编写器的状态。
            </summary>
            <param name="json">要编写的原始 JSON。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEndAsync(System.Threading.CancellationToken)">
            <summary>
            异步写入当前 JSON 对象或数组的末尾。
            </summary>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEndArrayAsync(System.Threading.CancellationToken)">
            <summary>
            异步写入数组的末尾。
            </summary>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEndConstructorAsync(System.Threading.CancellationToken)">
            <summary>
            异步写入构造函数的末尾。
            </summary>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEndObjectAsync(System.Threading.CancellationToken)">
            <summary>
            异步写入 JSON 对象的末尾。
            </summary>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteNullAsync(System.Threading.CancellationToken)">
            <summary>
            异步写入空值。
            </summary>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WritePropertyNameAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            异步写入 JSON 对象的 name 值对的属性名称。
            </summary>
            <param name="name">属性的名称。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WritePropertyNameAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            异步写入 JSON 对象的 name 值对的属性名称。
            </summary>
            <param name="name">属性的名称。</param>
            <param name="escape">一个标志, 指示在将文本作为 JSON 属性名称写入时是否应转义文本。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteStartArrayAsync(System.Threading.CancellationToken)">
            <summary>
            异步写入 JSON 数组的开头。
            </summary>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteCommentAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            异步写入注释 <c>/*...... */</c> 包含指定的文本。
            </summary>
            <param name="text">要放置在注释中的文本。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteRawValueAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            异步写入原始 JSON, 其中需要一个值, 并更新编写器的状态。
            </summary>
            <param name="json">要编写的原始 JSON。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteStartConstructorAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            异步写入具有给定名称的构造函数的开始。
            </summary>
            <param name="name">构造函数的名称。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteStartObjectAsync(System.Threading.CancellationToken)">
            <summary>
            异步写入 JSON 对象的开头。
            </summary>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteTokenAsync(Newtonsoft.Json.JsonReader,System.Threading.CancellationToken)">
            <summary>
            异步写入当前<see cref="T:Newtonsoft.Json.JsonReader"/>令牌。
            </summary>
            <param name="reader">要读取令牌的<see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteTokenAsync(Newtonsoft.Json.JsonReader,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            异步写入当前<see cref="T:Newtonsoft.Json.JsonReader"/>令牌。
            </summary>
            <param name="reader">要读取令牌的<see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="writeChildren">指示是否应写入当前令牌的子项的标志。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteTokenAsync(Newtonsoft.Json.JsonToken,System.Threading.CancellationToken)">
            <summary>
            异步写入<see cref="T:Newtonsoft.Json.JsonToken"/>令牌及其值。
            </summary>
            <param name="token">要写的<see cref="T:Newtonsoft.Json.JsonToken"/>。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteTokenAsync(Newtonsoft.Json.JsonToken,System.Object,System.Threading.CancellationToken)">
            <summary>
            异步写入<see cref="T:Newtonsoft.Json.JsonToken"/>令牌及其值。
            </summary>
            <param name="token">要写的<see cref="T:Newtonsoft.Json.JsonToken"/>。</param>
            <param name="value">
            要写入的值。
            仅对于具有关联值的令牌 (例如<see cref="T:System.String"/>的<see cref="F:Newtonsoft.Json.JsonToken.PropertyName"/>属性名称), 才需要一个值。
            <c> null </c> 可以传递给没有值的令牌的方法, 例如<see cref="F:Newtonsoft.Json.JsonToken.StartObject"/>。
            </param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            异步写一个<see cref="T:System.Nullable`1"/>的价值<see cref="T:System.Boolean"/>。
            </summary>
            <param name="value"><see cref="T:System.Nullable`1"/>的<see cref="T:System.Boolean"/>值写。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            异步写入一个<see cref="T:System.Boolean"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Boolean"/>值。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Byte,System.Threading.CancellationToken)">
            <summary>
            异步写入一个<see cref="T:System.Byte"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Byte"/>值。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.Byte},System.Threading.CancellationToken)">
            <summary>
            异步写一个<see cref="T:System.Nullable`1"/>的价值<see cref="T:System.Byte"/>。
            </summary>
            <param name="value"><see cref="T:System.Nullable`1"/>的<see cref="T:System.Byte"/>值写。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Byte[],System.Threading.CancellationToken)">
            <summary>
            异步写入一个<see cref="T:System.Byte"/> [] 值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Byte"/> [] 值。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Char,System.Threading.CancellationToken)">
            <summary>
            异步写入一个<see cref="T:System.Char"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Char"/>值。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.Char},System.Threading.CancellationToken)">
            <summary>
            异步写一个<see cref="T:System.Nullable`1"/>的价值<see cref="T:System.Char"/>。
            </summary>
            <param name="value"><see cref="T:System.Nullable`1"/>的<see cref="T:System.Char"/>值写。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.DateTime,System.Threading.CancellationToken)">
            <summary>
            异步写入一个<see cref="T:System.DateTime"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.DateTime"/>值。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            异步写一个<see cref="T:System.Nullable`1"/>的价值<see cref="T:System.DateTime"/>。
            </summary>
            <param name="value"><see cref="T:System.Nullable`1"/>的<see cref="T:System.DateTime"/>值写。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.DateTimeOffset,System.Threading.CancellationToken)">
            <summary>
            异步写入一个<see cref="T:System.DateTimeOffset"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.DateTimeOffset"/>值。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)">
            <summary>
            异步写一个<see cref="T:System.Nullable`1"/>的价值<see cref="T:System.DateTimeOffset"/>。
            </summary>
            <param name="value"><see cref="T:System.Nullable`1"/>的<see cref="T:System.DateTimeOffset"/>值写。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Decimal,System.Threading.CancellationToken)">
            <summary>
            异步写入一个<see cref="T:System.Decimal"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Decimal"/>值。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.Decimal},System.Threading.CancellationToken)">
            <summary>
            异步写一个<see cref="T:System.Nullable`1"/>的价值<see cref="T:System.Decimal"/>。
            </summary>
            <param name="value"><see cref="T:System.Nullable`1"/>的<see cref="T:System.Decimal"/>值写。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Double,System.Threading.CancellationToken)">
            <summary>
            异步写入一个<see cref="T:System.Double"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Double"/>值。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.Double},System.Threading.CancellationToken)">
            <summary>
            异步写一个<see cref="T:System.Nullable`1"/>的价值<see cref="T:System.Double"/>。
            </summary>
            <param name="value"><see cref="T:System.Nullable`1"/>的<see cref="T:System.Double"/>值写。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Single,System.Threading.CancellationToken)">
            <summary>
            异步写入一个<see cref="T:System.Single"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Single"/>值。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.Single},System.Threading.CancellationToken)">
            <summary>
            异步写一个<see cref="T:System.Nullable`1"/>的价值<see cref="T:System.Single"/>。
            </summary>
            <param name="value"><see cref="T:System.Nullable`1"/>的<see cref="T:System.Single"/>值写。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Guid,System.Threading.CancellationToken)">
            <summary>
            异步写入一个<see cref="T:System.Guid"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Guid"/>值。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.Guid},System.Threading.CancellationToken)">
            <summary>
            异步写一个<see cref="T:System.Nullable`1"/>的价值<see cref="T:System.Guid"/>。
            </summary>
            <param name="value"><see cref="T:System.Nullable`1"/>的<see cref="T:System.Guid"/>值写。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            异步写入一个<see cref="T:System.Int32"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Int32"/>值。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            异步写一个<see cref="T:System.Nullable`1"/>的价值<see cref="T:System.Int32"/>。
            </summary>
            <param name="value"><see cref="T:System.Nullable`1"/>的<see cref="T:System.Int32"/>值写。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            异步写入一个<see cref="T:System.Int64"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Int64"/>值。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            异步写一个<see cref="T:System.Nullable`1"/>的价值<see cref="T:System.Int64"/>。
            </summary>
            <param name="value"><see cref="T:System.Nullable`1"/>的<see cref="T:System.Int64"/>值写。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            异步写入一个<see cref="T:System.Object"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Object"/>值。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.SByte,System.Threading.CancellationToken)">
            <summary>
            异步写入一个<see cref="T:System.SByte"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.SByte"/>值。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.SByte},System.Threading.CancellationToken)">
            <summary>
            异步写一个<see cref="T:System.Nullable`1"/>的价值<see cref="T:System.SByte"/>。
            </summary>
            <param name="value"><see cref="T:System.Nullable`1"/>的<see cref="T:System.SByte"/>值写。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Int16,System.Threading.CancellationToken)">
            <summary>
            异步写入一个<see cref="T:System.Int16"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Int16"/>值。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.Int16},System.Threading.CancellationToken)">
            <summary>
            异步写一个<see cref="T:System.Nullable`1"/>的价值<see cref="T:System.Int16"/>。
            </summary>
            <param name="value"><see cref="T:System.Nullable`1"/>的<see cref="T:System.Int16"/>值写。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            异步写入一个<see cref="T:System.String"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.String"/>值。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            异步写入一个<see cref="T:System.TimeSpan"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.TimeSpan"/>值。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <summary>
            异步写一个<see cref="T:System.Nullable`1"/>的价值<see cref="T:System.TimeSpan"/>。
            </summary>
            <param name="value"><see cref="T:System.Nullable`1"/>的<see cref="T:System.TimeSpan"/>值写。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.UInt32,System.Threading.CancellationToken)">
            <summary>
            异步写入一个<see cref="T:System.UInt32"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.UInt32"/>值。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.UInt32},System.Threading.CancellationToken)">
            <summary>
            异步写一个<see cref="T:System.Nullable`1"/>的价值<see cref="T:System.UInt32"/>。
            </summary>
            <param name="value"><see cref="T:System.Nullable`1"/>的<see cref="T:System.UInt32"/>值写。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.UInt64,System.Threading.CancellationToken)">
            <summary>
            异步写入一个<see cref="T:System.UInt64"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.UInt64"/>值。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.UInt64},System.Threading.CancellationToken)">
            <summary>
            异步写一个<see cref="T:System.Nullable`1"/>的价值<see cref="T:System.UInt64"/>。
            </summary>
            <param name="value"><see cref="T:System.Nullable`1"/>的<see cref="T:System.UInt64"/>值写。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Uri,System.Threading.CancellationToken)">
            <summary>
            异步写入一个<see cref="T:System.Uri"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Uri"/>值。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.UInt16,System.Threading.CancellationToken)">
            <summary>
            异步写入一个<see cref="T:System.UInt16"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.UInt16"/>值。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.UInt16},System.Threading.CancellationToken)">
            <summary>
            异步写一个<see cref="T:System.Nullable`1"/>的价值<see cref="T:System.UInt16"/>。
            </summary>
            <param name="value"><see cref="T:System.Nullable`1"/>的<see cref="T:System.UInt16"/>值写。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteUndefinedAsync(System.Threading.CancellationToken)">
            <summary>
            异步写入未定义的值。
            </summary>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteWhitespaceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            异步写入给定的空白。
            </summary>
            <param name="ws">空白字符的字符串。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.SetWriteStateAsync(Newtonsoft.Json.JsonToken,System.Object,System.Threading.CancellationToken)">
            <summary>
            异步设置<see cref="T:Newtonsoft.Json.JsonWriter"/>的状态。
            </summary>
            <param name="token">正在书写的<see cref="T:Newtonsoft.Json.JsonToken"/>。</param>
            <param name="value">正在写入的值。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个代表异步操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
            <remarks>默认行为是同步执行, 返回已完成的任务。派生
            类可以重写此行为的真正异步。</remarks>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.CloseOutput">
            <summary>
            获取或设置一个值, 该值指示在此编写器关闭时是否应关闭目标。
            </summary>
            <value>
            <c>true</c> to close the destination when this writer is closed; otherwise <c>false</c>. The default is <c>true</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.AutoCompleteOnClose">
            <summary>
            获取或设置一个值, 该值指示此编写器关闭时 JSON 是否应自动完成。
            </summary>
            <value>
            <c>true</c> to auto-complete the JSON when this writer is closed; otherwise <c>false</c>. The default is <c>true</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.Top">
            <summary>
            获取顶部。
            </summary>
            <value>The top.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.WriteState">
            <summary>
            获取编写器的状态。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.Path">
            <summary>
            获取编写器的路径。 
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.Formatting">
            <summary>
            获取或设置一个值, 该值指示 JSON 文本输出的格式。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.DateFormatHandling">
            <summary>
            获取或设置如何将日期写入 JSON 文本。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.DateTimeZoneHandling">
            <summary>
            获取或设置在编写 JSON 文本时如何处理<see cref="T:System.DateTime"/>时区。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.StringEscapeHandling">
            <summary>
            获取或设置编写 JSON 文本时如何转义字符串。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.FloatFormatHandling">
            <summary>
            获取或设置如何特殊的浮点数, 例如<see cref="F:System.Double.NaN"/>,
            <see cref="F:System.Double.PositiveInfinity"/>和<see cref="F:System.Double.NegativeInfinity"/>,
            写入 JSON 文本。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.DateFormatString">
            <summary>
            获取或设置在编写 JSON 文本时如何设置<see cref="T:System.DateTime"/>和<see cref="T:System.DateTimeOffset"/>值的格式。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.Culture">
            <summary>
            获取或设置编写 JSON 时使用的区域性。默认为<see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.#ctor">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.JsonWriter"/>类的新实例。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.Flush">
            <summary>
            将缓冲区中的任何内容刷新到目标, 并刷新目标。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.Close">
            <summary>
            关闭此编写器。
            如果<see cref="P:Newtonsoft.Json.JsonWriter.CloseOutput"/>设置为 <c> 真实的 </c>, 则目标也将关闭。
            如果<see cref="P:Newtonsoft.Json.JsonWriter.AutoCompleteOnClose"/>设置为 <c> 真实的 </c>, 则 JSON 将自动完成。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteStartObject">
            <summary>
            写入 JSON 对象的开头。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEndObject">
            <summary>
            写入 JSON 对象的结尾。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteStartArray">
            <summary>
            写入 JSON 数组的开头。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEndArray">
            <summary>
            写入数组的末尾。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteStartConstructor(System.String)">
            <summary>
            写入具有给定名称的构造函数的开头。
            </summary>
            <param name="name">构造函数的名称。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEndConstructor">
            <summary>
            写入结束构造函数。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WritePropertyName(System.String)">
            <summary>
            写入 JSON 对象的 name 值对的属性名称。
            </summary>
            <param name="name">属性的名称。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WritePropertyName(System.String,System.Boolean)">
            <summary>
            写入 JSON 对象的 name 值对的属性名称。
            </summary>
            <param name="name">属性的名称。</param>
            <param name="escape">一个标志, 指示在将文本作为 JSON 属性名称写入时是否应转义文本。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEnd">
            <summary>
            写入当前 JSON 对象或数组的末尾。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteToken(Newtonsoft.Json.JsonReader)">
            <summary>
            写入当前<see cref="T:Newtonsoft.Json.JsonReader"/>令牌及其子标记。
            </summary>
            <param name="reader">要读取令牌的<see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteToken(Newtonsoft.Json.JsonReader,System.Boolean)">
            <summary>
            写入当前<see cref="T:Newtonsoft.Json.JsonReader"/>令牌。
            </summary>
            <param name="reader">要读取令牌的<see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="writeChildren">指示是否应写入当前令牌的子项的标志。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteToken(Newtonsoft.Json.JsonToken,System.Object)">
            <summary>
            写入<see cref="T:Newtonsoft.Json.JsonToken"/>令牌及其值。
            </summary>
            <param name="token">要写的<see cref="T:Newtonsoft.Json.JsonToken"/>。</param>
            <param name="value">
            要写入的值。
            仅对于具有关联值的令牌 (例如<see cref="T:System.String"/>的<see cref="F:Newtonsoft.Json.JsonToken.PropertyName"/>属性名称), 才需要一个值。
            <c> null </c> 可以传递给没有值的令牌的方法, 例如<see cref="F:Newtonsoft.Json.JsonToken.StartObject"/>。
            </param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteToken(Newtonsoft.Json.JsonToken)">
            <summary>
            写入<see cref="T:Newtonsoft.Json.JsonToken"/>令牌。
            </summary>
            <param name="token">要写的<see cref="T:Newtonsoft.Json.JsonToken"/>。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
            <summary>
            写入指定的结束令牌。
            </summary>
            <param name="token">要写入的结束令牌。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteIndent">
            <summary>
            写入缩进字符。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueDelimiter">
            <summary>
            写入 JSON 值分隔符。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteIndentSpace">
            <summary>
            写入缩进空间。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteNull">
            <summary>
            写入空值。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteUndefined">
            <summary>
            写入未定义的值。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteRaw(System.String)">
            <summary>
            在不更改编写器状态的情况下编写原始 JSON。
            </summary>
            <param name="json">要编写的原始 JSON。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteRawValue(System.String)">
            <summary>
            写入需要值的原始 JSON, 并更新编写器的状态。
            </summary>
            <param name="json">要编写的原始 JSON。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.String)">
            <summary>
            写入一个<see cref="T:System.String"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.String"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int32)">
            <summary>
            写入一个<see cref="T:System.Int32"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Int32"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt32)">
            <summary>
            写入一个<see cref="T:System.UInt32"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.UInt32"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int64)">
            <summary>
            写入一个<see cref="T:System.Int64"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Int64"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt64)">
            <summary>
            写入一个<see cref="T:System.UInt64"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.UInt64"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Single)">
            <summary>
            写入一个<see cref="T:System.Single"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Single"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Double)">
            <summary>
            写入一个<see cref="T:System.Double"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Double"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Boolean)">
            <summary>
            写入一个<see cref="T:System.Boolean"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Boolean"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int16)">
            <summary>
            写入一个<see cref="T:System.Int16"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Int16"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt16)">
            <summary>
            写入一个<see cref="T:System.UInt16"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.UInt16"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Char)">
            <summary>
            写入一个<see cref="T:System.Char"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Char"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Byte)">
            <summary>
            写入一个<see cref="T:System.Byte"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Byte"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.SByte)">
            <summary>
            写入一个<see cref="T:System.SByte"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.SByte"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Decimal)">
            <summary>
            写入一个<see cref="T:System.Decimal"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Decimal"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.DateTime)">
            <summary>
            写入一个<see cref="T:System.DateTime"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.DateTime"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            写入一个<see cref="T:System.DateTimeOffset"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.DateTimeOffset"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Guid)">
            <summary>
            写入一个<see cref="T:System.Guid"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Guid"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.TimeSpan)">
            <summary>
            写入一个<see cref="T:System.TimeSpan"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.TimeSpan"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int32})">
            <summary>
            写出一个<see cref="T:System.Nullable`1"/>的价值。
            </summary>
            <param name="value"><see cref="T:System.Nullable`1"/>的<see cref="T:System.Int32"/>值写。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt32})">
            <summary>
            写出一个<see cref="T:System.Nullable`1"/>的价值。
            </summary>
            <param name="value"><see cref="T:System.Nullable`1"/>的<see cref="T:System.UInt32"/>值写。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int64})">
            <summary>
            写出一个<see cref="T:System.Nullable`1"/>的价值。
            </summary>
            <param name="value"><see cref="T:System.Nullable`1"/>的<see cref="T:System.Int64"/>值写。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt64})">
            <summary>
            写出一个<see cref="T:System.Nullable`1"/>的价值。
            </summary>
            <param name="value"><see cref="T:System.Nullable`1"/>的<see cref="T:System.UInt64"/>值写。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Single})">
            <summary>
            写出一个<see cref="T:System.Nullable`1"/>的价值。
            </summary>
            <param name="value"><see cref="T:System.Nullable`1"/>的<see cref="T:System.Single"/>值写。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Double})">
            <summary>
            写出一个<see cref="T:System.Nullable`1"/>的价值。
            </summary>
            <param name="value"><see cref="T:System.Nullable`1"/>的<see cref="T:System.Double"/>值写。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Boolean})">
            <summary>
            写出一个<see cref="T:System.Nullable`1"/>的价值。
            </summary>
            <param name="value"><see cref="T:System.Nullable`1"/>的<see cref="T:System.Boolean"/>值写。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int16})">
            <summary>
            写出一个<see cref="T:System.Nullable`1"/>的价值。
            </summary>
            <param name="value"><see cref="T:System.Nullable`1"/>的<see cref="T:System.Int16"/>值写。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt16})">
            <summary>
            写出一个<see cref="T:System.Nullable`1"/>的价值。
            </summary>
            <param name="value"><see cref="T:System.Nullable`1"/>的<see cref="T:System.UInt16"/>值写。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Char})">
            <summary>
            写出一个<see cref="T:System.Nullable`1"/>的价值。
            </summary>
            <param name="value"><see cref="T:System.Nullable`1"/>的<see cref="T:System.Char"/>值写。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Byte})">
            <summary>
            写出一个<see cref="T:System.Nullable`1"/>的价值。
            </summary>
            <param name="value"><see cref="T:System.Nullable`1"/>的<see cref="T:System.Byte"/>值写。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.SByte})">
            <summary>
            写出一个<see cref="T:System.Nullable`1"/>的价值。
            </summary>
            <param name="value"><see cref="T:System.Nullable`1"/>的<see cref="T:System.SByte"/>值写。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Decimal})">
            <summary>
            写出一个<see cref="T:System.Nullable`1"/>的价值。
            </summary>
            <param name="value"><see cref="T:System.Nullable`1"/>的<see cref="T:System.Decimal"/>值写。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.DateTime})">
            <summary>
            写出一个<see cref="T:System.Nullable`1"/>的价值。
            </summary>
            <param name="value"><see cref="T:System.Nullable`1"/>的<see cref="T:System.DateTime"/>值写。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.DateTimeOffset})">
            <summary>
            写出一个<see cref="T:System.Nullable`1"/>的价值。
            </summary>
            <param name="value"><see cref="T:System.Nullable`1"/>的<see cref="T:System.DateTimeOffset"/>值写。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Guid})">
            <summary>
            写出一个<see cref="T:System.Nullable`1"/>的价值。
            </summary>
            <param name="value"><see cref="T:System.Nullable`1"/>的<see cref="T:System.Guid"/>值写。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.TimeSpan})">
            <summary>
            写出一个<see cref="T:System.Nullable`1"/>的价值。
            </summary>
            <param name="value"><see cref="T:System.Nullable`1"/>的<see cref="T:System.TimeSpan"/>值写。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Byte[])">
            <summary>
            写入一个<see cref="T:System.Byte"/> [] 值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Byte"/> [] 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Uri)">
            <summary>
            写入一个<see cref="T:System.Uri"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Uri"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Object)">
            <summary>
            写入一个<see cref="T:System.Object"/>值。
            如果该值不能写入单个 JSON 令牌, 则会引发错误。
            </summary>
            <param name="value">要写入的<see cref="T:System.Object"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteComment(System.String)">
            <summary>
            <C>/*. * */</c> 包含指定文本的注释。
            </summary>
            <param name="text">要放置在注释中的文本。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteWhitespace(System.String)">
            <summary>
            写入给定的空白。
            </summary>
            <param name="ws">空白字符的字符串。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.Dispose(System.Boolean)">
            <summary>
            释放非托管和 (可选) 管理的资源。
            </summary>
            <param name="disposing"><c> 真正的 </c> 发布托管和非托管资源;<c> 错误 </c> 只释放非托管资源。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.SetWriteState(Newtonsoft.Json.JsonToken,System.Object)">
            <summary>
            设置<see cref="T:Newtonsoft.Json.JsonWriter"/>的状态。
            </summary>
            <param name="token">正在书写的<see cref="T:Newtonsoft.Json.JsonToken"/>。</param>
            <param name="value">正在写入的值。</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonWriterException">
            <summary>
            编写 JSON 文本时发生错误时引发的异常。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriterException.Path">
            <summary>
            获取发生错误的 JSON 的路径。
            </summary>
            <value>The path to the JSON where the error occurred.</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriterException.#ctor">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.JsonWriterException"/>类的新实例。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.String)">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.JsonWriterException"/>类的新实例
            并显示指定的错误消息。
            </summary>
            <param name="message">解释异常原因的错误消息。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.String,System.Exception)">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.JsonWriterException"/>类的新实例
            并引用导致此异常的内部异常。
            </summary>
            <param name="message">解释异常原因的错误消息。</param>
            <param name="innerException">导致当前异常的异常, 如果未指定内部异常, 则 <c> null </c>。</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.JsonWriterException"/>类的新实例。
            </summary>
            <param name="info">保存有关正在引发的异常的序列化对象数据的<see cref="T:System.Runtime.Serialization.SerializationInfo"/>。</param>
            <param name="context">包含有关源或目标的上下文信息的<see cref="T:System.Runtime.Serialization.StreamingContext"/>。</param>
            <exception cref="T:System.ArgumentNullException"></C>, "<paramref name="info"/>" 参数 <c> 为空。</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">类名 <c> 为 null </c> 或<see cref="P:System.Exception.HResult"/>为零 (0)。</exception>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.JsonWriterException"/>类的新实例
            具有指定的错误消息、JSON 路径和对导致此异常的内部异常的引用。
            </summary>
            <param name="message">解释异常原因的错误消息。</param>
            <param name="path">发生错误的 JSON 的路径。</param>
            <param name="innerException">导致当前异常的异常, 如果未指定内部异常, 则 <c> null </c>。</param>
        </member>
        <member name="T:Newtonsoft.Json.Linq.CommentHandling">
            <summary>
            指定加载 JSON 时如何处理 JSON 注释。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.CommentHandling.Ignore">
            <summary>
            忽略注释。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.CommentHandling.Load">
            <summary>
            加载注释作为一个<see cref="T:Newtonsoft.Json.Linq.JValue"/>与类型<see cref="F:Newtonsoft.Json.Linq.JTokenType.Comment"/>。
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.Extensions">
            <summary>
            包含 LINQ 到 JSON 扩展方法。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            返回包含源集合中每个令牌的祖先的标记的集合。
            </summary>
            <typeparam name="T">源中对象的类型, 约束在<see cref="T:Newtonsoft.Json.Linq.JToken"/>中。</typeparam>
            <param name="source">包含源集合的<see cref="T:System.Collections.Generic.IEnumerable`1"/>。</param>
            <returns>一个<see cref="T:System.Collections.Generic.IEnumerable`1"/>, 包含源集合中每个标记的祖先。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.AncestorsAndSelf``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            返回包含源集合中的每个令牌的令牌集合, 以及源集合中每个令牌的祖先。
            </summary>
            <typeparam name="T">源中对象的类型, 约束在<see cref="T:Newtonsoft.Json.Linq.JToken"/>中。</typeparam>
            <param name="source">包含源集合的<see cref="T:System.Collections.Generic.IEnumerable`1"/>。</param>
            <returns>一个<see cref="T:System.Collections.Generic.IEnumerable`1"/>, 包含源集合中的每个令牌, 源集合中每个令牌的祖先。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            返回包含源集合中每个令牌的后代的令牌的集合。
            </summary>
            <typeparam name="T">源中对象的类型, 约束在<see cref="T:Newtonsoft.Json.Linq.JContainer"/>中。</typeparam>
            <param name="source">包含源集合的<see cref="T:System.Collections.Generic.IEnumerable`1"/>。</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/>的一个<see cref="T:Newtonsoft.Json.Linq.JToken"/>, 包含源集合中每个令牌的后代。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.DescendantsAndSelf``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            返回包含源集合中的每个令牌的令牌集合, 以及源集合中每个令牌的后代。
            </summary>
            <typeparam name="T">源中对象的类型, 约束在<see cref="T:Newtonsoft.Json.Linq.JContainer"/>中。</typeparam>
            <param name="source">包含源集合的<see cref="T:System.Collections.Generic.IEnumerable`1"/>。</param>
            <returns>一个<see cref="T:System.Collections.Generic.IEnumerable`1"/>, 包含源集合中的每个令牌, 以及源集合中每个令牌的后代。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Properties(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JObject})">
            <summary>
            返回源集合中每个对象的子属性的集合。
            </summary>
            <param name="source">包含源集合的<see cref="T:System.Collections.Generic.IEnumerable`1"/>。</param>
            <returns>包含源集合中每个对象的属性的<see cref="T:System.Collections.Generic.IEnumerable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken},System.Object)">
            <summary>
            返回具有给定键的源集合中每个对象的子值的集合。
            </summary>
            <param name="source">包含源集合的<see cref="T:System.Collections.Generic.IEnumerable`1"/>。</param>
            <param name="key">令牌密钥。</param>
            <returns>一个<see cref="T:System.Collections.Generic.IEnumerable`1"/>, 包含源集合中每个令牌的值, 并带有给定的键。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
            <summary>
            返回源集合中每个对象的子值的集合。
            </summary>
            <param name="source">包含源集合的<see cref="T:System.Collections.Generic.IEnumerable`1"/>。</param>
            <returns>一个<see cref="T:System.Collections.Generic.IEnumerable`1"/>, 包含源集合中每个令牌的值。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken},System.Object)">
            <summary>
            返回源集合中每个对象的已转换子值的集合, 并使用给定的键。
            </summary>
            <typeparam name="U">要将值转换为的类型。</typeparam>
            <param name="source">包含源集合的<see cref="T:System.Collections.Generic.IEnumerable`1"/>。</param>
            <param name="key">令牌密钥。</param>
            <returns>包含源集合中每个令牌的转换值的<see cref="T:System.Collections.Generic.IEnumerable`1"/>, 并使用给定的键。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
            <summary>
            返回源集合中每个对象的已转换子值的集合。
            </summary>
            <typeparam name="U">要将值转换为的类型。</typeparam>
            <param name="source">包含源集合的<see cref="T:System.Collections.Generic.IEnumerable`1"/>。</param>
            <returns>包含源集合中每个令牌的转换值的<see cref="T:System.Collections.Generic.IEnumerable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Value``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
            <summary>
            转换值。
            </summary>
            <typeparam name="U">要将值转换为的类型。</typeparam>
            <param name="value">一个<see cref="T:Newtonsoft.Json.Linq.JToken"/>被塑造成一个<see cref="T:System.Collections.Generic.IEnumerable`1"/>。</param>
            <returns>转换后的值。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Value``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            转换值。
            </summary>
            <typeparam name="T">源集合类型。</typeparam>
            <typeparam name="U">要将值转换为的类型。</typeparam>
            <param name="value">一个<see cref="T:Newtonsoft.Json.Linq.JToken"/>被塑造成一个<see cref="T:System.Collections.Generic.IEnumerable`1"/>。</param>
            <returns>转换后的值。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Children``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            返回源集合中每个数组的子标记的集合。
            </summary>
            <typeparam name="T">源集合类型。</typeparam>
            <param name="source">包含源集合的<see cref="T:System.Collections.Generic.IEnumerable`1"/>。</param>
            <returns>一个<see cref="T:System.Collections.Generic.IEnumerable`1"/>, 包含源集合中每个令牌的值。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Children``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            返回源集合中每个数组的已转换子令牌的集合。
            </summary>
            <param name="source">包含源集合的<see cref="T:System.Collections.Generic.IEnumerable`1"/>。</param>
            <typeparam name="U">要将值转换为的类型。</typeparam>
            <typeparam name="T">源集合类型。</typeparam>
            <returns>包含源集合中每个令牌的转换值的<see cref="T:System.Collections.Generic.IEnumerable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.AsJEnumerable(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
            <summary>
            返回键入为<see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1"/>的输入。
            </summary>
            <param name="source">包含源集合的<see cref="T:System.Collections.Generic.IEnumerable`1"/>。</param>
            <returns>输入为<see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.AsJEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            返回键入为<see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1"/>的输入。
            </summary>
            <typeparam name="T">源集合类型。</typeparam>
            <param name="source">包含源集合的<see cref="T:System.Collections.Generic.IEnumerable`1"/>。</param>
            <returns>输入为<see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1"/>。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.IJEnumerable`1">
            <summary>
            表示<see cref="T:Newtonsoft.Json.Linq.JToken"/>对象的集合。
            </summary>
            <typeparam name="T">令牌的类型。</typeparam>
        </member>
        <member name="P:Newtonsoft.Json.Linq.IJEnumerable`1.Item(System.Object)">
            <summary>
            获取具有指定键的<see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1"/>。
            </summary>
            <value></value>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JArray">
            <summary>
            表示 JSON 数组。
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" />
            </example>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.WriteToAsync(Newtonsoft.Json.JsonWriter,System.Threading.CancellationToken,Newtonsoft.Json.JsonConverter[])">
            <summary>
            异步将此令牌写入<see cref="T:Newtonsoft.Json.JsonWriter"/>。
            </summary>
            <param name="writer">这个方法将写入的<see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="cancellationToken">要监视取消请求的标记。</param>
            <param name="converters">将在书写令牌时使用的<see cref="T:Newtonsoft.Json.JsonConverter"/>集合。</param>
            <returns>一个表示异步写入操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.LoadAsync(Newtonsoft.Json.JsonReader,System.Threading.CancellationToken)">
            <summary>
            从<see cref="T:Newtonsoft.Json.Linq.JArray"/>中异步加载一个<see cref="T:Newtonsoft.Json.JsonReader"/>。 
            </summary>
            <param name="reader">一个<see cref="T:Newtonsoft.Json.JsonReader"/>, 将被读取的内容的<see cref="T:Newtonsoft.Json.Linq.JArray"/>。
            如果此 <c> 为 null </c>, 则将使用默认加载设置。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>表示异步负载的<see cref="T:System.Threading.Tasks.Task`1"/>。<see cref="P:System.Threading.Tasks.Task`1.Result"/>属性包含从指定<see cref="T:Newtonsoft.Json.JsonReader"/>读取的 JSON。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.LoadAsync(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings,System.Threading.CancellationToken)">
            <summary>
            从<see cref="T:Newtonsoft.Json.Linq.JArray"/>中异步加载一个<see cref="T:Newtonsoft.Json.JsonReader"/>。 
            </summary>
            <param name="reader">一个<see cref="T:Newtonsoft.Json.JsonReader"/>, 将被读取的内容的<see cref="T:Newtonsoft.Json.Linq.JArray"/>。</param>
            <param name="settings"><see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings"/>用来装载 JSON。
            如果此 <c> 为 null </c>, 则将使用默认加载设置。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>表示异步负载的<see cref="T:System.Threading.Tasks.Task`1"/>。<see cref="P:System.Threading.Tasks.Task`1.Result"/>属性包含从指定<see cref="T:Newtonsoft.Json.JsonReader"/>读取的 JSON。</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JArray.ChildrenTokens">
            <summary>
            获取容器的子标记。
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JArray.Type">
            <summary>
            获取此<see cref="T:Newtonsoft.Json.Linq.JToken"/>的节点类型。
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.#ctor">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.Linq.JArray"/>类的新实例。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(Newtonsoft.Json.Linq.JArray)">
            <summary>
            从另一个<see cref="T:Newtonsoft.Json.Linq.JArray"/>对象初始化<see cref="T:Newtonsoft.Json.Linq.JArray"/>类的一个新实例。
            </summary>
            <param name="other">要复制的<see cref="T:Newtonsoft.Json.Linq.JArray"/>物体。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(System.Object[])">
            <summary>
            初始化具有指定内容的<see cref="T:Newtonsoft.Json.Linq.JArray"/>类的新实例。
            </summary>
            <param name="content">数组的内容。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(System.Object)">
            <summary>
            初始化具有指定内容的<see cref="T:Newtonsoft.Json.Linq.JArray"/>类的新实例。
            </summary>
            <param name="content">数组的内容。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Load(Newtonsoft.Json.JsonReader)">
            <summary>
            从<see cref="T:Newtonsoft.Json.Linq.JArray"/>中装载一个<see cref="T:Newtonsoft.Json.JsonReader"/>。 
            </summary>
            <param name="reader">一个<see cref="T:Newtonsoft.Json.JsonReader"/>, 将被读取的内容的<see cref="T:Newtonsoft.Json.Linq.JArray"/>。</param>
            <returns>包含从指定<see cref="T:Newtonsoft.Json.Linq.JArray"/>读取的 JSON 的<see cref="T:Newtonsoft.Json.JsonReader"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Load(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            从<see cref="T:Newtonsoft.Json.Linq.JArray"/>中装载一个<see cref="T:Newtonsoft.Json.JsonReader"/>。 
            </summary>
            <param name="reader">一个<see cref="T:Newtonsoft.Json.JsonReader"/>, 将被读取的内容的<see cref="T:Newtonsoft.Json.Linq.JArray"/>。</param>
            <param name="settings"><see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings"/>用来装载 JSON。
            如果此 <c> 为 null </c>, 则将使用默认加载设置。</param>
            <returns>包含从指定<see cref="T:Newtonsoft.Json.Linq.JArray"/>读取的 JSON 的<see cref="T:Newtonsoft.Json.JsonReader"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Parse(System.String)">
            <summary>
            从包含 JSON 的字符串加载<see cref="T:Newtonsoft.Json.Linq.JArray"/>。
            </summary>
            <param name="json">一个包含 JSON 的<see cref="T:System.String"/>。</param>
            <returns>从包含 JSON 的字符串填充的<see cref="T:Newtonsoft.Json.Linq.JArray"/>。</returns>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" />
            </example>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Parse(System.String,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            从包含 JSON 的字符串加载<see cref="T:Newtonsoft.Json.Linq.JArray"/>。
            </summary>
            <param name="json">一个包含 JSON 的<see cref="T:System.String"/>。</param>
            <param name="settings"><see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings"/>用来装载 JSON。
            如果此 <c> 为 null </c>, 则将使用默认加载设置。</param>
            <returns>从包含 JSON 的字符串填充的<see cref="T:Newtonsoft.Json.Linq.JArray"/>。</returns>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" />
            </example>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.FromObject(System.Object)">
            <summary>
            从对象创建<see cref="T:Newtonsoft.Json.Linq.JArray"/>。
            </summary>
            <param name="o">将用于创建<see cref="T:Newtonsoft.Json.Linq.JArray"/>的对象。</param>
            <returns>具有指定对象的值的<see cref="T:Newtonsoft.Json.Linq.JArray"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            从对象创建<see cref="T:Newtonsoft.Json.Linq.JArray"/>。
            </summary>
            <param name="o">将用于创建<see cref="T:Newtonsoft.Json.Linq.JArray"/>的对象。</param>
            <param name="jsonSerializer">将用于读取对象的<see cref="T:Newtonsoft.Json.JsonSerializer"/>。</param>
            <returns>具有指定对象的值的<see cref="T:Newtonsoft.Json.Linq.JArray"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
            <summary>
            将此标记写入<see cref="T:Newtonsoft.Json.JsonWriter"/>。
            </summary>
            <param name="writer">这个方法将写入的<see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="converters">将在书写令牌时使用的<see cref="T:Newtonsoft.Json.JsonConverter"/>集合。</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JArray.Item(System.Object)">
            <summary>
            获取具有指定键的<see cref="T:Newtonsoft.Json.Linq.JToken"/>。
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Linq.JToken"/> with the specified key.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JArray.Item(System.Int32)">
            <summary>
            获取或设置位于指定索引处的<see cref="T:Newtonsoft.Json.Linq.JToken"/>。
            </summary>
            <value></value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.IndexOf(Newtonsoft.Json.Linq.JToken)">
            <summary>
            确定<see cref="T:Newtonsoft.Json.Linq.JArray"/>中特定项目的索引。
            </summary>
            <param name="item">要定位在<see cref="T:Newtonsoft.Json.Linq.JArray"/>中的物体。</param>
            <returns>
            在列表中找到的<paramref name="item"/>指数;否则,-1。
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Insert(System.Int32,Newtonsoft.Json.Linq.JToken)">
            <summary>
            在指定的索引处将项目插入到<see cref="T:Newtonsoft.Json.Linq.JArray"/>中。
            </summary>
            <param name="index">从零开始的索引, 应在哪个<paramref name="item"/>插入。</param>
            <param name="item">要插入<see cref="T:Newtonsoft.Json.Linq.JArray"/>的对象。</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/>在<see cref="T:Newtonsoft.Json.Linq.JArray"/>中不是一个有效的指数。
            </exception>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.RemoveAt(System.Int32)">
            <summary>
            删除指定索引处的<see cref="T:Newtonsoft.Json.Linq.JArray"/>项。
            </summary>
            <param name="index">要移除的项的从零开始的索引。</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/>在<see cref="T:Newtonsoft.Json.Linq.JArray"/>中不是一个有效的指数。
            </exception>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.GetEnumerator">
            <summary>
            返回遍历集合的枚举器。
            </summary>
            <returns>
            一个<see cref="T:System.Collections.Generic.IEnumerator`1"/>, 可以用来遍历集合。
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Add(Newtonsoft.Json.Linq.JToken)">
            <summary>
            将项目添加到<see cref="T:Newtonsoft.Json.Linq.JArray"/>中。
            </summary>
            <param name="item">要添加到<see cref="T:Newtonsoft.Json.Linq.JArray"/>中的对象。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Clear">
            <summary>
            从<see cref="T:Newtonsoft.Json.Linq.JArray"/>中删除所有项目。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Contains(Newtonsoft.Json.Linq.JToken)">
            <summary>
            确定<see cref="T:Newtonsoft.Json.Linq.JArray"/>是否包含特定值。
            </summary>
            <param name="item">要定位在<see cref="T:Newtonsoft.Json.Linq.JArray"/>中的物体。</param>
            <returns>
            如果<paramref name="item"/>在<see cref="T:Newtonsoft.Json.Linq.JArray"/>中被发现, <c> 真实的 </c>;否则, <c> 虚假的 </c>。
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.CopyTo(Newtonsoft.Json.Linq.JToken[],System.Int32)">
            <summary>
            将<see cref="T:Newtonsoft.Json.Linq.JArray"/>的元素复制到一个阵列, 从一个特定的阵列索引开始。
            </summary>
            <param name="array">数组。</param>
            <param name="arrayIndex">数组的索引。</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JArray.IsReadOnly">
            <summary>
            获取一个值, 该值指示<see cref="T:Newtonsoft.Json.Linq.JArray"/>是否为只读。
            </summary>
            <returns>如果<see cref="T:Newtonsoft.Json.Linq.JArray"/>是只读的, <c> 真正的 </c>; 如果<see cref="T:Newtonsoft.Json.Linq.JArray"/>是只读的, 的。否则, <c> 虚假的 </c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Remove(Newtonsoft.Json.Linq.JToken)">
            <summary>
            从<see cref="T:Newtonsoft.Json.Linq.JArray"/>中删除特定对象的第一个匹配项。
            </summary>
            <param name="item">要从<see cref="T:Newtonsoft.Json.Linq.JArray"/>中移除的物体。</param>
            <returns>
            如果<paramref name="item"/>被成功地从<see cref="T:Newtonsoft.Json.Linq.JArray"/>中移除, <c> 真正的 </c>;否则, <c> 虚假的 </c>。如果在原始<paramref name="item"/>中找不到<see cref="T:Newtonsoft.Json.Linq.JArray"/>, 此方法也会返回 <c> 假 </c>。
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JConstructor">
            <summary>
            表示 JSON 构造函数。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.WriteToAsync(Newtonsoft.Json.JsonWriter,System.Threading.CancellationToken,Newtonsoft.Json.JsonConverter[])">
            <summary>
            异步将此令牌写入<see cref="T:Newtonsoft.Json.JsonWriter"/>。
            </summary>
            <param name="writer">这个方法将写入的<see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="cancellationToken">要监视取消请求的标记。</param>
            <param name="converters">将在书写令牌时使用的<see cref="T:Newtonsoft.Json.JsonConverter"/>集合。</param>
            <returns>一个表示异步写入操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.LoadAsync(Newtonsoft.Json.JsonReader,System.Threading.CancellationToken)">
            <summary>
            从<see cref="T:Newtonsoft.Json.Linq.JConstructor"/>中异步加载一个<see cref="T:Newtonsoft.Json.JsonReader"/>。
            </summary>
            <param name="reader">一个<see cref="T:Newtonsoft.Json.JsonReader"/>, 将被读取的内容的<see cref="T:Newtonsoft.Json.Linq.JConstructor"/>。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>
            一个代表异步负载的<see cref="T:System.Threading.Tasks.Task`1"/>。<see cref="P:System.Threading.Tasks.Task`1.Result"/>
            属性返回一个包含从指定<see cref="T:Newtonsoft.Json.Linq.JConstructor"/>读取的 JSON 的<see cref="T:Newtonsoft.Json.JsonReader"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.LoadAsync(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings,System.Threading.CancellationToken)">
            <summary>
            从<see cref="T:Newtonsoft.Json.Linq.JConstructor"/>中异步加载一个<see cref="T:Newtonsoft.Json.JsonReader"/>。
            </summary>
            <param name="reader">一个<see cref="T:Newtonsoft.Json.JsonReader"/>, 将被读取的内容的<see cref="T:Newtonsoft.Json.Linq.JConstructor"/>。</param>
            <param name="settings"><see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings"/>用来装载 JSON。
            如果此 <c> 为 null </c>, 则将使用默认加载设置。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>
            一个代表异步负载的<see cref="T:System.Threading.Tasks.Task`1"/>。<see cref="P:System.Threading.Tasks.Task`1.Result"/>
            属性返回一个包含从指定<see cref="T:Newtonsoft.Json.Linq.JConstructor"/>读取的 JSON 的<see cref="T:Newtonsoft.Json.JsonReader"/>。</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JConstructor.ChildrenTokens">
            <summary>
            获取容器的子标记。
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JConstructor.Name">
            <summary>
            获取或设置此构造函数的名称。
            </summary>
            <value>The constructor name.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JConstructor.Type">
            <summary>
            获取此<see cref="T:Newtonsoft.Json.Linq.JToken"/>的节点类型。
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.Linq.JConstructor"/>类的新实例。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(Newtonsoft.Json.Linq.JConstructor)">
            <summary>
            从另一个<see cref="T:Newtonsoft.Json.Linq.JConstructor"/>对象初始化<see cref="T:Newtonsoft.Json.Linq.JConstructor"/>类的一个新实例。
            </summary>
            <param name="other">要复制的<see cref="T:Newtonsoft.Json.Linq.JConstructor"/>物体。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String,System.Object[])">
            <summary>
            初始化具有指定名称和内容的<see cref="T:Newtonsoft.Json.Linq.JConstructor"/>类的新实例。
            </summary>
            <param name="name">构造函数名称。</param>
            <param name="content">构造函数的内容。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String,System.Object)">
            <summary>
            初始化具有指定名称和内容的<see cref="T:Newtonsoft.Json.Linq.JConstructor"/>类的新实例。
            </summary>
            <param name="name">构造函数名称。</param>
            <param name="content">构造函数的内容。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String)">
            <summary>
            初始化具有指定名称的<see cref="T:Newtonsoft.Json.Linq.JConstructor"/>类的新实例。
            </summary>
            <param name="name">构造函数名称。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
            <summary>
            将此标记写入<see cref="T:Newtonsoft.Json.JsonWriter"/>。
            </summary>
            <param name="writer">这个方法将写入的<see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="converters">将在书写令牌时使用的<see cref="T:Newtonsoft.Json.JsonConverter"/>集合。</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JConstructor.Item(System.Object)">
            <summary>
            获取具有指定键的<see cref="T:Newtonsoft.Json.Linq.JToken"/>。
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Linq.JToken"/> with the specified key.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.Load(Newtonsoft.Json.JsonReader)">
            <summary>
            从<see cref="T:Newtonsoft.Json.Linq.JConstructor"/>中加载一个<see cref="T:Newtonsoft.Json.JsonReader"/>。
            </summary>
            <param name="reader">一个<see cref="T:Newtonsoft.Json.JsonReader"/>, 将被读取的内容的<see cref="T:Newtonsoft.Json.Linq.JConstructor"/>。</param>
            <returns>包含从指定<see cref="T:Newtonsoft.Json.Linq.JConstructor"/>读取的 JSON 的<see cref="T:Newtonsoft.Json.JsonReader"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.Load(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            从<see cref="T:Newtonsoft.Json.Linq.JConstructor"/>中加载一个<see cref="T:Newtonsoft.Json.JsonReader"/>。
            </summary>
            <param name="reader">一个<see cref="T:Newtonsoft.Json.JsonReader"/>, 将被读取的内容的<see cref="T:Newtonsoft.Json.Linq.JConstructor"/>。</param>
            <param name="settings"><see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings"/>用来装载 JSON。
            如果此 <c> 为 null </c>, 则将使用默认加载设置。</param>
            <returns>包含从指定<see cref="T:Newtonsoft.Json.Linq.JConstructor"/>读取的 JSON 的<see cref="T:Newtonsoft.Json.JsonReader"/>。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JContainer">
            <summary>
            表示可以包含其他令牌的令牌。
            </summary>
        </member>
        <member name="E:Newtonsoft.Json.Linq.JContainer.ListChanged">
            <summary>
            当列表更改或列表中的项更改时发生。
            </summary>
        </member>
        <member name="E:Newtonsoft.Json.Linq.JContainer.AddingNew">
            <summary>
            在将项添加到集合之前发生。
            </summary>
        </member>
        <member name="E:Newtonsoft.Json.Linq.JContainer.CollectionChanged">
            <summary>
            在集合的项列表已更改或集合被重置时发生。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JContainer.ChildrenTokens">
            <summary>
            获取容器的子标记。
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.OnAddingNew(System.ComponentModel.AddingNewEventArgs)">
            <summary>
            引发<see cref="E:Newtonsoft.Json.Linq.JContainer.AddingNew"/>事件。
            </summary>
            <param name="e">包含事件数据的<see cref="T:System.ComponentModel.AddingNewEventArgs"/>实例。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            引发<see cref="E:Newtonsoft.Json.Linq.JContainer.ListChanged"/>事件。
            </summary>
            <param name="e">包含事件数据的<see cref="T:System.ComponentModel.ListChangedEventArgs"/>实例。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            引发<see cref="E:Newtonsoft.Json.Linq.JContainer.CollectionChanged"/>事件。
            </summary>
            <param name="e">包含事件数据的<see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/>实例。</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JContainer.HasValues">
            <summary>
            获取一个值, 该值指示此令牌是否具有子令牌。
            </summary>
            <value>
            	<c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JContainer.First">
            <summary>
            获取此令牌的第一个子令牌。
            </summary>
            <value>
            A <see cref="T:Newtonsoft.Json.Linq.JToken"/> containing the first child token of the <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JContainer.Last">
            <summary>
            获取此令牌的最后一个子标记。
            </summary>
            <value>
            A <see cref="T:Newtonsoft.Json.Linq.JToken"/> containing the last child token of the <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.Children">
            <summary>
            按文档顺序返回此令牌的子令牌的集合。
            </summary>
            <returns>
            一个<see cref="T:System.Collections.Generic.IEnumerable`1"/>, 按照文献顺序, 包含这个<see cref="T:Newtonsoft.Json.Linq.JToken"/>的儿童令牌。
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.Values``1">
            <summary>
            按文档顺序返回此令牌的子值的集合。
            </summary>
            <typeparam name="T">要将值转换为的类型。</typeparam>
            <returns>
            一个<see cref="T:System.Collections.Generic.IEnumerable`1"/>, 包含这个<see cref="T:Newtonsoft.Json.Linq.JToken"/>的子值, 按文件顺序。
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.Descendants">
            <summary>
            按文档顺序返回此令牌的后代令牌的集合。
            </summary>
            <returns>包含<see cref="T:System.Collections.Generic.IEnumerable`1"/>后代标记的<see cref="T:Newtonsoft.Json.Linq.JToken"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.DescendantsAndSelf">
            <summary>
            返回包含此令牌的令牌的集合, 以及此令牌的所有后代令牌的文档顺序。
            </summary>
            <returns>包含这个令牌的<see cref="T:System.Collections.Generic.IEnumerable`1"/>, 以及<see cref="T:Newtonsoft.Json.Linq.JToken"/>的所有后代令牌。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.Add(System.Object)">
            <summary>
            将指定的内容添加为此<see cref="T:Newtonsoft.Json.Linq.JToken"/>的子级。
            </summary>
            <param name="content">要添加的内容。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.AddFirst(System.Object)">
            <summary>
            将指定的内容添加为这个<see cref="T:Newtonsoft.Json.Linq.JToken"/>的第一个子级。
            </summary>
            <param name="content">要添加的内容。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.CreateWriter">
            <summary>
            创建一个可用于向<see cref="T:Newtonsoft.Json.JsonWriter"/>添加令牌的<see cref="T:Newtonsoft.Json.Linq.JToken"/>。
            </summary>
            <returns>一个准备好写内容的<see cref="T:Newtonsoft.Json.JsonWriter"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.ReplaceAll(System.Object)">
            <summary>
            用指定的内容替换此令牌的子节点。
            </summary>
            <param name="content">内容。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.RemoveAll">
            <summary>
            从此令牌中删除子节点。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.Merge(System.Object)">
            <summary>
            将指定的内容合并到这个<see cref="T:Newtonsoft.Json.Linq.JToken"/>中。
            </summary>
            <param name="content">要合并的内容。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.Merge(System.Object,Newtonsoft.Json.Linq.JsonMergeSettings)">
            <summary>
            使用<see cref="T:Newtonsoft.Json.Linq.JToken"/>将指定的内容合并到这个<see cref="T:Newtonsoft.Json.Linq.JsonMergeSettings"/>中。
            </summary>
            <param name="content">要合并的内容。</param>
            <param name="settings">用来合并内容的<see cref="T:Newtonsoft.Json.Linq.JsonMergeSettings"/>。</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JContainer.Count">
            <summary>
            获取子 JSON 标记的计数。
            </summary>
            <value>The count of child JSON tokens.</value>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JEnumerable`1">
            <summary>
            表示<see cref="T:Newtonsoft.Json.Linq.JToken"/>对象的集合。
            </summary>
            <typeparam name="T">令牌的类型。</typeparam>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JEnumerable`1.Empty">
            <summary>
            <see cref="T:Newtonsoft.Json.Linq.JToken"/>物体的空集合。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.Linq.JEnumerable`1"/>结构的一个新实例。
            </summary>
            <param name="enumerable">可枚举。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.GetEnumerator">
            <summary>
            返回可用于循环访问集合的枚举器。
            </summary>
            <returns>
            一个<see cref="T:System.Collections.Generic.IEnumerator`1"/>, 可以用来遍历集合。
            </returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JEnumerable`1.Item(System.Object)">
            <summary>
            获取具有指定键的<see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1"/>。
            </summary>
            <value></value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.Equals(Newtonsoft.Json.Linq.JEnumerable{`0})">
            <summary>
            确定指定的<see cref="T:Newtonsoft.Json.Linq.JEnumerable`1"/>是否等于此实例。
            </summary>
            <param name="other">要与此实例进行比较的<see cref="T:Newtonsoft.Json.Linq.JEnumerable`1"/>。</param>
            <returns>
            	如果指定的<see cref="T:Newtonsoft.Json.Linq.JEnumerable`1"/>与此实例相等, <c> 真实 </c>; 如果指定的<see cref="T:Newtonsoft.Json.Linq.JEnumerable`1"/>等于此实例, 则真实的。否则, <c> 虚假的 </c>。
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.Equals(System.Object)">
            <summary>
            确定指定的<see cref="T:System.Object"/>是否等于此实例。
            </summary>
            <param name="obj">要与此实例进行比较的<see cref="T:System.Object"/>。</param>
            <returns>
            	如果指定的<see cref="T:System.Object"/>与此实例相等, <c> 真实 </c>; 如果指定的<see cref="T:System.Object"/>等于此实例, 则真实的。否则, <c> 虚假的 </c>。
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.GetHashCode">
            <summary>
            返回此实例的哈希代码。
            </summary>
            <returns>
            此实例的哈希代码, 适用于哈希算法和数据结构 (如哈希表)。 
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JObject">
            <summary>
            表示 JSON 对象。
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" />
            </example>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.WriteToAsync(Newtonsoft.Json.JsonWriter,System.Threading.CancellationToken,Newtonsoft.Json.JsonConverter[])">
            <summary>
            异步将此令牌写入<see cref="T:Newtonsoft.Json.JsonWriter"/>。
            </summary>
            <param name="writer">这个方法将写入的<see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="cancellationToken">要监视取消请求的标记。</param>
            <param name="converters">将在书写令牌时使用的<see cref="T:Newtonsoft.Json.JsonConverter"/>集合。</param>
            <returns>一个表示异步写入操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.LoadAsync(Newtonsoft.Json.JsonReader,System.Threading.CancellationToken)">
            <summary>
            从<see cref="T:Newtonsoft.Json.Linq.JObject"/>中异步加载一个<see cref="T:Newtonsoft.Json.JsonReader"/>。
            </summary>
            <param name="reader">一个<see cref="T:Newtonsoft.Json.JsonReader"/>, 将被读取的内容的<see cref="T:Newtonsoft.Json.Linq.JObject"/>。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>
            一个代表异步负载的<see cref="T:System.Threading.Tasks.Task`1"/>。<see cref="P:System.Threading.Tasks.Task`1.Result"/>
            属性返回一个包含从指定<see cref="T:Newtonsoft.Json.Linq.JObject"/>读取的 JSON 的<see cref="T:Newtonsoft.Json.JsonReader"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.LoadAsync(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings,System.Threading.CancellationToken)">
            <summary>
            从<see cref="T:Newtonsoft.Json.Linq.JObject"/>中异步加载一个<see cref="T:Newtonsoft.Json.JsonReader"/>。
            </summary>
            <param name="reader">一个<see cref="T:Newtonsoft.Json.JsonReader"/>, 将被读取的内容的<see cref="T:Newtonsoft.Json.Linq.JObject"/>。</param>
            <param name="settings"><see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings"/>用来装载 JSON。
            如果此 <c> 为 null </c>, 则将使用默认加载设置。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>
            一个代表异步负载的<see cref="T:System.Threading.Tasks.Task`1"/>。<see cref="P:System.Threading.Tasks.Task`1.Result"/>
            属性返回一个包含从指定<see cref="T:Newtonsoft.Json.Linq.JObject"/>读取的 JSON 的<see cref="T:Newtonsoft.Json.JsonReader"/>。</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JObject.ChildrenTokens">
            <summary>
            获取容器的子标记。
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="E:Newtonsoft.Json.Linq.JObject.PropertyChanged">
            <summary>
            在属性值更改时发生。
            </summary>
        </member>
        <member name="E:Newtonsoft.Json.Linq.JObject.PropertyChanging">
            <summary>
            在属性值更改时发生。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.#ctor">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.Linq.JObject"/>类的新实例。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(Newtonsoft.Json.Linq.JObject)">
            <summary>
            从另一个<see cref="T:Newtonsoft.Json.Linq.JObject"/>对象初始化<see cref="T:Newtonsoft.Json.Linq.JObject"/>类的一个新实例。
            </summary>
            <param name="other">要复制的<see cref="T:Newtonsoft.Json.Linq.JObject"/>物体。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(System.Object[])">
            <summary>
            初始化具有指定内容的<see cref="T:Newtonsoft.Json.Linq.JObject"/>类的新实例。
            </summary>
            <param name="content">对象的内容。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(System.Object)">
            <summary>
            初始化具有指定内容的<see cref="T:Newtonsoft.Json.Linq.JObject"/>类的新实例。
            </summary>
            <param name="content">对象的内容。</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JObject.Type">
            <summary>
            获取此<see cref="T:Newtonsoft.Json.Linq.JToken"/>的节点类型。
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Properties">
            <summary>
            获取这个物体的属性的<see cref="T:System.Collections.Generic.IEnumerable`1"/>。
            </summary>
            <returns>这个物体的性质的<see cref="T:System.Collections.Generic.IEnumerable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Property(System.String)">
            <summary>
            获取指定名称的<see cref="T:Newtonsoft.Json.Linq.JProperty"/>。
            </summary>
            <param name="name">属性名称。</param>
            <returns>具有指定名称或 <c> 空 </c> 的<see cref="T:Newtonsoft.Json.Linq.JProperty"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.PropertyValues">
            <summary>
            获取此对象的属性值的<see cref="T:Newtonsoft.Json.Linq.JEnumerable`1"/>。
            </summary>
            <returns>这个物体的属性值的<see cref="T:Newtonsoft.Json.Linq.JEnumerable`1"/>。</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JObject.Item(System.Object)">
            <summary>
            获取具有指定键的<see cref="T:Newtonsoft.Json.Linq.JToken"/>。
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Linq.JToken"/> with the specified key.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JObject.Item(System.String)">
            <summary>
            获取或设置具有指定属性名称的<see cref="T:Newtonsoft.Json.Linq.JToken"/>。
            </summary>
            <value></value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Load(Newtonsoft.Json.JsonReader)">
            <summary>
            从<see cref="T:Newtonsoft.Json.Linq.JObject"/>中加载一个<see cref="T:Newtonsoft.Json.JsonReader"/>。
            </summary>
            <param name="reader">一个<see cref="T:Newtonsoft.Json.JsonReader"/>, 将被读取的内容的<see cref="T:Newtonsoft.Json.Linq.JObject"/>。</param>
            <returns>包含从指定<see cref="T:Newtonsoft.Json.Linq.JObject"/>读取的 JSON 的<see cref="T:Newtonsoft.Json.JsonReader"/>。</returns>
            <exception cref="T:Newtonsoft.Json.JsonReaderException">
                <paramref name="reader"/>是无效的 JSON。
            </exception>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Load(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            从<see cref="T:Newtonsoft.Json.Linq.JObject"/>中加载一个<see cref="T:Newtonsoft.Json.JsonReader"/>。
            </summary>
            <param name="reader">一个<see cref="T:Newtonsoft.Json.JsonReader"/>, 将被读取的内容的<see cref="T:Newtonsoft.Json.Linq.JObject"/>。</param>
            <param name="settings"><see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings"/>用来装载 JSON。
            如果此 <c> 为 null </c>, 则将使用默认加载设置。</param>
            <returns>包含从指定<see cref="T:Newtonsoft.Json.Linq.JObject"/>读取的 JSON 的<see cref="T:Newtonsoft.Json.JsonReader"/>。</returns>
            <exception cref="T:Newtonsoft.Json.JsonReaderException">
                <paramref name="reader"/>是无效的 JSON。
            </exception>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Parse(System.String)">
            <summary>
            从包含 JSON 的字符串加载<see cref="T:Newtonsoft.Json.Linq.JObject"/>。
            </summary>
            <param name="json">一个包含 JSON 的<see cref="T:System.String"/>。</param>
            <returns>从包含 JSON 的字符串填充的<see cref="T:Newtonsoft.Json.Linq.JObject"/>。</returns>
            <exception cref="T:Newtonsoft.Json.JsonReaderException">
                <paramref name="json"/>是无效的 JSON。
            </exception>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" />
            </example>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Parse(System.String,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            从包含 JSON 的字符串加载<see cref="T:Newtonsoft.Json.Linq.JObject"/>。
            </summary>
            <param name="json">一个包含 JSON 的<see cref="T:System.String"/>。</param>
            <param name="settings"><see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings"/>用来装载 JSON。
            如果此 <c> 为 null </c>, 则将使用默认加载设置。</param>
            <returns>从包含 JSON 的字符串填充的<see cref="T:Newtonsoft.Json.Linq.JObject"/>。</returns>
            <exception cref="T:Newtonsoft.Json.JsonReaderException">
                <paramref name="json"/>是无效的 JSON。
            </exception>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" />
            </example>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.FromObject(System.Object)">
            <summary>
            从对象创建<see cref="T:Newtonsoft.Json.Linq.JObject"/>。
            </summary>
            <param name="o">将用于创建<see cref="T:Newtonsoft.Json.Linq.JObject"/>的对象。</param>
            <returns>具有指定对象的值的<see cref="T:Newtonsoft.Json.Linq.JObject"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            从对象创建<see cref="T:Newtonsoft.Json.Linq.JObject"/>。
            </summary>
            <param name="o">将用于创建<see cref="T:Newtonsoft.Json.Linq.JObject"/>的对象。</param>
            <param name="jsonSerializer">将用于读取对象的<see cref="T:Newtonsoft.Json.JsonSerializer"/>。</param>
            <returns>具有指定对象的值的<see cref="T:Newtonsoft.Json.Linq.JObject"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
            <summary>
            将此标记写入<see cref="T:Newtonsoft.Json.JsonWriter"/>。
            </summary>
            <param name="writer">这个方法将写入的<see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="converters">将在书写令牌时使用的<see cref="T:Newtonsoft.Json.JsonConverter"/>集合。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.GetValue(System.String)">
            <summary>
            获取具有指定属性名称的<see cref="T:Newtonsoft.Json.Linq.JToken"/>。
            </summary>
            <param name="propertyName">属性的名称。</param>
            <returns>具有指定属性名称的<see cref="T:Newtonsoft.Json.Linq.JToken"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.GetValue(System.String,System.StringComparison)">
            <summary>
            获取具有指定属性名称的<see cref="T:Newtonsoft.Json.Linq.JToken"/>。
            将首先搜索确切的属性名称, 如果找不到匹配的属性, 则
            <see cref="T:System.StringComparison"/>将被用来匹配一个属性。
            </summary>
            <param name="propertyName">属性的名称。</param>
            <param name="comparison">指定如何比较字符串的枚举值之一。</param>
            <returns>具有指定属性名称的<see cref="T:Newtonsoft.Json.Linq.JToken"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.TryGetValue(System.String,System.StringComparison,Newtonsoft.Json.Linq.JToken@)">
            <summary>
            尝试获取具有指定属性名称的<see cref="T:Newtonsoft.Json.Linq.JToken"/>。
            将首先搜索确切的属性名称, 如果找不到匹配的属性, 则
            <see cref="T:System.StringComparison"/>将被用来匹配一个属性。
            </summary>
            <param name="propertyName">属性的名称。</param>
            <param name="value">值。</param>
            <param name="comparison">指定如何比较字符串的枚举值之一。</param>
            <returns>如果成功检索值, 则 <c> true </c>; 如果成功检索值, 则否则, <c> 虚假的 </c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Add(System.String,Newtonsoft.Json.Linq.JToken)">
            <summary>
            添加指定的属性名称。
            </summary>
            <param name="propertyName">属性的名称。</param>
            <param name="value">值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.ContainsKey(System.String)">
            <summary>
            确定 JSON 对象是否具有指定的属性名称。
            </summary>
            <param name="propertyName">属性的名称。</param>
            <returns>如果 JSON 对象具有指定的属性名称, 则 <c> true </c>; 如果 JSON 对象具有指定的属性名称, 则为 true。否则, <c> 虚假的 </c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Remove(System.String)">
            <summary>
            删除具有指定名称的属性。
            </summary>
            <param name="propertyName">属性的名称。</param>
            <returns>如果项目已成功删除, 则 <c> 真正的 </c>; 如果项目已成功删除, 则真正的。否则, <c> 虚假的 </c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.TryGetValue(System.String,Newtonsoft.Json.Linq.JToken@)">
            <summary>
            尝试获取具有指定属性名称的<see cref="T:Newtonsoft.Json.Linq.JToken"/>。
            </summary>
            <param name="propertyName">属性的名称。</param>
            <param name="value">值。</param>
            <returns>如果成功检索值, 则 <c> true </c>; 如果成功检索值, 则否则, <c> 虚假的 </c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.GetEnumerator">
            <summary>
            返回可用于循环访问集合的枚举器。
            </summary>
            <returns>
            一个<see cref="T:System.Collections.Generic.IEnumerator`1"/>, 可以用来遍历集合。
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.OnPropertyChanged(System.String)">
            <summary>
            用提供的参数引发<see cref="E:Newtonsoft.Json.Linq.JObject.PropertyChanged"/>事件。
            </summary>
            <param name="propertyName">属性的名称。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.OnPropertyChanging(System.String)">
            <summary>
            用提供的参数引发<see cref="E:Newtonsoft.Json.Linq.JObject.PropertyChanging"/>事件。
            </summary>
            <param name="propertyName">属性的名称。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            返回负责对该对象执行绑定操作的<see cref="T:System.Dynamic.DynamicMetaObject"/>。
            </summary>
            <param name="parameter">运行时值的表达式树表示形式。</param>
            <returns>
            将这个物体结合在一起的<see cref="T:System.Dynamic.DynamicMetaObject"/>。
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JProperty">
            <summary>
            表示 JSON 属性。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JProperty.WriteToAsync(Newtonsoft.Json.JsonWriter,System.Threading.CancellationToken,Newtonsoft.Json.JsonConverter[])">
            <summary>
            异步将此令牌写入<see cref="T:Newtonsoft.Json.JsonWriter"/>。
            </summary>
            <param name="writer">这个方法将写入的<see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="cancellationToken">要监视取消请求的标记。</param>
            <param name="converters">将在书写令牌时使用的<see cref="T:Newtonsoft.Json.JsonConverter"/>集合。</param>
            <returns>一个表示异步写入操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JProperty.LoadAsync(Newtonsoft.Json.JsonReader,System.Threading.CancellationToken)">
            <summary>
            从<see cref="T:Newtonsoft.Json.Linq.JProperty"/>中异步加载一个<see cref="T:Newtonsoft.Json.JsonReader"/>。
            </summary>
            <param name="reader">一个<see cref="T:Newtonsoft.Json.JsonReader"/>, 将被读取的内容的<see cref="T:Newtonsoft.Json.Linq.JProperty"/>。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个<see cref="T:System.Threading.Tasks.Task`1"/>, 代表异步造物。<see cref="P:System.Threading.Tasks.Task`1.Result"/>
            属性返回一个包含从指定<see cref="T:Newtonsoft.Json.Linq.JProperty"/>读取的 JSON 的<see cref="T:Newtonsoft.Json.JsonReader"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JProperty.LoadAsync(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings,System.Threading.CancellationToken)">
            <summary>
            从<see cref="T:Newtonsoft.Json.Linq.JProperty"/>中异步加载一个<see cref="T:Newtonsoft.Json.JsonReader"/>。
            </summary>
            <param name="reader">一个<see cref="T:Newtonsoft.Json.JsonReader"/>, 将被读取的内容的<see cref="T:Newtonsoft.Json.Linq.JProperty"/>。</param>
            <param name="settings"><see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings"/>用来装载 JSON。
            如果此 <c> 为 null </c>, 则将使用默认加载设置。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个<see cref="T:System.Threading.Tasks.Task`1"/>, 代表异步造物。<see cref="P:System.Threading.Tasks.Task`1.Result"/>
            属性返回一个包含从指定<see cref="T:Newtonsoft.Json.Linq.JProperty"/>读取的 JSON 的<see cref="T:Newtonsoft.Json.JsonReader"/>。</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JProperty.ChildrenTokens">
            <summary>
            获取容器的子标记。
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JProperty.Name">
            <summary>
            获取属性名称。
            </summary>
            <value>The property name.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JProperty.Value">
            <summary>
            获取或设置属性值。
            </summary>
            <value>The property value.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(Newtonsoft.Json.Linq.JProperty)">
            <summary>
            从另一个<see cref="T:Newtonsoft.Json.Linq.JProperty"/>对象初始化<see cref="T:Newtonsoft.Json.Linq.JProperty"/>类的一个新实例。
            </summary>
            <param name="other">要复制的<see cref="T:Newtonsoft.Json.Linq.JProperty"/>物体。</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JProperty.Type">
            <summary>
            获取此<see cref="T:Newtonsoft.Json.Linq.JToken"/>的节点类型。
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(System.String,System.Object[])">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.Linq.JProperty"/>类的新实例。
            </summary>
            <param name="name">属性名称。</param>
            <param name="content">属性内容。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(System.String,System.Object)">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.Linq.JProperty"/>类的新实例。
            </summary>
            <param name="name">属性名称。</param>
            <param name="content">属性内容。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JProperty.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
            <summary>
            将此标记写入<see cref="T:Newtonsoft.Json.JsonWriter"/>。
            </summary>
            <param name="writer">这个方法将写入的<see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="converters">将在书写令牌时使用的<see cref="T:Newtonsoft.Json.JsonConverter"/>集合。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JProperty.Load(Newtonsoft.Json.JsonReader)">
            <summary>
            从<see cref="T:Newtonsoft.Json.Linq.JProperty"/>中加载一个<see cref="T:Newtonsoft.Json.JsonReader"/>。
            </summary>
            <param name="reader">一个<see cref="T:Newtonsoft.Json.JsonReader"/>, 将被读取的内容的<see cref="T:Newtonsoft.Json.Linq.JProperty"/>。</param>
            <returns>包含从指定<see cref="T:Newtonsoft.Json.Linq.JProperty"/>读取的 JSON 的<see cref="T:Newtonsoft.Json.JsonReader"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JProperty.Load(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            从<see cref="T:Newtonsoft.Json.Linq.JProperty"/>中加载一个<see cref="T:Newtonsoft.Json.JsonReader"/>。
            </summary>
            <param name="reader">一个<see cref="T:Newtonsoft.Json.JsonReader"/>, 将被读取的内容的<see cref="T:Newtonsoft.Json.Linq.JProperty"/>。</param>
            <param name="settings"><see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings"/>用来装载 JSON。
            如果此 <c> 为 null </c>, 则将使用默认加载设置。</param>
            <returns>包含从指定<see cref="T:Newtonsoft.Json.Linq.JProperty"/>读取的 JSON 的<see cref="T:Newtonsoft.Json.JsonReader"/>。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JPropertyDescriptor">
            <summary>
            表示<see cref="T:Newtonsoft.Json.Linq.JProperty"/>的视图。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.#ctor(System.String)">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.Linq.JPropertyDescriptor"/>类的新实例。
            </summary>
            <param name="name">的名称。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            在派生类中重写时, 返回重置对象是否更改其值。
            </summary>
            <returns>
            如果重置组件更改其值, <c> 真正的 </c>; 如果重置组件更改其值, 则真实的。否则, <c> 虚假的 </c>。
            </returns>
            <param name="component">要测试重置功能的组件。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.GetValue(System.Object)">
            <summary>
            在派生类中重写时, 获取组件上的属性的当前值。
            </summary>
            <returns>
            给定组件的属性的值。
            </returns>
            <param name="component">具有要为其检索其值的属性的组件。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            在派生类中重写时, 将组件的此属性的值重置为默认值。
            </summary>
            <param name="component">具有要重置为默认值的属性值的组件。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            在派生类中重写时, 将组件的值设置为不同的值。
            </summary>
            <param name="component">具有要设置的属性值的组件。</param>
            <param name="value">新值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            在派生类中重写时, 确定一个值, 该值指示是否需要保留此属性的值。
            </summary>
            <returns>
            如果应保留该属性, 则 <c> 真实 </c>; 如果应保留该属性, 则否则, <c> 虚假的 </c>。
            </returns>
            <param name="component">具有要检查的属性以确保持久性的组件。</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.ComponentType">
            <summary>
            在派生类中重写时, 获取此属性绑定到的组件的类型。
            </summary>
            <returns>
            表示此属性绑定到的组件类型的<see cref="T:System.Type"/>。
            当<see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)"/>或
            <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)"/>
            方法, 指定的对象可能是此类型的实例。
            </returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.IsReadOnly">
            <summary>
            在派生类中重写时, 获取一个值, 指示此属性是否为只读。
            </summary>
            <returns>
            如果属性是只读的, 则 <c> 真实 </c>; 如果属性是只读的, 则真实的。否则, <c> 虚假的 </c>。
            </returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.PropertyType">
            <summary>
            在派生类中重写时, 获取属性的类型。
            </summary>
            <returns>
            一个<see cref="T:System.Type"/>, 表示属性的类型。
            </returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.NameHashCode">
            <summary>
            获取成员名称的哈希代码。
            </summary>
            <value></value>
            <returns>
            成员名称的哈希代码。
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JRaw">
            <summary>
            表示原始 JSON 字符串。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JRaw.CreateAsync(Newtonsoft.Json.JsonReader,System.Threading.CancellationToken)">
            <summary>
            异步创建一个包含读取器当前令牌内容的<see cref="T:Newtonsoft.Json.Linq.JRaw"/>实例。
            </summary>
            <param name="reader">读者。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>一个<see cref="T:System.Threading.Tasks.Task`1"/>, 代表异步造物。<see cref="P:System.Threading.Tasks.Task`1.Result"/>
            属性返回包含读取器当前令牌内容的<see cref="T:Newtonsoft.Json.Linq.JRaw"/>实例。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JRaw.#ctor(Newtonsoft.Json.Linq.JRaw)">
            <summary>
            从另一个<see cref="T:Newtonsoft.Json.Linq.JRaw"/>对象初始化<see cref="T:Newtonsoft.Json.Linq.JRaw"/>类的一个新实例。
            </summary>
            <param name="other">要复制的<see cref="T:Newtonsoft.Json.Linq.JRaw"/>物体。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JRaw.#ctor(System.Object)">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.Linq.JRaw"/>类的新实例。
            </summary>
            <param name="rawJson">生硬的杰森。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JRaw.Create(Newtonsoft.Json.JsonReader)">
            <summary>
            使用读取器的当前令牌的内容创建<see cref="T:Newtonsoft.Json.Linq.JRaw"/>的实例。
            </summary>
            <param name="reader">读者。</param>
            <returns>包含读取器当前令牌内容的<see cref="T:Newtonsoft.Json.Linq.JRaw"/>实例。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JsonLoadSettings">
            <summary>
            指定加载 JSON 时使用的设置。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JsonLoadSettings.#ctor">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings"/>类的新实例。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JsonLoadSettings.CommentHandling">
            <summary>
            获取或设置加载 JSON 时如何处理 JSON 注释。
            </summary>
            <value>The JSON comment handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JsonLoadSettings.LineInfoHandling">
            <summary>
            获取或设置加载 JSON 时如何处理 JSON 行信息。
            </summary>
            <value>The JSON line info handling.</value>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JsonMergeSettings">
            <summary>
            指定合并 JSON 时使用的设置。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JsonMergeSettings.MergeArrayHandling">
            <summary>
            获取或设置合并 JSON 数组时使用的方法。
            </summary>
            <value>The method used when merging JSON arrays.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JsonMergeSettings.MergeNullValueHandling">
            <summary>
            获取或设置空值属性的合并方式。
            </summary>
            <value>How null value properties are merged.</value>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JToken">
            <summary>
            表示抽象的 JSON 令牌。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.WriteToAsync(Newtonsoft.Json.JsonWriter,System.Threading.CancellationToken,Newtonsoft.Json.JsonConverter[])">
            <summary>
            异步将此令牌写入<see cref="T:Newtonsoft.Json.JsonWriter"/>。
            </summary>
            <param name="writer">这个方法将写入的<see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="cancellationToken">要监视取消请求的标记。</param>
            <param name="converters">将在书写令牌时使用的<see cref="T:Newtonsoft.Json.JsonConverter"/>集合。</param>
            <returns>一个表示异步写入操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.WriteToAsync(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
            <summary>
            异步将此令牌写入<see cref="T:Newtonsoft.Json.JsonWriter"/>。
            </summary>
            <param name="writer">这个方法将写入的<see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="converters">将在书写令牌时使用的<see cref="T:Newtonsoft.Json.JsonConverter"/>集合。</param>
            <returns>一个表示异步写入操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ReadFromAsync(Newtonsoft.Json.JsonReader,System.Threading.CancellationToken)">
            <summary>
            从<see cref="T:Newtonsoft.Json.Linq.JToken"/>异步创建一个<see cref="T:Newtonsoft.Json.JsonReader"/>。
            </summary>
            <param name="reader">位于标记处的<see cref="T:Newtonsoft.Json.JsonReader"/>, 读入这个<see cref="T:Newtonsoft.Json.Linq.JToken"/>。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>
            一个代表异步创造的<see cref="T:System.Threading.Tasks.Task`1"/>。中。
            <see cref="P:System.Threading.Tasks.Task`1.Result"/>属性返回一个包含令牌及其后代令牌的<see cref="T:Newtonsoft.Json.Linq.JToken"/>
            从读者的阅读。确定令牌的运行时类型
            读取器中遇到的第一个令牌的令牌类型。
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ReadFromAsync(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings,System.Threading.CancellationToken)">
            <summary>
            从<see cref="T:Newtonsoft.Json.Linq.JToken"/>异步创建一个<see cref="T:Newtonsoft.Json.JsonReader"/>。
            </summary>
            <param name="reader">位于标记处的<see cref="T:Newtonsoft.Json.JsonReader"/>, 读入这个<see cref="T:Newtonsoft.Json.Linq.JToken"/>。</param>
            <param name="settings"><see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings"/>用来装载 JSON。
            如果此 <c> 为 null </c>, 则将使用默认加载设置。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>
            一个代表异步创造的<see cref="T:System.Threading.Tasks.Task`1"/>。中。
            <see cref="P:System.Threading.Tasks.Task`1.Result"/>属性返回一个包含令牌及其后代令牌的<see cref="T:Newtonsoft.Json.Linq.JToken"/>
            从读者的阅读。确定令牌的运行时类型
            读取器中遇到的第一个令牌的令牌类型。
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.LoadAsync(Newtonsoft.Json.JsonReader,System.Threading.CancellationToken)">
            <summary>
            从<see cref="T:Newtonsoft.Json.Linq.JToken"/>异步创建一个<see cref="T:Newtonsoft.Json.JsonReader"/>。
            </summary>
            <param name="reader">位于标记处的<see cref="T:Newtonsoft.Json.JsonReader"/>, 读入这个<see cref="T:Newtonsoft.Json.Linq.JToken"/>。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>
            一个代表异步创造的<see cref="T:System.Threading.Tasks.Task`1"/>。<see cref="P:System.Threading.Tasks.Task`1.Result"/>
            属性返回包含令牌及其后代令牌的<see cref="T:Newtonsoft.Json.Linq.JToken"/>
            从读者的阅读。确定令牌的运行时类型
            读取器中遇到的第一个令牌的令牌类型。
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.LoadAsync(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings,System.Threading.CancellationToken)">
            <summary>
            从<see cref="T:Newtonsoft.Json.Linq.JToken"/>异步创建一个<see cref="T:Newtonsoft.Json.JsonReader"/>。
            </summary>
            <param name="reader">位于标记处的<see cref="T:Newtonsoft.Json.JsonReader"/>, 读入这个<see cref="T:Newtonsoft.Json.Linq.JToken"/>。</param>
            <param name="settings"><see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings"/>用来装载 JSON。
            如果此 <c> 为 null </c>, 则将使用默认加载设置。</param>
            <param name="cancellationToken">要监视取消请求的标记。默认值为<see cref="P:System.Threading.CancellationToken.None"/>。</param>
            <returns>
            一个代表异步创造的<see cref="T:System.Threading.Tasks.Task`1"/>。<see cref="P:System.Threading.Tasks.Task`1.Result"/>
            属性返回包含令牌及其后代令牌的<see cref="T:Newtonsoft.Json.Linq.JToken"/>
            从读者的阅读。确定令牌的运行时类型
            读取器中遇到的第一个令牌的令牌类型。
            </returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.EqualityComparer">
            <summary>
            获取可以比较两个令牌的值相等性的比较器。
            </summary>
            <value>A <see cref="T:Newtonsoft.Json.Linq.JTokenEqualityComparer"/> that can compare two nodes for value equality.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Parent">
            <summary>
            获取或设置父级。
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Root">
            <summary>
            获取这个<see cref="T:Newtonsoft.Json.Linq.JToken"/>的根<see cref="T:Newtonsoft.Json.Linq.JToken"/>。
            </summary>
            <value>The root <see cref="T:Newtonsoft.Json.Linq.JToken"/> of this <see cref="T:Newtonsoft.Json.Linq.JToken"/>.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Type">
            <summary>
            获取此<see cref="T:Newtonsoft.Json.Linq.JToken"/>的节点类型。
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.HasValues">
            <summary>
            获取一个值, 该值指示此令牌是否具有子令牌。
            </summary>
            <value>
            	<c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.DeepEquals(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)">
            <summary>
            比较两个令牌的值, 包括所有后代令牌的值。
            </summary>
            <param name="t1">第一个要比较的<see cref="T:Newtonsoft.Json.Linq.JToken"/>。</param>
            <param name="t2">要比较的第二个<see cref="T:Newtonsoft.Json.Linq.JToken"/>。</param>
            <returns>如果标记相等, 则 <c> 真实 </c>; 如果标记相等, 则真实的否则 <c> 虚假的 </c>。</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Next">
            <summary>
            获取此节点的下一个同级标记。
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Linq.JToken"/> that contains the next sibling token.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Previous">
            <summary>
            获取此节点的上一个同级标记。
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Linq.JToken"/> that contains the previous sibling token.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Path">
            <summary>
            获取 JSON 令牌的路径。 
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.AddAfterSelf(System.Object)">
            <summary>
            在此标记之后立即添加指定的内容。
            </summary>
            <param name="content">包含要在此令牌之后添加的简单内容或内容对象集合的内容对象。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.AddBeforeSelf(System.Object)">
            <summary>
            在此标记之前立即添加指定的内容。
            </summary>
            <param name="content">包含要在此令牌之前添加的简单内容或内容对象集合的内容对象。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Ancestors">
            <summary>
            返回此令牌的祖先令牌的集合。
            </summary>
            <returns>此令牌的祖先令牌的集合。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.AncestorsAndSelf">
            <summary>
            返回包含此令牌的令牌的集合, 以及此令牌的祖先。
            </summary>
            <returns>包含此令牌的令牌的集合, 以及此令牌的祖先。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.AfterSelf">
            <summary>
            以文档顺序返回此令牌之后的同级标记的集合。
            </summary>
            <returns>此标记后的同级标记的集合, 按文档顺序。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.BeforeSelf">
            <summary>
            按文档顺序返回此令牌之前的同级标记的集合。
            </summary>
            <returns>此令牌之前的同级令牌的集合, 按文档顺序。</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Item(System.Object)">
            <summary>
            获取具有指定键的<see cref="T:Newtonsoft.Json.Linq.JToken"/>。
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Linq.JToken"/> with the specified key.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Value``1(System.Object)">
            <summary>
            获取具有将指定键转换为指定类型的<see cref="T:Newtonsoft.Json.Linq.JToken"/>。
            </summary>
            <typeparam name="T">要将令牌转换为的类型。</typeparam>
            <param name="key">令牌密钥。</param>
            <returns>转换后的标记值。</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.First">
            <summary>
            获取此令牌的第一个子令牌。
            </summary>
            <value>A <see cref="T:Newtonsoft.Json.Linq.JToken"/> containing the first child token of the <see cref="T:Newtonsoft.Json.Linq.JToken"/>.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Last">
            <summary>
            获取此令牌的最后一个子标记。
            </summary>
            <value>A <see cref="T:Newtonsoft.Json.Linq.JToken"/> containing the last child token of the <see cref="T:Newtonsoft.Json.Linq.JToken"/>.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Children">
            <summary>
            按文档顺序返回此令牌的子令牌的集合。
            </summary>
            <returns>一个<see cref="T:System.Collections.Generic.IEnumerable`1"/>, 按照文献顺序, 包含这个<see cref="T:Newtonsoft.Json.Linq.JToken"/>的儿童令牌。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Children``1">
            <summary>
            返回此令牌的子令牌的集合, 按文档顺序, 按指定的类型筛选。
            </summary>
            <typeparam name="T">要在其上筛选子令牌的类型。</typeparam>
            <returns>一个<see cref="T:Newtonsoft.Json.Linq.JEnumerable`1"/>, 按文件顺序包含这个<see cref="T:Newtonsoft.Json.Linq.JToken"/>的儿童令牌。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Values``1">
            <summary>
            按文档顺序返回此令牌的子值的集合。
            </summary>
            <typeparam name="T">要将值转换为的类型。</typeparam>
            <returns>一个<see cref="T:System.Collections.Generic.IEnumerable`1"/>, 包含这个<see cref="T:Newtonsoft.Json.Linq.JToken"/>的子值, 按文件顺序。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Remove">
            <summary>
            从其父标记中删除此标记。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Replace(Newtonsoft.Json.Linq.JToken)">
            <summary>
            用指定的令牌替换此令牌。
            </summary>
            <param name="value">值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
            <summary>
            将此标记写入<see cref="T:Newtonsoft.Json.JsonWriter"/>。
            </summary>
            <param name="writer">这个方法将写入的<see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="converters">将在书写令牌时使用的<see cref="T:Newtonsoft.Json.JsonConverter"/>集合。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ToString">
            <summary>
            返回此令牌的缩进 JSON。
            </summary>
            <returns>
            此令牌的缩进 JSON。
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ToString(Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonConverter[])">
            <summary>
            使用给定的格式和转换器返回此令牌的 JSON。
            </summary>
            <param name="formatting">指示输出的格式。</param>
            <param name="converters">将在编写令牌时使用的 <see cref="T:Newtonsoft.Json.JsonConverter"/>s 的集合。</param>
            <returns>使用给定的格式和转换器的此令牌的 JSON。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Boolean">
            <summary>
            执行从<see cref="T:Newtonsoft.Json.Linq.JToken"/>到<see cref="T:System.Boolean"/>的显式转换。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.DateTimeOffset">
            <summary>
            执行从<see cref="T:Newtonsoft.Json.Linq.JToken"/>到<see cref="T:System.DateTimeOffset"/>的显式转换。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Boolean}">
            <summary>
            执行一个显式转换从<see cref="T:Newtonsoft.Json.Linq.JToken"/>到<see cref="T:System.Nullable`1"/>。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int64">
            <summary>
            执行一个显式转换从<see cref="T:Newtonsoft.Json.Linq.JToken"/>到<see cref="T:System.Nullable`1"/>。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.DateTime}">
            <summary>
            执行一个显式转换从<see cref="T:Newtonsoft.Json.Linq.JToken"/>到<see cref="T:System.Nullable`1"/>。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.DateTimeOffset}">
            <summary>
            执行一个显式转换从<see cref="T:Newtonsoft.Json.Linq.JToken"/>到<see cref="T:System.Nullable`1"/>。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Decimal}">
            <summary>
            执行一个显式转换从<see cref="T:Newtonsoft.Json.Linq.JToken"/>到<see cref="T:System.Nullable`1"/>。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Double}">
            <summary>
            执行一个显式转换从<see cref="T:Newtonsoft.Json.Linq.JToken"/>到<see cref="T:System.Nullable`1"/>。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Char}">
            <summary>
            执行一个显式转换从<see cref="T:Newtonsoft.Json.Linq.JToken"/>到<see cref="T:System.Nullable`1"/>。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int32">
            <summary>
            执行从<see cref="T:Newtonsoft.Json.Linq.JToken"/>到<see cref="T:System.Int32"/>的显式转换。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int16">
            <summary>
            执行从<see cref="T:Newtonsoft.Json.Linq.JToken"/>到<see cref="T:System.Int16"/>的显式转换。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt16">
            <summary>
            执行从<see cref="T:Newtonsoft.Json.Linq.JToken"/>到<see cref="T:System.UInt16"/>的显式转换。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Char">
            <summary>
            执行从<see cref="T:Newtonsoft.Json.Linq.JToken"/>到<see cref="T:System.Char"/>的显式转换。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Byte">
            <summary>
            执行从<see cref="T:Newtonsoft.Json.Linq.JToken"/>到<see cref="T:System.Byte"/>的显式转换。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.SByte">
            <summary>
            执行从<see cref="T:Newtonsoft.Json.Linq.JToken"/>到<see cref="T:System.SByte"/>的显式转换。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int32}">
            <summary>
            执行一个显式转换从<see cref="T:Newtonsoft.Json.Linq.JToken"/>到<see cref="T:System.Nullable`1"/>。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int16}">
            <summary>
            执行一个显式转换从<see cref="T:Newtonsoft.Json.Linq.JToken"/>到<see cref="T:System.Nullable`1"/>。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt16}">
            <summary>
            执行一个显式转换从<see cref="T:Newtonsoft.Json.Linq.JToken"/>到<see cref="T:System.Nullable`1"/>。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Byte}">
            <summary>
            执行一个显式转换从<see cref="T:Newtonsoft.Json.Linq.JToken"/>到<see cref="T:System.Nullable`1"/>。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.SByte}">
            <summary>
            执行一个显式转换从<see cref="T:Newtonsoft.Json.Linq.JToken"/>到<see cref="T:System.Nullable`1"/>。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.DateTime">
            <summary>
            执行一个显式转换从<see cref="T:Newtonsoft.Json.Linq.JToken"/>到<see cref="T:System.Nullable`1"/>。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int64}">
            <summary>
            执行一个显式转换从<see cref="T:Newtonsoft.Json.Linq.JToken"/>到<see cref="T:System.Nullable`1"/>。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Single}">
            <summary>
            执行一个显式转换从<see cref="T:Newtonsoft.Json.Linq.JToken"/>到<see cref="T:System.Nullable`1"/>。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Decimal">
            <summary>
            执行从<see cref="T:Newtonsoft.Json.Linq.JToken"/>到<see cref="T:System.Decimal"/>的显式转换。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt32}">
            <summary>
            执行一个显式转换从<see cref="T:Newtonsoft.Json.Linq.JToken"/>到<see cref="T:System.Nullable`1"/>。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt64}">
            <summary>
            执行一个显式转换从<see cref="T:Newtonsoft.Json.Linq.JToken"/>到<see cref="T:System.Nullable`1"/>。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Double">
            <summary>
            执行从<see cref="T:Newtonsoft.Json.Linq.JToken"/>到<see cref="T:System.Double"/>的显式转换。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Single">
            <summary>
            执行从<see cref="T:Newtonsoft.Json.Linq.JToken"/>到<see cref="T:System.Single"/>的显式转换。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.String">
            <summary>
            执行从<see cref="T:Newtonsoft.Json.Linq.JToken"/>到<see cref="T:System.String"/>的显式转换。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt32">
            <summary>
            执行从<see cref="T:Newtonsoft.Json.Linq.JToken"/>到<see cref="T:System.UInt32"/>的显式转换。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt64">
            <summary>
            执行从<see cref="T:Newtonsoft.Json.Linq.JToken"/>到<see cref="T:System.UInt64"/>的显式转换。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Byte[]">
            <summary>
            执行从<see cref="T:Newtonsoft.Json.Linq.JToken"/>到<see cref="T:System.Byte"/>的显式转换 []。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Guid">
            <summary>
            执行从<see cref="T:Newtonsoft.Json.Linq.JToken"/>到<see cref="T:System.Guid"/>的显式转换。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Guid}">
            <summary>
            执行一个显式转换从<see cref="T:Newtonsoft.Json.Linq.JToken"/>到<see cref="T:System.Nullable`1"/>。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.TimeSpan">
            <summary>
            执行从<see cref="T:Newtonsoft.Json.Linq.JToken"/>到<see cref="T:System.TimeSpan"/>的显式转换。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.TimeSpan}">
            <summary>
            执行一个显式转换从<see cref="T:Newtonsoft.Json.Linq.JToken"/>到<see cref="T:System.Nullable`1"/>。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Uri">
            <summary>
            执行从<see cref="T:Newtonsoft.Json.Linq.JToken"/>到<see cref="T:System.Uri"/>的显式转换。
            </summary>
            <param name="value">值。</param>
            <returns>转换的结果。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Boolean)~Newtonsoft.Json.Linq.JToken">
            <summary>
            执行从<see cref="T:System.Boolean"/>到<see cref="T:Newtonsoft.Json.Linq.JToken"/>的隐式转换。
            </summary>
            <param name="value">从创建<see cref="T:Newtonsoft.Json.Linq.JValue"/>的值。</param>
            <returns>使用指定的值初始化的<see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.DateTimeOffset)~Newtonsoft.Json.Linq.JToken">
            <summary>
            执行从<see cref="T:System.DateTimeOffset"/>到<see cref="T:Newtonsoft.Json.Linq.JToken"/>的隐式转换。
            </summary>
            <param name="value">从创建<see cref="T:Newtonsoft.Json.Linq.JValue"/>的值。</param>
            <returns>使用指定的值初始化的<see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Byte)~Newtonsoft.Json.Linq.JToken">
            <summary>
            执行从<see cref="T:System.Byte"/>到<see cref="T:Newtonsoft.Json.Linq.JToken"/>的隐式转换。
            </summary>
            <param name="value">从创建<see cref="T:Newtonsoft.Json.Linq.JValue"/>的值。</param>
            <returns>使用指定的值初始化的<see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Byte})~Newtonsoft.Json.Linq.JToken">
            <summary>
            执行从<see cref="T:System.Nullable`1"/>到<see cref="T:System.Byte"/>的隐式转换。
            </summary>
            <param name="value">从创建<see cref="T:Newtonsoft.Json.Linq.JValue"/>的值。</param>
            <returns>使用指定的值初始化的<see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.SByte)~Newtonsoft.Json.Linq.JToken">
            <summary>
            执行从<see cref="T:System.SByte"/>到<see cref="T:Newtonsoft.Json.Linq.JToken"/>的隐式转换。
            </summary>
            <param name="value">从创建<see cref="T:Newtonsoft.Json.Linq.JValue"/>的值。</param>
            <returns>使用指定的值初始化的<see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.SByte})~Newtonsoft.Json.Linq.JToken">
            <summary>
            执行从<see cref="T:System.Nullable`1"/>到<see cref="T:System.SByte"/>的隐式转换。
            </summary>
            <param name="value">从创建<see cref="T:Newtonsoft.Json.Linq.JValue"/>的值。</param>
            <returns>使用指定的值初始化的<see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Boolean})~Newtonsoft.Json.Linq.JToken">
            <summary>
            执行从<see cref="T:System.Nullable`1"/>到<see cref="T:System.Boolean"/>的隐式转换。
            </summary>
            <param name="value">从创建<see cref="T:Newtonsoft.Json.Linq.JValue"/>的值。</param>
            <returns>使用指定的值初始化的<see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int64)~Newtonsoft.Json.Linq.JToken">
            <summary>
            执行从<see cref="T:System.Nullable`1"/>到<see cref="T:System.Int64"/>的隐式转换。
            </summary>
            <param name="value">从创建<see cref="T:Newtonsoft.Json.Linq.JValue"/>的值。</param>
            <returns>使用指定的值初始化的<see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTime})~Newtonsoft.Json.Linq.JToken">
            <summary>
            执行从<see cref="T:System.Nullable`1"/>到<see cref="T:System.DateTime"/>的隐式转换。
            </summary>
            <param name="value">从创建<see cref="T:Newtonsoft.Json.Linq.JValue"/>的值。</param>
            <returns>使用指定的值初始化的<see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTimeOffset})~Newtonsoft.Json.Linq.JToken">
            <summary>
            执行从<see cref="T:System.Nullable`1"/>到<see cref="T:System.DateTimeOffset"/>的隐式转换。
            </summary>
            <param name="value">从创建<see cref="T:Newtonsoft.Json.Linq.JValue"/>的值。</param>
            <returns>使用指定的值初始化的<see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Decimal})~Newtonsoft.Json.Linq.JToken">
            <summary>
            执行从<see cref="T:System.Nullable`1"/>到<see cref="T:System.Decimal"/>的隐式转换。
            </summary>
            <param name="value">从创建<see cref="T:Newtonsoft.Json.Linq.JValue"/>的值。</param>
            <returns>使用指定的值初始化的<see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Double})~Newtonsoft.Json.Linq.JToken">
            <summary>
            执行从<see cref="T:System.Nullable`1"/>到<see cref="T:System.Double"/>的隐式转换。
            </summary>
            <param name="value">从创建<see cref="T:Newtonsoft.Json.Linq.JValue"/>的值。</param>
            <returns>使用指定的值初始化的<see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int16)~Newtonsoft.Json.Linq.JToken">
            <summary>
            执行从<see cref="T:System.Int16"/>到<see cref="T:Newtonsoft.Json.Linq.JToken"/>的隐式转换。
            </summary>
            <param name="value">从创建<see cref="T:Newtonsoft.Json.Linq.JValue"/>的值。</param>
            <returns>使用指定的值初始化的<see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt16)~Newtonsoft.Json.Linq.JToken">
            <summary>
            执行从<see cref="T:System.UInt16"/>到<see cref="T:Newtonsoft.Json.Linq.JToken"/>的隐式转换。
            </summary>
            <param name="value">从创建<see cref="T:Newtonsoft.Json.Linq.JValue"/>的值。</param>
            <returns>使用指定的值初始化的<see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int32)~Newtonsoft.Json.Linq.JToken">
            <summary>
            执行从<see cref="T:System.Int32"/>到<see cref="T:Newtonsoft.Json.Linq.JToken"/>的隐式转换。
            </summary>
            <param name="value">从创建<see cref="T:Newtonsoft.Json.Linq.JValue"/>的值。</param>
            <returns>使用指定的值初始化的<see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int32})~Newtonsoft.Json.Linq.JToken">
            <summary>
            执行从<see cref="T:System.Nullable`1"/>到<see cref="T:System.Int32"/>的隐式转换。
            </summary>
            <param name="value">从创建<see cref="T:Newtonsoft.Json.Linq.JValue"/>的值。</param>
            <returns>使用指定的值初始化的<see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.DateTime)~Newtonsoft.Json.Linq.JToken">
            <summary>
            执行从<see cref="T:System.DateTime"/>到<see cref="T:Newtonsoft.Json.Linq.JToken"/>的隐式转换。
            </summary>
            <param name="value">从创建<see cref="T:Newtonsoft.Json.Linq.JValue"/>的值。</param>
            <returns>使用指定的值初始化的<see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int64})~Newtonsoft.Json.Linq.JToken">
            <summary>
            执行从<see cref="T:System.Nullable`1"/>到<see cref="T:System.Int64"/>的隐式转换。
            </summary>
            <param name="value">从创建<see cref="T:Newtonsoft.Json.Linq.JValue"/>的值。</param>
            <returns>使用指定的值初始化的<see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Single})~Newtonsoft.Json.Linq.JToken">
            <summary>
            执行从<see cref="T:System.Nullable`1"/>到<see cref="T:System.Single"/>的隐式转换。
            </summary>
            <param name="value">从创建<see cref="T:Newtonsoft.Json.Linq.JValue"/>的值。</param>
            <returns>使用指定的值初始化的<see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Decimal)~Newtonsoft.Json.Linq.JToken">
            <summary>
            执行从<see cref="T:System.Decimal"/>到<see cref="T:Newtonsoft.Json.Linq.JToken"/>的隐式转换。
            </summary>
            <param name="value">从创建<see cref="T:Newtonsoft.Json.Linq.JValue"/>的值。</param>
            <returns>使用指定的值初始化的<see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int16})~Newtonsoft.Json.Linq.JToken">
            <summary>
            执行从<see cref="T:System.Nullable`1"/>到<see cref="T:System.Int16"/>的隐式转换。
            </summary>
            <param name="value">从创建<see cref="T:Newtonsoft.Json.Linq.JValue"/>的值。</param>
            <returns>使用指定的值初始化的<see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt16})~Newtonsoft.Json.Linq.JToken">
            <summary>
            执行从<see cref="T:System.Nullable`1"/>到<see cref="T:System.UInt16"/>的隐式转换。
            </summary>
            <param name="value">从创建<see cref="T:Newtonsoft.Json.Linq.JValue"/>的值。</param>
            <returns>使用指定的值初始化的<see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt32})~Newtonsoft.Json.Linq.JToken">
            <summary>
            执行从<see cref="T:System.Nullable`1"/>到<see cref="T:System.UInt32"/>的隐式转换。
            </summary>
            <param name="value">从创建<see cref="T:Newtonsoft.Json.Linq.JValue"/>的值。</param>
            <returns>使用指定的值初始化的<see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt64})~Newtonsoft.Json.Linq.JToken">
            <summary>
            执行从<see cref="T:System.Nullable`1"/>到<see cref="T:System.UInt64"/>的隐式转换。
            </summary>
            <param name="value">从创建<see cref="T:Newtonsoft.Json.Linq.JValue"/>的值。</param>
            <returns>使用指定的值初始化的<see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Double)~Newtonsoft.Json.Linq.JToken">
            <summary>
            执行从<see cref="T:System.Double"/>到<see cref="T:Newtonsoft.Json.Linq.JToken"/>的隐式转换。
            </summary>
            <param name="value">从创建<see cref="T:Newtonsoft.Json.Linq.JValue"/>的值。</param>
            <returns>使用指定的值初始化的<see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Single)~Newtonsoft.Json.Linq.JToken">
            <summary>
            执行从<see cref="T:System.Single"/>到<see cref="T:Newtonsoft.Json.Linq.JToken"/>的隐式转换。
            </summary>
            <param name="value">从创建<see cref="T:Newtonsoft.Json.Linq.JValue"/>的值。</param>
            <returns>使用指定的值初始化的<see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.String)~Newtonsoft.Json.Linq.JToken">
            <summary>
            执行从<see cref="T:System.String"/>到<see cref="T:Newtonsoft.Json.Linq.JToken"/>的隐式转换。
            </summary>
            <param name="value">从创建<see cref="T:Newtonsoft.Json.Linq.JValue"/>的值。</param>
            <returns>使用指定的值初始化的<see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt32)~Newtonsoft.Json.Linq.JToken">
            <summary>
            执行从<see cref="T:System.UInt32"/>到<see cref="T:Newtonsoft.Json.Linq.JToken"/>的隐式转换。
            </summary>
            <param name="value">从创建<see cref="T:Newtonsoft.Json.Linq.JValue"/>的值。</param>
            <returns>使用指定的值初始化的<see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt64)~Newtonsoft.Json.Linq.JToken">
            <summary>
            执行从<see cref="T:System.UInt64"/>到<see cref="T:Newtonsoft.Json.Linq.JToken"/>的隐式转换。
            </summary>
            <param name="value">从创建<see cref="T:Newtonsoft.Json.Linq.JValue"/>的值。</param>
            <returns>使用指定的值初始化的<see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Byte[])~Newtonsoft.Json.Linq.JToken">
            <summary>
            执行从<see cref="T:System.Byte"/> [] 到<see cref="T:Newtonsoft.Json.Linq.JToken"/>的隐式转换。
            </summary>
            <param name="value">从创建<see cref="T:Newtonsoft.Json.Linq.JValue"/>的值。</param>
            <returns>使用指定的值初始化的<see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Uri)~Newtonsoft.Json.Linq.JToken">
            <summary>
            执行从<see cref="T:System.Uri"/>到<see cref="T:Newtonsoft.Json.Linq.JToken"/>的隐式转换。
            </summary>
            <param name="value">从创建<see cref="T:Newtonsoft.Json.Linq.JValue"/>的值。</param>
            <returns>使用指定的值初始化的<see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.TimeSpan)~Newtonsoft.Json.Linq.JToken">
            <summary>
            执行从<see cref="T:System.TimeSpan"/>到<see cref="T:Newtonsoft.Json.Linq.JToken"/>的隐式转换。
            </summary>
            <param name="value">从创建<see cref="T:Newtonsoft.Json.Linq.JValue"/>的值。</param>
            <returns>使用指定的值初始化的<see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.TimeSpan})~Newtonsoft.Json.Linq.JToken">
            <summary>
            执行从<see cref="T:System.Nullable`1"/>到<see cref="T:System.TimeSpan"/>的隐式转换。
            </summary>
            <param name="value">从创建<see cref="T:Newtonsoft.Json.Linq.JValue"/>的值。</param>
            <returns>使用指定的值初始化的<see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Guid)~Newtonsoft.Json.Linq.JToken">
            <summary>
            执行从<see cref="T:System.Guid"/>到<see cref="T:Newtonsoft.Json.Linq.JToken"/>的隐式转换。
            </summary>
            <param name="value">从创建<see cref="T:Newtonsoft.Json.Linq.JValue"/>的值。</param>
            <returns>使用指定的值初始化的<see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Guid})~Newtonsoft.Json.Linq.JToken">
            <summary>
            执行从<see cref="T:System.Nullable`1"/>到<see cref="T:System.Guid"/>的隐式转换。
            </summary>
            <param name="value">从创建<see cref="T:Newtonsoft.Json.Linq.JValue"/>的值。</param>
            <returns>使用指定的值初始化的<see cref="T:Newtonsoft.Json.Linq.JValue"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.CreateReader">
            <summary>
            为此标记创建一个<see cref="T:Newtonsoft.Json.JsonReader"/>。
            </summary>
            <returns>一个<see cref="T:Newtonsoft.Json.JsonReader"/>, 可以用来读取这个令牌和它的后代。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object)">
            <summary>
            从对象创建<see cref="T:Newtonsoft.Json.Linq.JToken"/>。
            </summary>
            <param name="o">将用于创建<see cref="T:Newtonsoft.Json.Linq.JToken"/>的对象。</param>
            <returns>具有指定对象的值的<see cref="T:Newtonsoft.Json.Linq.JToken"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            使用指定的<see cref="T:Newtonsoft.Json.Linq.JToken"/>从对象创建<see cref="T:Newtonsoft.Json.JsonSerializer"/>。
            </summary>
            <param name="o">将用于创建<see cref="T:Newtonsoft.Json.Linq.JToken"/>的对象。</param>
            <param name="jsonSerializer">读取对象时将使用的<see cref="T:Newtonsoft.Json.JsonSerializer"/>。</param>
            <returns>具有指定对象的值的<see cref="T:Newtonsoft.Json.Linq.JToken"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ToObject``1">
            <summary>
            从<see cref="T:Newtonsoft.Json.Linq.JToken"/>中创建指定的. net 类型的实例。
            </summary>
            <typeparam name="T">令牌将反序列化到的对象类型。</typeparam>
            <returns>从 JSON 值创建的新对象。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ToObject(System.Type)">
            <summary>
            从<see cref="T:Newtonsoft.Json.Linq.JToken"/>中创建指定的. net 类型的实例。
            </summary>
            <param name="objectType">令牌将反序列化到的对象类型。</param>
            <returns>从 JSON 值创建的新对象。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ToObject``1(Newtonsoft.Json.JsonSerializer)">
            <summary>
            使用指定的<see cref="T:Newtonsoft.Json.Linq.JToken"/>从<see cref="T:Newtonsoft.Json.JsonSerializer"/>中创建指定的. net 类型的实例。
            </summary>
            <typeparam name="T">令牌将反序列化到的对象类型。</typeparam>
            <param name="jsonSerializer">将在创建对象时使用的<see cref="T:Newtonsoft.Json.JsonSerializer"/>。</param>
            <returns>从 JSON 值创建的新对象。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ToObject(System.Type,Newtonsoft.Json.JsonSerializer)">
            <summary>
            使用指定的<see cref="T:Newtonsoft.Json.Linq.JToken"/>从<see cref="T:Newtonsoft.Json.JsonSerializer"/>中创建指定的. net 类型的实例。
            </summary>
            <param name="objectType">令牌将反序列化到的对象类型。</param>
            <param name="jsonSerializer">将在创建对象时使用的<see cref="T:Newtonsoft.Json.JsonSerializer"/>。</param>
            <returns>从 JSON 值创建的新对象。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ReadFrom(Newtonsoft.Json.JsonReader)">
            <summary>
            从<see cref="T:Newtonsoft.Json.Linq.JToken"/>中创建一个<see cref="T:Newtonsoft.Json.JsonReader"/>。
            </summary>
            <param name="reader">位于标记处的<see cref="T:Newtonsoft.Json.JsonReader"/>, 读入这个<see cref="T:Newtonsoft.Json.Linq.JToken"/>。</param>
            <returns>
            包含令牌及其后代令牌的<see cref="T:Newtonsoft.Json.Linq.JToken"/>
            从读者的阅读。确定令牌的运行时类型
            读取器中遇到的第一个令牌的令牌类型。
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ReadFrom(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            从<see cref="T:Newtonsoft.Json.Linq.JToken"/>中创建一个<see cref="T:Newtonsoft.Json.JsonReader"/>。
            </summary>
            <param name="reader">位于标记处的<see cref="T:Newtonsoft.Json.JsonReader"/>, 读入这个<see cref="T:Newtonsoft.Json.Linq.JToken"/>。</param>
            <param name="settings"><see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings"/>用来装载 JSON。
            如果此 <c> 为 null </c>, 则将使用默认加载设置。</param>
            <returns>
            包含令牌及其后代令牌的<see cref="T:Newtonsoft.Json.Linq.JToken"/>
            从读者的阅读。确定令牌的运行时类型
            读取器中遇到的第一个令牌的令牌类型。
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Parse(System.String)">
            <summary>
            从包含 JSON 的字符串加载<see cref="T:Newtonsoft.Json.Linq.JToken"/>。
            </summary>
            <param name="json">一个包含 JSON 的<see cref="T:System.String"/>。</param>
            <returns>从包含 JSON 的字符串填充的<see cref="T:Newtonsoft.Json.Linq.JToken"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Parse(System.String,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            从包含 JSON 的字符串加载<see cref="T:Newtonsoft.Json.Linq.JToken"/>。
            </summary>
            <param name="json">一个包含 JSON 的<see cref="T:System.String"/>。</param>
            <param name="settings"><see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings"/>用来装载 JSON。
            如果此 <c> 为 null </c>, 则将使用默认加载设置。</param>
            <returns>从包含 JSON 的字符串填充的<see cref="T:Newtonsoft.Json.Linq.JToken"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Load(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            从<see cref="T:Newtonsoft.Json.Linq.JToken"/>中创建一个<see cref="T:Newtonsoft.Json.JsonReader"/>。
            </summary>
            <param name="reader">位于标记处的<see cref="T:Newtonsoft.Json.JsonReader"/>, 读入这个<see cref="T:Newtonsoft.Json.Linq.JToken"/>。</param>
            <param name="settings"><see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings"/>用来装载 JSON。
            如果此 <c> 为 null </c>, 则将使用默认加载设置。</param>
            <returns>
            包含令牌及其后代令牌的<see cref="T:Newtonsoft.Json.Linq.JToken"/>
            从读者的阅读。确定令牌的运行时类型
            读取器中遇到的第一个令牌的令牌类型。
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Load(Newtonsoft.Json.JsonReader)">
            <summary>
            从<see cref="T:Newtonsoft.Json.Linq.JToken"/>中创建一个<see cref="T:Newtonsoft.Json.JsonReader"/>。
            </summary>
            <param name="reader">位于标记处的<see cref="T:Newtonsoft.Json.JsonReader"/>, 读入这个<see cref="T:Newtonsoft.Json.Linq.JToken"/>。</param>
            <returns>
            包含令牌及其后代令牌的<see cref="T:Newtonsoft.Json.Linq.JToken"/>
            从读者的阅读。确定令牌的运行时类型
            读取器中遇到的第一个令牌的令牌类型。
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.SelectToken(System.String)">
            <summary>
            使用 JPath 表达式选择<see cref="T:Newtonsoft.Json.Linq.JToken"/>。选择与对象路径匹配的标记。
            </summary>
            <param name="path">
            包含 JPath 表达式的<see cref="T:System.String"/>。
            </param>
            <returns>一个<see cref="T:Newtonsoft.Json.Linq.JToken"/>, 或 <c> 空 </c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.SelectToken(System.String,System.Boolean)">
            <summary>
            使用 JPath 表达式选择<see cref="T:Newtonsoft.Json.Linq.JToken"/>。选择与对象路径匹配的标记。
            </summary>
            <param name="path">
            包含 JPath 表达式的<see cref="T:System.String"/>。
            </param>
            <param name="errorWhenNoMatch">如果在计算表达式的一部分时没有发现令牌, 则指示是否应引发错误的标志。</param>
            <returns>一个<see cref="T:Newtonsoft.Json.Linq.JToken"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.SelectTokens(System.String)">
            <summary>
            选择使用 JPath 表达式的元素集合。
            </summary>
            <param name="path">
            包含 JPath 表达式的<see cref="T:System.String"/>。
            </param>
            <returns>包含选定元素的<see cref="T:System.Collections.Generic.IEnumerable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.SelectTokens(System.String,System.Boolean)">
            <summary>
            选择使用 JPath 表达式的元素集合。
            </summary>
            <param name="path">
            包含 JPath 表达式的<see cref="T:System.String"/>。
            </param>
            <param name="errorWhenNoMatch">如果在计算表达式的一部分时没有发现令牌, 则指示是否应引发错误的标志。</param>
            <returns>包含选定元素的<see cref="T:System.Collections.Generic.IEnumerable`1"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            返回负责对该对象执行绑定操作的<see cref="T:System.Dynamic.DynamicMetaObject"/>。
            </summary>
            <param name="parameter">运行时值的表达式树表示形式。</param>
            <returns>
            将这个物体结合在一起的<see cref="T:System.Dynamic.DynamicMetaObject"/>。
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            返回负责对该对象执行绑定操作的<see cref="T:System.Dynamic.DynamicMetaObject"/>。
            </summary>
            <param name="parameter">运行时值的表达式树表示形式。</param>
            <returns>
            将这个物体结合在一起的<see cref="T:System.Dynamic.DynamicMetaObject"/>。
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.DeepClone">
            <summary>
            创建<see cref="T:Newtonsoft.Json.Linq.JToken"/>的新实例。所有子令牌都是递归克隆的。
            </summary>
            <returns><see cref="T:Newtonsoft.Json.Linq.JToken"/>的一个新实例。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.AddAnnotation(System.Object)">
            <summary>
            将对象添加到此<see cref="T:Newtonsoft.Json.Linq.JToken"/>的注释列表中。
            </summary>
            <param name="annotation">要添加的批注。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Annotation``1">
            <summary>
            从这个<see cref="T:Newtonsoft.Json.Linq.JToken"/>获取指定类型的第一个注释对象。
            </summary>
            <typeparam name="T">要检索的批注的类型。</typeparam>
            <returns>与指定类型匹配的第一个批注对象, 如果没有指定类型的批注, 则 <c> null </c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Annotation(System.Type)">
            <summary>
            从该<see cref="T:Newtonsoft.Json.Linq.JToken"/>获取指定类型的第一个批注对象。
            </summary>
            <param name="type">要检索的注释的<see cref="P:Newtonsoft.Json.Linq.JToken.Type"/>。</param>
            <returns>与指定类型匹配的第一个批注对象, 如果没有指定类型的批注, 则 <c> null </c>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Annotations``1">
            <summary>
            获取此<see cref="T:Newtonsoft.Json.Linq.JToken"/>的指定类型的批注的集合。
            </summary>
            <typeparam name="T">要检索的批注的类型。</typeparam>
            <returns>一个包含这个<see cref="T:System.Collections.Generic.IEnumerable`1"/>注释的<see cref="T:Newtonsoft.Json.Linq.JToken"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Annotations(System.Type)">
            <summary>
            获取此<see cref="T:Newtonsoft.Json.Linq.JToken"/>的指定类型的批注的集合。
            </summary>
            <param name="type">要检索的注解的<see cref="P:Newtonsoft.Json.Linq.JToken.Type"/>。</param>
            <returns>一个<see cref="T:System.Collections.Generic.IEnumerable`1"/>, 包含与这个<see cref="T:System.Object"/>的指定类型相匹配的注释。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.RemoveAnnotations``1">
            <summary>
            从此<see cref="T:Newtonsoft.Json.Linq.JToken"/>中删除指定类型的批注。
            </summary>
            <typeparam name="T">要删除的批注的类型。</typeparam>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.RemoveAnnotations(System.Type)">
            <summary>
            从此<see cref="T:Newtonsoft.Json.Linq.JToken"/>中删除指定类型的批注。
            </summary>
            <param name="type">要移除的注解<see cref="P:Newtonsoft.Json.Linq.JToken.Type"/>。</param>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JTokenEqualityComparer">
            <summary>
            比较令牌以确定它们是否相等。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenEqualityComparer.Equals(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)">
            <summary>
            确定指定的对象是否相等。
            </summary>
            <param name="x">要比较的第一个<see cref="T:Newtonsoft.Json.Linq.JToken"/>类型的对象。</param>
            <param name="y">要比较的第二个类型<see cref="T:Newtonsoft.Json.Linq.JToken"/>的对象。</param>
            <returns>
            如果指定的对象相等, 则 <c> true </c>; 如果指定的对象相等, 则为 true。否则, <c> 虚假的 </c>。
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenEqualityComparer.GetHashCode(Newtonsoft.Json.Linq.JToken)">
            <summary>
            返回指定对象的哈希代码。
            </summary>
            <param name="obj">要返回哈希代码的<see cref="T:System.Object"/>。</param>
            <returns>指定对象的哈希代码。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="obj"/>的类型是一个参考类型, 并且<paramref name="obj"/> <c> 空 </c>。</exception>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JTokenReader">
            <summary>
            表示提供对序列化 JSON 数据的快速、非缓存、仅向前访问的读取器。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JTokenReader.CurrentToken">
            <summary>
            获取读取器当前位置的<see cref="T:Newtonsoft.Json.Linq.JToken"/>。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenReader.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.Linq.JTokenReader"/>类的新实例。
            </summary>
            <param name="token">要从中读取的标记。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenReader.Read">
            <summary>
            从底层<see cref="T:Newtonsoft.Json.Linq.JToken"/>读取下一个 JSON 令牌。
            </summary>
            <returns>
            如果下一个令牌被成功读取, 则 <c> 真实 </c>; 如果向下一个令牌被成功读取, 则真实的。如果没有更多的令牌可供读取, <c> 虚假 </c>。
            </returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JTokenReader.Path">
            <summary>
            获取当前 JSON 令牌的路径。 
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JTokenType">
            <summary>
            指定标记的类型。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.None">
            <summary>
            未设置令牌类型。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Object">
            <summary>
            对象。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Array">
            <summary>
            一个 JSON 数组。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Constructor">
            <summary>
            一个 JSON 构造函数。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Property">
            <summary>
            属性。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Comment">
            <summary>
            评论。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Integer">
            <summary>
            一个整数值。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Float">
            <summary>
            浮点值。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.String">
            <summary>
            一个字符串值。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Boolean">
            <summary>
            布尔值。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Null">
            <summary>
            空值。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Undefined">
            <summary>
            未定义的值。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Date">
            <summary>
            日期值。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Raw">
            <summary>
            原始 JSON 值。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Bytes">
            <summary>
            字节值的集合。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Guid">
            <summary>
            一个 Guid 值。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Uri">
            <summary>
            Uri 值。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.TimeSpan">
            <summary>
            值。
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JTokenWriter">
            <summary>
            表示提供快速、非缓存、仅向前生成 JSON 数据的方法的编写器。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JTokenWriter.CurrentToken">
            <summary>
            获取写入器当前位置的<see cref="T:Newtonsoft.Json.Linq.JToken"/>。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JTokenWriter.Token">
            <summary>
            获取正在写入的令牌。
            </summary>
            <value>The token being written.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.#ctor(Newtonsoft.Json.Linq.JContainer)">
            <summary>
            初始化一个新的实例的<see cref="T:Newtonsoft.Json.Linq.JTokenWriter"/>类写到给定的<see cref="T:Newtonsoft.Json.Linq.JContainer"/>。
            </summary>
            <param name="container">要写入的容器。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.#ctor">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.Linq.JTokenWriter"/>类的新实例。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.Flush">
            <summary>
            将缓冲区中的任何内容刷新到底层<see cref="T:Newtonsoft.Json.Linq.JContainer"/>。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.Close">
            <summary>
            关闭此编写器。
            如果<see cref="P:Newtonsoft.Json.JsonWriter.AutoCompleteOnClose"/>设置为 <c> 真实的 </c>, 则 JSON 将自动完成。
            </summary>
            <remarks>
            将<see cref="P:Newtonsoft.Json.JsonWriter.CloseOutput"/>设置为 <c> 真实 </c> 没有额外的效果, 因为底层<see cref="T:Newtonsoft.Json.Linq.JContainer"/>是一个不能关闭的类型。
            </remarks>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartObject">
            <summary>
            写入 JSON 对象的开头。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartArray">
            <summary>
            写入 JSON 数组的开头。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartConstructor(System.String)">
            <summary>
            写入具有给定名称的构造函数的开头。
            </summary>
            <param name="name">构造函数的名称。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
            <summary>
            写入结束。
            </summary>
            <param name="token">令牌。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WritePropertyName(System.String)">
            <summary>
            在 JSON 对象上写入 name/值对的属性名称。
            </summary>
            <param name="name">属性的名称。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Object)">
            <summary>
            写入一个<see cref="T:System.Object"/>值。
            如果该值不能写入单个 JSON 令牌, 则会引发错误。
            </summary>
            <param name="value">要写入的<see cref="T:System.Object"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteNull">
            <summary>
            写入空值。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteUndefined">
            <summary>
            写入未定义的值。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteRaw(System.String)">
            <summary>
            写入原始 JSON。
            </summary>
            <param name="json">要编写的原始 JSON。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteComment(System.String)">
            <summary>
            <C>/*. * */</c> 包含指定文本的注释。
            </summary>
            <param name="text">要放置在注释中的文本。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.String)">
            <summary>
            写入一个<see cref="T:System.String"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.String"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int32)">
            <summary>
            写入一个<see cref="T:System.Int32"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Int32"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt32)">
            <summary>
            写入一个<see cref="T:System.UInt32"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.UInt32"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int64)">
            <summary>
            写入一个<see cref="T:System.Int64"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Int64"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt64)">
            <summary>
            写入一个<see cref="T:System.UInt64"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.UInt64"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Single)">
            <summary>
            写入一个<see cref="T:System.Single"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Single"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Double)">
            <summary>
            写入一个<see cref="T:System.Double"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Double"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Boolean)">
            <summary>
            写入一个<see cref="T:System.Boolean"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Boolean"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int16)">
            <summary>
            写入一个<see cref="T:System.Int16"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Int16"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt16)">
            <summary>
            写入一个<see cref="T:System.UInt16"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.UInt16"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Char)">
            <summary>
            写入一个<see cref="T:System.Char"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Char"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Byte)">
            <summary>
            写入一个<see cref="T:System.Byte"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Byte"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.SByte)">
            <summary>
            写入一个<see cref="T:System.SByte"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.SByte"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Decimal)">
            <summary>
            写入一个<see cref="T:System.Decimal"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Decimal"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.DateTime)">
            <summary>
            写入一个<see cref="T:System.DateTime"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.DateTime"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            写入一个<see cref="T:System.DateTimeOffset"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.DateTimeOffset"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Byte[])">
            <summary>
            写入一个<see cref="T:System.Byte"/> [] 值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Byte"/> [] 值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.TimeSpan)">
            <summary>
            写入一个<see cref="T:System.TimeSpan"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.TimeSpan"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Guid)">
            <summary>
            写入一个<see cref="T:System.Guid"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Guid"/>值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Uri)">
            <summary>
            写入一个<see cref="T:System.Uri"/>值。
            </summary>
            <param name="value">要写入的<see cref="T:System.Uri"/>值。</param>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JValue">
            <summary>
            表示 JSON 中的值 (字符串、整数、日期等)。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.WriteToAsync(Newtonsoft.Json.JsonWriter,System.Threading.CancellationToken,Newtonsoft.Json.JsonConverter[])">
            <summary>
            异步将此令牌写入<see cref="T:Newtonsoft.Json.JsonWriter"/>。
            </summary>
            <param name="writer">这个方法将写入的<see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="cancellationToken">要监视取消请求的标记。</param>
            <param name="converters">将在书写令牌时使用的<see cref="T:Newtonsoft.Json.JsonConverter"/>集合。</param>
            <returns>一个表示异步写入操作的<see cref="T:System.Threading.Tasks.Task"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(Newtonsoft.Json.Linq.JValue)">
            <summary>
            从另一个<see cref="T:Newtonsoft.Json.Linq.JValue"/>对象初始化<see cref="T:Newtonsoft.Json.Linq.JValue"/>类的一个新实例。
            </summary>
            <param name="other">要复制的<see cref="T:Newtonsoft.Json.Linq.JValue"/>物体。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Int64)">
            <summary>
            初始化具有给定值的<see cref="T:Newtonsoft.Json.Linq.JValue"/>类的新实例。
            </summary>
            <param name="value">值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Decimal)">
            <summary>
            初始化具有给定值的<see cref="T:Newtonsoft.Json.Linq.JValue"/>类的新实例。
            </summary>
            <param name="value">值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Char)">
            <summary>
            初始化具有给定值的<see cref="T:Newtonsoft.Json.Linq.JValue"/>类的新实例。
            </summary>
            <param name="value">值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.UInt64)">
            <summary>
            初始化具有给定值的<see cref="T:Newtonsoft.Json.Linq.JValue"/>类的新实例。
            </summary>
            <param name="value">值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Double)">
            <summary>
            初始化具有给定值的<see cref="T:Newtonsoft.Json.Linq.JValue"/>类的新实例。
            </summary>
            <param name="value">值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Single)">
            <summary>
            初始化具有给定值的<see cref="T:Newtonsoft.Json.Linq.JValue"/>类的新实例。
            </summary>
            <param name="value">值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.DateTime)">
            <summary>
            初始化具有给定值的<see cref="T:Newtonsoft.Json.Linq.JValue"/>类的新实例。
            </summary>
            <param name="value">值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.DateTimeOffset)">
            <summary>
            初始化具有给定值的<see cref="T:Newtonsoft.Json.Linq.JValue"/>类的新实例。
            </summary>
            <param name="value">值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Boolean)">
            <summary>
            初始化具有给定值的<see cref="T:Newtonsoft.Json.Linq.JValue"/>类的新实例。
            </summary>
            <param name="value">值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.String)">
            <summary>
            初始化具有给定值的<see cref="T:Newtonsoft.Json.Linq.JValue"/>类的新实例。
            </summary>
            <param name="value">值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Guid)">
            <summary>
            初始化具有给定值的<see cref="T:Newtonsoft.Json.Linq.JValue"/>类的新实例。
            </summary>
            <param name="value">值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Uri)">
            <summary>
            初始化具有给定值的<see cref="T:Newtonsoft.Json.Linq.JValue"/>类的新实例。
            </summary>
            <param name="value">值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.TimeSpan)">
            <summary>
            初始化具有给定值的<see cref="T:Newtonsoft.Json.Linq.JValue"/>类的新实例。
            </summary>
            <param name="value">值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Object)">
            <summary>
            初始化具有给定值的<see cref="T:Newtonsoft.Json.Linq.JValue"/>类的新实例。
            </summary>
            <param name="value">值。</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JValue.HasValues">
            <summary>
            获取一个值, 该值指示此令牌是否具有子令牌。
            </summary>
            <value>
            	<c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.CreateComment(System.String)">
            <summary>
            创建具有给定值的<see cref="T:Newtonsoft.Json.Linq.JValue"/>注释。
            </summary>
            <param name="value">值。</param>
            <returns>具有给定值的<see cref="T:Newtonsoft.Json.Linq.JValue"/>注释。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.CreateString(System.String)">
            <summary>
            创建具有给定值的<see cref="T:Newtonsoft.Json.Linq.JValue"/>字符串。
            </summary>
            <param name="value">值。</param>
            <returns>具有给定值的<see cref="T:Newtonsoft.Json.Linq.JValue"/>字符串。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.CreateNull">
            <summary>
            创建一个<see cref="T:Newtonsoft.Json.Linq.JValue"/>空值。
            </summary>
            <returns><see cref="T:Newtonsoft.Json.Linq.JValue"/>空值。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.CreateUndefined">
            <summary>
            创建一个未定义的<see cref="T:Newtonsoft.Json.Linq.JValue"/>值。
            </summary>
            <returns>一个未定义的<see cref="T:Newtonsoft.Json.Linq.JValue"/>值。</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JValue.Type">
            <summary>
            获取此<see cref="T:Newtonsoft.Json.Linq.JToken"/>的节点类型。
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JValue.Value">
            <summary>
            获取或设置基础令牌值。
            </summary>
            <value>The underlying token value.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
            <summary>
            将此标记写入<see cref="T:Newtonsoft.Json.JsonWriter"/>。
            </summary>
            <param name="writer">这个方法将写入的<see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="converters">将在编写令牌时使用的 <see cref="T:Newtonsoft.Json.JsonConverter"/>s 的集合。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.Equals(Newtonsoft.Json.Linq.JValue)">
            <summary>
            指示当前对象是否等于同一类型的另一个对象。
            </summary>
            <returns>
            如果当前对象等于<paramref name="other"/>参数, 则 <c> true </c>; 如果当前对象等于, 则为 true。否则, <c> 虚假的 </c>。
            </returns>
            <param name="other">要与此对象进行比较的对象。</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.Equals(System.Object)">
            <summary>
            确定指定的<see cref="T:System.Object"/>是否等于当前<see cref="T:System.Object"/>。
            </summary>
            <param name="obj">要与当前<see cref="T:System.Object"/>相比较的<see cref="T:System.Object"/>。</param>
            <returns>
            如果指定的<see cref="T:System.Object"/>等于当前<see cref="T:System.Object"/>, <c> 真实的 </c>; 如果指定的<see cref="T:System.Object"/>等于当前<see cref="T:System.Object"/>, 则真实的。否则, <c> 虚假的 </c>。
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.GetHashCode">
            <summary>
            用作特定类型的哈希函数。
            </summary>
            <returns>
            当前<see cref="T:System.Object"/>的哈希代码。
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.ToString">
            <summary>
            返回表示此实例的<see cref="T:System.String"/>。
            </summary>
            <returns>
            一个代表这个实例的<see cref="T:System.String"/>。
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.ToString(System.String)">
            <summary>
            返回表示此实例的<see cref="T:System.String"/>。
            </summary>
            <param name="format">格式。</param>
            <returns>
            一个代表这个实例的<see cref="T:System.String"/>。
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.ToString(System.IFormatProvider)">
            <summary>
            返回表示此实例的<see cref="T:System.String"/>。
            </summary>
            <param name="formatProvider">格式提供程序。</param>
            <returns>
            一个代表这个实例的<see cref="T:System.String"/>。
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.ToString(System.String,System.IFormatProvider)">
            <summary>
            返回表示此实例的<see cref="T:System.String"/>。
            </summary>
            <param name="format">格式。</param>
            <param name="formatProvider">格式提供程序。</param>
            <returns>
            一个代表这个实例的<see cref="T:System.String"/>。
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            返回负责对该对象执行绑定操作的<see cref="T:System.Dynamic.DynamicMetaObject"/>。
            </summary>
            <param name="parameter">运行时值的表达式树表示形式。</param>
            <returns>
            将这个物体结合在一起的<see cref="T:System.Dynamic.DynamicMetaObject"/>。
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.CompareTo(Newtonsoft.Json.Linq.JValue)">
            <summary>
            将当前实例与同一类型的另一个对象进行比较, 并返回一个整数, 指示当前实例是在与另一个对象相同的排序顺序中处于相同的位置, 还是在排序顺序上发生。
            </summary>
            <param name="obj">要与此实例进行比较的对象。</param>
            <returns>
            32位带符号整数, 指示要比较的对象的相对顺序。返回值具有以下含义:
            价值
            意义
            小于零
            这个实例小于<paramref name="obj"/>。
            零
            这个实例等于<paramref name="obj"/>。
            大于零
            这个实例大于<paramref name="obj"/>。
            </returns>
            <exception cref="T:System.ArgumentException">
            	<paramref name="obj"/>的类型与此实例的类型不同。
            </exception>
        </member>
        <member name="T:Newtonsoft.Json.Linq.LineInfoHandling">
            <summary>
            指定加载 JSON 时如何处理行信息。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.LineInfoHandling.Ignore">
            <summary>
            忽略行信息。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.LineInfoHandling.Load">
            <summary>
            加载行信息。
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.MergeArrayHandling">
            <summary>
            指定如何将 JSON 数组合并在一起。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.MergeArrayHandling.Concat">
            <summary>连接数组。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.MergeArrayHandling.Union">
            <summary>联合数组, 跳过已存在的项。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.MergeArrayHandling.Replace">
            <summary>替换所有数组项。</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.MergeArrayHandling.Merge">
            <summary>将数组项合并在一起, 并由索引匹配。</summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.MergeNullValueHandling">
            <summary>
            指定如何合并空值属性。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.MergeNullValueHandling.Ignore">
            <summary>
            在合并过程中, 内容的空值属性将被忽略。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.MergeNullValueHandling.Merge">
            <summary>
            内容的空值属性将被合并。
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.MemberSerialization">
            <summary>
            指定<see cref="T:Newtonsoft.Json.JsonSerializer"/>的成员序列化选项。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.MemberSerialization.OptOut">
            <summary>
            默认情况下, 所有公共成员都是序列化的。成员可以使用<see cref="T:Newtonsoft.Json.JsonIgnoreAttribute"/>或<see cref="T:System.NonSerializedAttribute"/>排除。
            这是默认成员序列化模式。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.MemberSerialization.OptIn">
            <summary>
            只有标记为<see cref="T:Newtonsoft.Json.JsonPropertyAttribute"/>或<see cref="T:System.Runtime.Serialization.DataMemberAttribute"/>的成员才会被序列化。
            此成员序列化模式也可以通过用<see cref="T:System.Runtime.Serialization.DataContractAttribute"/>标记类来设置。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.MemberSerialization.Fields">
            <summary>
            所有公共和私有字段都是序列化的。成员可以使用<see cref="T:Newtonsoft.Json.JsonIgnoreAttribute"/>或<see cref="T:System.NonSerializedAttribute"/>排除。
            此成员序列化模式也可以通过用<see cref="T:System.SerializableAttribute"/>标记类来设置
            并将<see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver"/>上的属性设置为 <c> 虚假的 </c>。
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.MetadataPropertyHandling">
            <summary>
            指定<see cref="T:Newtonsoft.Json.JsonSerializer"/>的元数据属性处理选项。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.MetadataPropertyHandling.Default">
            <summary>
            读取位于 JSON 对象开头的元数据属性。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.MetadataPropertyHandling.ReadAhead">
            <summary>
            读取位于 JSON 对象中任意位置的元数据属性。请注意, 此设置将影响性能。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.MetadataPropertyHandling.Ignore">
            <summary>
            不要尝试读取元数据属性。
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.MissingMemberHandling">
            <summary>
            指定缺少<see cref="T:Newtonsoft.Json.JsonSerializer"/>的成员处理选项。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.MissingMemberHandling.Ignore">
            <summary>
            忽略丢失的成员, 并且不要尝试对其进行反序列化。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.MissingMemberHandling.Error">
            <summary>
            当在反序列化过程中遇到缺少的成员时, 将引发一个<see cref="T:Newtonsoft.Json.JsonSerializationException"/>。
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.NullValueHandling">
            <summary>
            指定<see cref="T:Newtonsoft.Json.JsonSerializer"/>的空值处理选项。
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeNullValueHandlingObject" title="NullValueHandling Class" />
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeNullValueHandlingExample" title="NullValueHandling Ignore Example" />
            </example>
        </member>
        <member name="F:Newtonsoft.Json.NullValueHandling.Include">
            <summary>
            序列化和反序列化对象时包括空值。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.NullValueHandling.Ignore">
            <summary>
            序列化和反序列化对象时忽略空值。
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.ObjectCreationHandling">
            <summary>
            指定<see cref="T:Newtonsoft.Json.JsonSerializer"/>如何处理对象创建。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.ObjectCreationHandling.Auto">
            <summary>
            重用现有对象, 在需要时创建新对象。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.ObjectCreationHandling.Reuse">
            <summary>
            仅重复使用现有对象。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.ObjectCreationHandling.Replace">
            <summary>
            始终创建新对象。
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.PreserveReferencesHandling">
            <summary>
            指定<see cref="T:Newtonsoft.Json.JsonSerializer"/>的引用处理选项。
            请注意, 当通过非默认构造函数 (如实现<see cref="T:System.Runtime.Serialization.ISerializable"/>的类型) 设置值时, 无法保留引用。
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="PreservingObjectReferencesOn" title="Preserve Object References" />       
            </example>
        </member>
        <member name="F:Newtonsoft.Json.PreserveReferencesHandling.None">
            <summary>
            序列化类型时不要保留引用。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.PreserveReferencesHandling.Objects">
            <summary>
            在序列化到 JSON 对象结构时保留引用。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.PreserveReferencesHandling.Arrays">
            <summary>
            在序列化到 JSON 数组结构时保留引用。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.PreserveReferencesHandling.All">
            <summary>
            序列化时保留引用。
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.ReferenceLoopHandling">
            <summary>
            指定<see cref="T:Newtonsoft.Json.JsonSerializer"/>的引用循环处理选项。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Error">
            <summary>
            当遇到一个循环时, 抛出一个<see cref="T:Newtonsoft.Json.JsonSerializationException"/>。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Ignore">
            <summary>
            忽略循环引用, 并且不序列化。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Serialize">
            <summary>
            序列化循环引用。
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Required">
            <summary>
            指示是否需要属性。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Required.Default">
            <summary>
            该属性不是必需的。默认状态。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Required.AllowNull">
            <summary>
            该属性必须在 JSON 中定义, 但可以是空值。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Required.Always">
            <summary>
            该属性必须在 JSON 中定义, 并且不能为空值。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Required.DisallowNull">
            <summary>
            该属性不是必需的, 但它不能是空值。
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Schema.Extensions">
            <summary>
            <para>
            包含 JSON 架构扩展方法。
            </para>
            < 注意类型 = "谨慎" >
            JSON 架构验证已移动到其自己的包。有关更多详细信息, 请参阅<see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see>。
            </note>
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Extensions.IsValid(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema)">
            <summary>
            <para>
            确定<see cref="T:Newtonsoft.Json.Linq.JToken"/>是否有效。
            </para>
            < 注意类型 = "谨慎" >
            JSON 架构验证已移动到其自己的包。有关更多详细信息, 请参阅<see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see>。
            </note>
            </summary>
            <param name="source">要测试的源<see cref="T:Newtonsoft.Json.Linq.JToken"/>。</param>
            <param name="schema">要测试的架构。</param>
            <returns>
            	如果指定的<see cref="T:Newtonsoft.Json.Linq.JToken"/>有效, 则 <c> 真实 </c>; 如果指定的<see cref="T:Newtonsoft.Json.Linq.JToken"/>有效, 则真实的。否则, <c> 虚假的 </c>。
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Extensions.IsValid(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema,System.Collections.Generic.IList{System.String}@)">
            <summary>
            <para>
            确定<see cref="T:Newtonsoft.Json.Linq.JToken"/>是否有效。
            </para>
            < 注意类型 = "谨慎" >
            JSON 架构验证已移动到其自己的包。有关更多详细信息, 请参阅<see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see>。
            </note>
            </summary>
            <param name="source">要测试的源<see cref="T:Newtonsoft.Json.Linq.JToken"/>。</param>
            <param name="schema">要测试的架构。</param>
            <param name="errorMessages">此方法返回时, 包含验证时生成的任何错误消息。 </param>
            <returns>
            	如果指定的<see cref="T:Newtonsoft.Json.Linq.JToken"/>有效, 则 <c> 真实 </c>; 如果指定的<see cref="T:Newtonsoft.Json.Linq.JToken"/>有效, 则真实的。否则, <c> 虚假的 </c>。
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Extensions.Validate(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema)">
            <summary>
            <para>
            验证指定的<see cref="T:Newtonsoft.Json.Linq.JToken"/>。
            </para>
            < 注意类型 = "谨慎" >
            JSON 架构验证已移动到其自己的包。有关更多详细信息, 请参阅<see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see>。
            </note>
            </summary>
            <param name="source">要测试的源<see cref="T:Newtonsoft.Json.Linq.JToken"/>。</param>
            <param name="schema">要测试的架构。</param>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Extensions.Validate(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema,Newtonsoft.Json.Schema.ValidationEventHandler)">
            <summary>
            <para>
            验证指定的<see cref="T:Newtonsoft.Json.Linq.JToken"/>。
            </para>
            < 注意类型 = "谨慎" >
            JSON 架构验证已移动到其自己的包。有关更多详细信息, 请参阅<see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see>。
            </note>
            </summary>
            <param name="source">要测试的源<see cref="T:Newtonsoft.Json.Linq.JToken"/>。</param>
            <param name="schema">要测试的架构。</param>
            <param name="validationEventHandler">验证事件处理程序。</param>
        </member>
        <member name="T:Newtonsoft.Json.Schema.JsonSchema">
            <summary>
            <para>
            JSON 架构的内存中表示形式。
            </para>
            < 注意类型 = "谨慎" >
            JSON 架构验证已移动到其自己的包。有关更多详细信息, 请参阅<see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see>。
            </note>
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Id">
            <summary>
            获取或设置 id。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Title">
            <summary>
            获取或设置标题。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Required">
            <summary>
            获取或设置对象是否是必需的。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.ReadOnly">
            <summary>
            获取或设置对象是否为只读对象。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Hidden">
            <summary>
            获取或设置对象是否对用户可见。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Transient">
            <summary>
            获取或设置对象是否为瞬态对象。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Description">
            <summary>
            获取或设置对象的说明。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Type">
            <summary>
            获取或设置对象允许的值的类型。
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Pattern">
            <summary>
            获取或设置模式。
            </summary>
            <value>The pattern.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.MinimumLength">
            <summary>
            获取或设置最小长度。
            </summary>
            <value>The minimum length.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.MaximumLength">
            <summary>
            获取或设置最大长度。
            </summary>
            <value>The maximum length.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.DivisibleBy">
            <summary>
            获取或设置值应可整除的数字。
            </summary>
            <value>A number that the value should be divisible by.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Minimum">
            <summary>
            获取或设置最小值。
            </summary>
            <value>The minimum.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Maximum">
            <summary>
            获取或设置最大值。
            </summary>
            <value>The maximum.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.ExclusiveMinimum">
            <summary>
            获取或设置一个标志, 该标志指示该值是否不能等于 <c> 最小值 </c> 属性(<see cref="P:Newtonsoft.Json.Schema.JsonSchema.Minimum"/>)定义的数字。
            </summary>
            <value>A flag indicating whether the value can not equal the number defined by the <c>minimum</c> attribute (<see cref="P:Newtonsoft.Json.Schema.JsonSchema.Minimum"/>).</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.ExclusiveMaximum">
            <summary>
            获取或设置一个标志, 该标志指示该值是否不能等于 <c> 最大 </c> 属性(<see cref="P:Newtonsoft.Json.Schema.JsonSchema.Maximum"/>)定义的数字。
            </summary>
            <value>A flag indicating whether the value can not equal the number defined by the <c>maximum</c> attribute (<see cref="P:Newtonsoft.Json.Schema.JsonSchema.Maximum"/>).</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.MinimumItems">
            <summary>
            获取或设置项的最小数量。
            </summary>
            <value>The minimum number of items.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.MaximumItems">
            <summary>
            获取或设置项的最大数目。
            </summary>
            <value>The maximum number of items.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Items">
            <summary>
            获取或设置项目的<see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> of items.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.PositionalItemsValidation">
            <summary>
            获取或设置一个值, 该值指示是否使用来自<see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>的数组位置的<see cref="P:Newtonsoft.Json.Schema.JsonSchema.Items"/>实例验证数组中的项。
            </summary>
            <value>
            	<c>true</c> if items are validated using their array position; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.AdditionalItems">
            <summary>
            获取或设置其他项的<see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> of additional items.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.AllowAdditionalItems">
            <summary>
            获取或设置一个值, 该值指示是否允许其他项。
            </summary>
            <value>
            	<c>true</c> if additional items are allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.UniqueItems">
            <summary>
            获取或设置数组项是否必须是唯一的。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Properties">
            <summary>
            获取或设置属性的<see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> of properties.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.AdditionalProperties">
            <summary>
            获取或设置其他属性的<see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> of additional properties.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.PatternProperties">
            <summary>
            获取或设置模式属性。
            </summary>
            <value>The pattern properties.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.AllowAdditionalProperties">
            <summary>
            获取或设置一个值, 该值指示是否允许其他属性。
            </summary>
            <value>
            	<c>true</c> if additional properties are allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Requires">
            <summary>
            获取或设置所需的属性 (如果存在此属性)。
            </summary>
            <value>The required property if this property is present.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Enum">
            <summary>
            获取或设置允许的有效枚举值的集合。
            </summary>
            <value>A collection of valid enum values allowed.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Disallow">
            <summary>
            获取或设置不允许的类型。
            </summary>
            <value>The disallowed types.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Default">
            <summary>
            获取或设置默认值。
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Extends">
            <summary>
            获取或设置此架构扩展的<see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>的集合。
            </summary>
            <value>The collection of <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/> that this schema extends.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Format">
            <summary>
            获取或设置格式。
            </summary>
            <value>The format.</value>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.#ctor">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>类的新实例。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.Read(Newtonsoft.Json.JsonReader)">
            <summary>
            从指定的<see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>读取<see cref="T:Newtonsoft.Json.JsonReader"/>。
            </summary>
            <param name="reader">包含要读取的 JSON 架构的<see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <returns>表示 JSON 架构的<see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>对象。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.Read(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>
            从指定的<see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>读取<see cref="T:Newtonsoft.Json.JsonReader"/>。
            </summary>
            <param name="reader">包含要读取的 JSON 架构的<see cref="T:Newtonsoft.Json.JsonReader"/>。</param>
            <param name="resolver">解析图式引用时要使用的<see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver"/>。</param>
            <returns>表示 JSON 架构的<see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>对象。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.Parse(System.String)">
            <summary>
            从包含 JSON 架构的字符串加载<see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。
            </summary>
            <param name="json">包含 JSON 架构的<see cref="T:System.String"/>。</param>
            <returns>从包含 JSON 架构的字符串填充的<see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.Parse(System.String,Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>
            使用指定的<see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>从包含 JSON 架构的字符串中加载<see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver"/>。
            </summary>
            <param name="json">包含 JSON 架构的<see cref="T:System.String"/>。</param>
            <param name="resolver">解析器。</param>
            <returns>从包含 JSON 架构的字符串填充的<see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.WriteTo(Newtonsoft.Json.JsonWriter)">
            <summary>
            将此模式写入<see cref="T:Newtonsoft.Json.JsonWriter"/>。
            </summary>
            <param name="writer">这个方法将写入的<see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>
            使用指定的<see cref="T:Newtonsoft.Json.JsonWriter"/>将此模式写入<see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver"/>。
            </summary>
            <param name="writer">这个方法将写入的<see cref="T:Newtonsoft.Json.JsonWriter"/>。</param>
            <param name="resolver">使用的解析器。</param>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.ToString">
            <summary>
            返回一个表示当前<see cref="T:System.String"/>的<see cref="T:System.Object"/>。
            </summary>
            <returns>
            一个代表当前<see cref="T:System.String"/>的<see cref="T:System.Object"/>。
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Schema.JsonSchemaException">
            <summary>
            <para>
            返回有关架构异常的详细信息。
            </para>
            < 注意类型 = "谨慎" >
            JSON 架构验证已移动到其自己的包。有关更多详细信息, 请参阅<see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see>。
            </note>
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.LineNumber">
            <summary>
            获取指示错误发生位置的行号。
            </summary>
            <value>The line number indicating where the error occurred.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.LinePosition">
            <summary>
            获取指示错误发生位置的行位置。
            </summary>
            <value>The line position indicating where the error occurred.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.Path">
            <summary>
            获取发生错误的 JSON 的路径。
            </summary>
            <value>The path to the JSON where the error occurred.</value>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.Schema.JsonSchemaException"/>类的新实例。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.String)">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.Schema.JsonSchemaException"/>类的新实例
            并显示指定的错误消息。
            </summary>
            <param name="message">解释异常原因的错误消息。</param>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.String,System.Exception)">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.Schema.JsonSchemaException"/>类的新实例
            并引用导致此异常的内部异常。
            </summary>
            <param name="message">解释异常原因的错误消息。</param>
            <param name="innerException">导致当前异常的异常, 如果未指定内部异常, 则 <c> null </c>。</param>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.Schema.JsonSchemaException"/>类的新实例。
            </summary>
            <param name="info">保存有关正在引发的异常的序列化对象数据的<see cref="T:System.Runtime.Serialization.SerializationInfo"/>。</param>
            <param name="context">包含有关源或目标的上下文信息的<see cref="T:System.Runtime.Serialization.StreamingContext"/>。</param>
            <exception cref="T:System.ArgumentNullException"></C>, "<paramref name="info"/>" 参数 <c> 为空。</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">类名 <c> 为 null </c> 或<see cref="P:System.Exception.HResult"/>为零 (0)。</exception>
        </member>
        <member name="T:Newtonsoft.Json.Schema.JsonSchemaGenerator">
            <summary>
            <para>
            从指定的<see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>生成一个<see cref="T:System.Type"/>。
            </para>
            < 注意类型 = "谨慎" >
            JSON 架构验证已移动到其自己的包。有关更多详细信息, 请参阅<see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see>。
            </note>
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchemaGenerator.UndefinedSchemaIdHandling">
            <summary>
            获取或设置序列化程序如何处理未定义的架构。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchemaGenerator.ContractResolver">
            <summary>
            获取或设置协定解析程序。
            </summary>
            <value>The contract resolver.</value>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type)">
            <summary>
            从指定的类型生成一个<see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。
            </summary>
            <param name="type">要从中生成<see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>的类型。</param>
            <returns>从指定类型生成的<see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>
            从指定的类型生成一个<see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。
            </summary>
            <param name="type">要从中生成<see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>的类型。</param>
            <param name="resolver">用于解析图式引用的<see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver"/>。</param>
            <returns>从指定类型生成的<see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,System.Boolean)">
            <summary>
            从指定的类型生成一个<see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。
            </summary>
            <param name="type">要从中生成<see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>的类型。</param>
            <param name="rootSchemaNullable">指定生成的根<see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>是否为空。</param>
            <returns>从指定类型生成的<see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,Newtonsoft.Json.Schema.JsonSchemaResolver,System.Boolean)">
            <summary>
            从指定的类型生成一个<see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。
            </summary>
            <param name="type">要从中生成<see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>的类型。</param>
            <param name="resolver">用于解析图式引用的<see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver"/>。</param>
            <param name="rootSchemaNullable">指定生成的根<see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>是否为空。</param>
            <returns>从指定类型生成的<see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Schema.JsonSchemaResolver">
            <summary>
            <para>
            从一个 id 解析<see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。
            </para>
            < 注意类型 = "谨慎" >
            JSON 架构验证已移动到其自己的包。有关更多详细信息, 请参阅<see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see>。
            </note>
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchemaResolver.LoadedSchemas">
            <summary>
            获取或设置加载的架构。
            </summary>
            <value>The loaded schemas.</value>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaResolver.#ctor">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver"/>类的新实例。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaResolver.GetSchema(System.String)">
            <summary>
            获取指定引用的<see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。
            </summary>
            <param name="reference">Id。</param>
            <returns>指定引用的<see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Schema.JsonSchemaType">
            <summary>
            <para>
            <see cref="T:Newtonsoft.Json.Schema.JsonSchema"/>允许的值类型。
            </para>
            < 注意类型 = "谨慎" >
            JSON 架构验证已移动到其自己的包。有关更多详细信息, 请参阅<see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see>。
            </note>
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.None">
            <summary>
            未指定类型。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.String">
            <summary>
            字符串类型。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Float">
            <summary>
            浮动类型。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Integer">
            <summary>
            整数类型。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Boolean">
            <summary>
            布尔类型。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Object">
            <summary>
            对象类型。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Array">
            <summary>
            数组类型。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Null">
            <summary>
            空类型。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Any">
            <summary>
            任何类型。
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling">
            <summary>
            <para>
            指定<see cref="T:Newtonsoft.Json.Schema.JsonSchemaGenerator"/>的未定义架构 Id 处理选项。
            </para>
            < 注意类型 = "谨慎" >
            JSON 架构验证已移动到其自己的包。有关更多详细信息, 请参阅<see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see>。
            </note>
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.None">
            <summary>
            不要推断架构 Id。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.UseTypeName">
            <summary>
            使用. net 类型名称作为架构 Id。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.UseAssemblyQualifiedName">
            <summary>
            使用程序集限定的. net 类型名称作为架构 Id。
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Schema.ValidationEventArgs">
            <summary>
            <para>
            返回与<see cref="T:Newtonsoft.Json.Schema.ValidationEventHandler"/>相关的详细信息。
            </para>
            < 注意类型 = "谨慎" >
            JSON 架构验证已移动到其自己的包。有关更多详细信息, 请参阅<see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see>。
            </note>
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.ValidationEventArgs.Exception">
            <summary>
            获取与验证错误关联的<see cref="T:Newtonsoft.Json.Schema.JsonSchemaException"/>。
            </summary>
            <value>The JsonSchemaException associated with the validation error.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.ValidationEventArgs.Path">
            <summary>
            获取发生验证错误的 JSON 位置的路径。
            </summary>
            <value>The path of the JSON location where the validation error occurred.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.ValidationEventArgs.Message">
            <summary>
            获取与验证错误相对应的文本说明。
            </summary>
            <value>The text description.</value>
        </member>
        <member name="T:Newtonsoft.Json.Schema.ValidationEventHandler">
            <summary>
            <para>
            表示将处理 JSON 模式验证事件和<see cref="T:Newtonsoft.Json.Schema.ValidationEventArgs"/>的回调方法。
            </para>
            < 注意类型 = "谨慎" >
            JSON 架构验证已移动到其自己的包。有关更多详细信息, 请参阅<see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see>。
            </note>
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy">
            <summary>
            骆驼案例命名策略。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy.#ctor(System.Boolean,System.Boolean)">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy"/>类的新实例。
            </summary>
            <param name="processDictionaryKeys">
            指示是否应处理字典键的标志。
            </param>
            <param name="overrideSpecifiedNames">
            指示是否应处理显式指定的属性名称的标志,
            用<see cref="T:Newtonsoft.Json.JsonPropertyAttribute"/>定制的属性名称。
            </param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy"/>类的新实例。
            </summary>
            <param name="processDictionaryKeys">
            指示是否应处理字典键的标志。
            </param>
            <param name="overrideSpecifiedNames">
            指示是否应处理显式指定的属性名称的标志,
            用<see cref="T:Newtonsoft.Json.JsonPropertyAttribute"/>定制的属性名称。
            </param>
            <param name="processExtensionDataNames">
            指示是否应处理扩展数据名称的标志。
            </param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy.#ctor">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy"/>类的新实例。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy.ResolvePropertyName(System.String)">
            <summary>
            解析指定的属性名称。
            </summary>
            <param name="name">要解析的属性名称。</param>
            <returns>解析的属性名称。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver">
            <summary>
            解析类型的成员映射, 为骆驼大小写属性名称。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.#ctor">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver"/>类的新实例。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.ResolveContract(System.Type)">
            <summary>
            解析给定类型的协定。
            </summary>
            <param name="type">要为其解析协定的类型。</param>
            <returns>给定类型的协定。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.DefaultContractResolver">
            <summary>
            用于解决给定<see cref="T:Newtonsoft.Json.JsonSerializer"/>的<see cref="T:Newtonsoft.Json.Serialization.JsonContract"/>。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.DynamicCodeGeneration">
            <summary>
            获取一个值, 该值指示是否正在使用动态代码生成获取和设置成员。
            此值由可用的运行时权限确定。
            </summary>
            <value>
            	<c>true</c> if using dynamic code generation; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.DefaultMembersSearchFlags">
            <summary>
            获取或设置默认成员搜索标志。
            </summary>
            <value>The default members search flags.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.SerializeCompilerGeneratedMembers">
            <summary>
            获取或设置一个值, 该值指示是否应序列化编译器生成的成员。
            </summary>
            <value>
            	<c>true</c> if serialized compiler generated members; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.IgnoreSerializableInterface">
            <summary>
            获取或设置一个值, 该值指示在序列化和反序列化类型时是否忽略<see cref="T:System.Runtime.Serialization.ISerializable"/>接口。
            </summary>
            <value>
            	<c>true</c> if the <see cref="T:System.Runtime.Serialization.ISerializable"/> interface will be ignored when serializing and deserializing types; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.IgnoreSerializableAttribute">
            <summary>
            获取或设置一个值, 该值指示在序列化和反序列化类型时是否忽略<see cref="T:System.SerializableAttribute"/>属性。
            </summary>
            <value>
            	<c>true</c> if the <see cref="T:System.SerializableAttribute"/> attribute will be ignored when serializing and deserializing types; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.IgnoreIsSpecifiedMembers">
            <summary>
            获取或设置一个值, 该值指示在序列化和反序列化类型时是否忽略 Is指定的成员。
            </summary>
            <value>
                <c>true</c> if the IsSpecified members will be ignored when serializing and deserializing types; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.IgnoreShouldSerializeMembers">
            <summary>
            获取或设置一个值, 该值指示在序列化和反序列化类型时是否忽略对象序列化成员。
            </summary>
            <value>
                <c>true</c> if the ShouldSerialize members will be ignored when serializing and deserializing types; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.NamingStrategy">
            <summary>
            获取或设置用于解析属性名称和字典键序列化方式的命名策略。
            </summary>
            <value>The naming strategy used to resolve how property names and dictionary keys are serialized.</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.#ctor">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver"/>类的新实例。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type)">
            <summary>
            解析给定类型的协定。
            </summary>
            <param name="type">要为其解析协定的类型。</param>
            <returns>给定类型的协定。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)">
            <summary>
            获取该类型的可序列化成员。
            </summary>
            <param name="objectType">要为其获取可序列化成员的类型。</param>
            <returns>类型的可序列化成员。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)">
            <summary>
            为给定类型创建一个<see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract"/>。
            </summary>
            <param name="objectType">对象的类型。</param>
            <returns>给定类型的<see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateConstructorParameters(System.Reflection.ConstructorInfo,Newtonsoft.Json.Serialization.JsonPropertyCollection)">
            <summary>
            创建构造函数参数。
            </summary>
            <param name="constructor">要为其创建属性的构造函数。</param>
            <param name="memberProperties">类型的成员属性。</param>
            <returns>给定<see cref="T:System.Reflection.ConstructorInfo"/>的属性。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePropertyFromConstructorParameter(Newtonsoft.Json.Serialization.JsonProperty,System.Reflection.ParameterInfo)">
            <summary>
            为给定<see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/>创建一个<see cref="T:System.Reflection.ParameterInfo"/>。
            </summary>
            <param name="matchingMemberProperty">匹配的成员属性。</param>
            <param name="parameterInfo">构造函数参数。</param>
            <returns>为给定<see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/>创建的<see cref="T:System.Reflection.ParameterInfo"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContractConverter(System.Type)">
            <summary>
            解析协定的默认<see cref="T:Newtonsoft.Json.JsonConverter" />。
            </summary>
            <param name="objectType">对象的类型。</param>
            <returns>合同的默认<see cref="T:Newtonsoft.Json.JsonConverter" />。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDictionaryContract(System.Type)">
            <summary>
            为给定类型创建一个<see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract"/>。
            </summary>
            <param name="objectType">对象的类型。</param>
            <returns>给定类型的<see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateArrayContract(System.Type)">
            <summary>
            为给定类型创建一个<see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract"/>。
            </summary>
            <param name="objectType">对象的类型。</param>
            <returns>给定类型的<see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePrimitiveContract(System.Type)">
            <summary>
            为给定类型创建一个<see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract"/>。
            </summary>
            <param name="objectType">对象的类型。</param>
            <returns>给定类型的<see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateLinqContract(System.Type)">
            <summary>
            为给定类型创建一个<see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract"/>。
            </summary>
            <param name="objectType">对象的类型。</param>
            <returns>给定类型的<see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateISerializableContract(System.Type)">
            <summary>
            为给定类型创建一个<see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract"/>。
            </summary>
            <param name="objectType">对象的类型。</param>
            <returns>给定类型的<see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDynamicContract(System.Type)">
            <summary>
            为给定类型创建一个<see cref="T:Newtonsoft.Json.Serialization.JsonDynamicContract"/>。
            </summary>
            <param name="objectType">对象的类型。</param>
            <returns>给定类型的<see cref="T:Newtonsoft.Json.Serialization.JsonDynamicContract"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateStringContract(System.Type)">
            <summary>
            为给定类型创建一个<see cref="T:Newtonsoft.Json.Serialization.JsonStringContract"/>。
            </summary>
            <param name="objectType">对象的类型。</param>
            <returns>给定类型的<see cref="T:Newtonsoft.Json.Serialization.JsonStringContract"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)">
            <summary>
            确定为给定类型创建的协定类型。
            </summary>
            <param name="objectType">对象的类型。</param>
            <returns>给定类型的<see cref="T:Newtonsoft.Json.Serialization.JsonContract"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type,Newtonsoft.Json.MemberSerialization)">
            <summary>
            创建给定<see cref="T:Newtonsoft.Json.Serialization.JsonContract"/>的属性。
            </summary>
            <param name="type">要为其创建属性的类型。</param>
            /// <param name="memberSerialization">类型的成员序列化模式。</param>
            <returns>给定<see cref="T:Newtonsoft.Json.Serialization.JsonContract"/>的属性。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateMemberValueProvider(System.Reflection.MemberInfo)">
            <summary>
            创建序列化程序用于获取和设置成员的值的<see cref="T:Newtonsoft.Json.Serialization.IValueProvider"/>。
            </summary>
            <param name="member">成员。</param>
            <returns>序列化程序用于从成员获取和设置值的<see cref="T:Newtonsoft.Json.Serialization.IValueProvider"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperty(System.Reflection.MemberInfo,Newtonsoft.Json.MemberSerialization)">
            <summary>
            为给定<see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/>创建一个<see cref="T:System.Reflection.MemberInfo"/>。
            </summary>
            <param name="memberSerialization">成员的母<see cref="T:Newtonsoft.Json.MemberSerialization"/>。</param>
            <param name="member">为其创建<see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/>的成员。</param>
            <returns>为给定<see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/>创建的<see cref="T:System.Reflection.MemberInfo"/>。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolvePropertyName(System.String)">
            <summary>
            解析属性的名称。
            </summary>
            <param name="propertyName">属性的名称。</param>
            <returns>已解析的属性的名称。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveExtensionDataName(System.String)">
            <summary>
            解析扩展数据的名称。默认情况下, 不会对扩展数据名称进行任何更改。
            </summary>
            <param name="extensionDataName">扩展数据的名称。</param>
            <returns>扩展数据的解析名称。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveDictionaryKey(System.String)">
            <summary>
            解析字典的键。默认情况下, <see cref="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolvePropertyName(System.String)"/>用于解析字典键。
            </summary>
            <param name="dictionaryKey">字典的键。</param>
            <returns>已解析字典的键。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.GetResolvedPropertyName(System.String)">
            <summary>
            获取属性的解析名称。
            </summary>
            <param name="propertyName">属性的名称。</param>
            <returns>属性的名称。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.DefaultNamingStrategy">
            <summary>
            默认命名策略。属性名称和字典键保持不变。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultNamingStrategy.ResolvePropertyName(System.String)">
            <summary>
            解析指定的属性名称。
            </summary>
            <param name="name">要解析的属性名称。</param>
            <returns>解析的属性名称。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.DefaultSerializationBinder">
            <summary>
            解析和加载类型名称中的类时使用的默认序列化绑定活页夹。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultSerializationBinder.#ctor">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.Serialization.DefaultSerializationBinder"/>类的新实例。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToType(System.String,System.String)">
            <summary>
            在派生类中重写时, 控制序列化对象与类型的绑定。
            </summary>
            <param name="assemblyName">指定序列化对象的<see cref="T:System.Reflection.Assembly"/>名称。</param>
            <param name="typeName">指定序列化对象的<see cref="T:System.Type"/>名称。</param>
            <returns>
            格式化程序创建的对象的类型。
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToName(System.Type,System.String@,System.String@)">
            <summary>
            在派生类中重写时, 控制序列化对象与类型的绑定。
            </summary>
            <param name="serializedType">格式化程序创建的对象的类型。</param>
            <param name="assemblyName">指定序列化对象的<see cref="T:System.Reflection.Assembly"/>名称。</param>
            <param name="typeName">指定序列化对象的<see cref="T:System.Type"/>名称。</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.DiagnosticsTraceWriter">
            <summary>
            表示写入应用程序的<see cref="T:System.Diagnostics.TraceListener"/>实例的跟踪编写器。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DiagnosticsTraceWriter.LevelFilter">
            <summary>
            获取将用于筛选传递给编写器的跟踪消息的<see cref="T:System.Diagnostics.TraceLevel"/>。
            例如, <see cref="F:System.Diagnostics.TraceLevel.Info"/>的滤光层将排除<see cref="F:System.Diagnostics.TraceLevel.Verbose"/>信息, 并包括<see cref="F:System.Diagnostics.TraceLevel.Info"/>,
            <see cref="F:System.Diagnostics.TraceLevel.Warning"/>和<see cref="F:System.Diagnostics.TraceLevel.Error"/>的信息。
            </summary>
            <value>
            The <see cref="T:System.Diagnostics.TraceLevel"/> that will be used to filter the trace messages passed to the writer.
            </value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DiagnosticsTraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
            <summary>
            写入指定的跟踪级别、消息和可选异常。
            </summary>
            <param name="level">在那里写这个痕迹的<see cref="T:System.Diagnostics.TraceLevel"/>。</param>
            <param name="message">跟踪消息。</param>
            <param name="ex">跟踪异常。此参数是可选的。</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ErrorContext">
            <summary>
            提供有关错误的信息。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Error">
            <summary>
            获取错误。
            </summary>
            <value>The error.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ErrorContext.OriginalObject">
            <summary>
            获取导致错误的原始对象。
            </summary>
            <value>The original object that caused the error.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Member">
            <summary>
            获取导致错误的成员。
            </summary>
            <value>The member that caused the error.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Path">
            <summary>
            获取发生错误的 JSON 位置的路径。
            </summary>
            <value>The path of the JSON location where the error occurred.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Handled">
            <summary>
            获取或设置一个值, 该值指示是否处理此<see cref="T:Newtonsoft.Json.Serialization.ErrorContext"/>。
            </summary>
            <value><c>true</c> if handled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ErrorEventArgs">
            <summary>
            为 "错误" 事件提供数据。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ErrorEventArgs.CurrentObject">
            <summary>
            获取要对其引发错误事件的当前对象。
            </summary>
            <value>The current object the error event is being raised against.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ErrorEventArgs.ErrorContext">
            <summary>
            获取错误上下文。
            </summary>
            <value>The error context.</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ErrorEventArgs.#ctor(System.Object,Newtonsoft.Json.Serialization.ErrorContext)">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.Serialization.ErrorEventArgs"/>类的新实例。
            </summary>
            <param name="currentObject">当前对象。</param>
            <param name="errorContext">错误上下文。</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ExpressionValueProvider">
            <summary>
            使用动态方法获取和设置<see cref="T:System.Reflection.MemberInfo"/>的值。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ExpressionValueProvider.#ctor(System.Reflection.MemberInfo)">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.Serialization.ExpressionValueProvider"/>类的新实例。
            </summary>
            <param name="memberInfo">成员信息。</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ExpressionValueProvider.SetValue(System.Object,System.Object)">
            <summary>
            设置值。
            </summary>
            <param name="target">要在其上设置值的目标。</param>
            <param name="value">要在目标上设置的值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ExpressionValueProvider.GetValue(System.Object)">
            <summary>
            获取值。
            </summary>
            <param name="target">要从中获取值的目标。</param>
            <returns>值。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.IAttributeProvider">
            <summary>
            提供获取属性的方法。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IAttributeProvider.GetAttributes(System.Boolean)">
            <summary>
            返回所有属性的集合, 如果没有属性, 则返回空集合。
            </summary>
            <param name="inherit">当 <c> 真实 </c> 时, 请查找继承的自定义属性的层次结构链。</param>
            <returns><see cref="T:System.Attribute"/>的集合, 或空的集合。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IAttributeProvider.GetAttributes(System.Type,System.Boolean)">
            <summary>
            返回属性的集合 (按类型标识), 如果没有属性, 则返回空集合。
            </summary>
            <param name="attributeType">属性的类型。</param>
            <param name="inherit">当 <c> 真实 </c> 时, 请查找继承的自定义属性的层次结构链。</param>
            <returns><see cref="T:System.Attribute"/>的集合, 或空的集合。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.IContractResolver">
            <summary>
            用于解决给定<see cref="T:Newtonsoft.Json.JsonSerializer"/>的<see cref="T:Newtonsoft.Json.Serialization.JsonContract"/>。
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeContractResolverObject" title="IContractResolver Class" />
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeContractResolverExample" title="IContractResolver Example" />
            </example>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IContractResolver.ResolveContract(System.Type)">
            <summary>
            解析给定类型的协定。
            </summary>
            <param name="type">要为其解析协定的类型。</param>
            <returns>给定类型的协定。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.IReferenceResolver">
            <summary>
            用于解析<see cref="T:Newtonsoft.Json.JsonSerializer"/>对 JSON 进行序列化和反序列化时的引用。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.ResolveReference(System.Object,System.String)">
            <summary>
            解析对其对象的引用。
            </summary>
            <param name="context">序列化上下文。</param>
            <param name="reference">要解析的引用。</param>
            <returns>从引用解析的对象。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.GetReference(System.Object,System.Object)">
            <summary>
            获取指定对象的引用。
            </summary>
            <param name="context">序列化上下文。</param>
            <param name="value">要获取其引用的对象。</param>
            <returns>对对象的引用。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.IsReferenced(System.Object,System.Object)">
            <summary>
            确定是否引用指定的对象。
            </summary>
            <param name="context">序列化上下文。</param>
            <param name="value">要测试引用的对象。</param>
            <returns>
            	如果引用了指定的对象, 则 <c> 为 true </c>; 如果引用了指定的对象, 则为 true。否则, <c> 虚假的 </c>。
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.AddReference(System.Object,System.String,System.Object)">
            <summary>
            添加对指定对象的引用。
            </summary>
            <param name="context">序列化上下文。</param>
            <param name="reference">引用。</param>
            <param name="value">要引用的对象。</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ISerializationBinder">
            <summary>
            允许用户控制类加载并强制加载哪个类。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ISerializationBinder.BindToType(System.String,System.String)">
            <summary>
            实现后, 控制序列化对象与类型的绑定。
            </summary>
            <param name="assemblyName">指定序列化对象的<see cref="T:System.Reflection.Assembly"/>名称。</param>
            <param name="typeName">指定序列化对象的<see cref="T:System.Type"/>名称</param>
            <returns>格式化程序创建的对象的类型。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ISerializationBinder.BindToName(System.Type,System.String@,System.String@)">
            <summary>
            实现后, 控制序列化对象与类型的绑定。
            </summary>
            <param name="serializedType">格式化程序创建的对象的类型。</param>
            <param name="assemblyName">指定序列化对象的<see cref="T:System.Reflection.Assembly"/>名称。</param>
            <param name="typeName">指定序列化对象的<see cref="T:System.Type"/>名称。</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ITraceWriter">
            <summary>
            表示跟踪编写器。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ITraceWriter.LevelFilter">
            <summary>
            获取将用于筛选传递给编写器的跟踪消息的<see cref="T:System.Diagnostics.TraceLevel"/>。
            例如, <see cref="F:System.Diagnostics.TraceLevel.Info"/>的滤光层将排除<see cref="F:System.Diagnostics.TraceLevel.Verbose"/>信息, 并包括<see cref="F:System.Diagnostics.TraceLevel.Info"/>,
            <see cref="F:System.Diagnostics.TraceLevel.Warning"/>和<see cref="F:System.Diagnostics.TraceLevel.Error"/>的信息。
            </summary>
            <value>The <see cref="T:System.Diagnostics.TraceLevel"/> that will be used to filter the trace messages passed to the writer.</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ITraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
            <summary>
            写入指定的跟踪级别、消息和可选异常。
            </summary>
            <param name="level">在那里写这个痕迹的<see cref="T:System.Diagnostics.TraceLevel"/>。</param>
            <param name="message">跟踪消息。</param>
            <param name="ex">跟踪异常。此参数是可选的。</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.IValueProvider">
            <summary>
            提供获取和设置值的方法。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IValueProvider.SetValue(System.Object,System.Object)">
            <summary>
            设置值。
            </summary>
            <param name="target">要在其上设置值的目标。</param>
            <param name="value">要在目标上设置的值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IValueProvider.GetValue(System.Object)">
            <summary>
            获取值。
            </summary>
            <param name="target">要从中获取值的目标。</param>
            <returns>值。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonArrayContract">
            <summary>
            <see cref="T:System.Type"/>使用的<see cref="T:Newtonsoft.Json.JsonSerializer"/>的合同细节。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonArrayContract.CollectionItemType">
            <summary>
            获取集合项的<see cref="T:System.Type"/>。
            </summary>
            <value>The <see cref="T:System.Type"/> of the collection items.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonArrayContract.IsMultidimensionalArray">
            <summary>
            获取一个值, 该值指示集合类型是否为多维数组。
            </summary>
            <value><c>true</c> if the collection type is a multidimensional array; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonArrayContract.OverrideCreator">
            <summary>
            获取或设置用于创建对象的函数。设置此函数将覆盖<see cref="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreator"/>。
            </summary>
            <value>The function used to create the object.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonArrayContract.HasParameterizedCreator">
            <summary>
            获取一个值, 该值指示创建者是否具有具有集合值的参数。
            </summary>
            <value><c>true</c> if the creator has a parameter with the collection values; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonArrayContract.#ctor(System.Type)">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract"/>类的新实例。
            </summary>
            <param name="underlyingType">协定的基础类型。</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonContainerContract">
            <summary>
            <see cref="T:System.Type"/>使用的<see cref="T:Newtonsoft.Json.JsonSerializer"/>的合同细节。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemConverter">
            <summary>
            获取或设置默认集合项<see cref="T:Newtonsoft.Json.JsonConverter" />。
            </summary>
            <value>The converter.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemIsReference">
            <summary>
            获取或设置一个值, 该值指示集合项是否保留对象引用。
            </summary>
            <value><c>true</c> if collection items preserve object references; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemReferenceLoopHandling">
            <summary>
            获取或设置集合项引用循环处理。
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemTypeNameHandling">
            <summary>
            获取或设置集合项类型名称处理。
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonContainerContract.#ctor(System.Type)">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.Serialization.JsonContainerContract"/>类的新实例。
            </summary>
            <param name="underlyingType">协定的基础类型。</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.SerializationCallback">
            <summary>
            处理<see cref="T:Newtonsoft.Json.JsonSerializer"/>序列化回调事件。
            </summary>
            <param name="o">引发回调事件的对象。</param>
            <param name="context">流上下文。</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.SerializationErrorCallback">
            <summary>
            处理<see cref="T:Newtonsoft.Json.JsonSerializer"/>序列化错误回调事件。
            </summary>
            <param name="o">引发回调事件的对象。</param>
            <param name="context">流上下文。</param>
            <param name="errorContext">错误上下文。</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ExtensionDataSetter">
            <summary>
            在反序列化过程中设置对象的扩展数据。
            </summary>
            <param name="o">要在其上设置扩展数据的对象。</param>
            <param name="key">扩展数据键。</param>
            <param name="value">扩展数据值。</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ExtensionDataGetter">
            <summary>
            在序列化过程中获取对象的扩展数据。
            </summary>
            <param name="o">要在其上设置扩展数据的对象。</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonContract">
            <summary>
            <see cref="T:System.Type"/>使用的<see cref="T:Newtonsoft.Json.JsonSerializer"/>的合同细节。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.UnderlyingType">
            <summary>
            获取协定的基础类型。
            </summary>
            <value>The underlying type for the contract.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.CreatedType">
            <summary>
            获取或设置反序列化过程中创建的类型。
            </summary>
            <value>The type created during deserialization.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.IsReference">
            <summary>
            获取或设置是否将此类型协定序列化为引用。
            </summary>
            <value>Whether this type contract is serialized as a reference.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.Converter">
            <summary>
            获取或设置此协定的默认<see cref="T:Newtonsoft.Json.JsonConverter" />。
            </summary>
            <value>The converter.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserializedCallbacks">
            <summary>
            获取或设置对象反序列化后立即调用的所有方法。
            </summary>
            <value>The methods called immediately after deserialization of the object.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserializingCallbacks">
            <summary>
            获取或设置在反序列化对象期间调用的所有方法。
            </summary>
            <value>The methods called during deserialization of the object.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerializedCallbacks">
            <summary>
            获取或设置对象图序列化后调用的所有方法。
            </summary>
            <value>The methods called after serialization of the object graph.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerializingCallbacks">
            <summary>
            获取或设置序列化对象之前调用的所有方法。
            </summary>
            <value>The methods called before serialization of the object.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnErrorCallbacks">
            <summary>
            获取或设置在对象的序列化过程中引发错误时调用的所有方法。
            </summary>
            <value>The methods called when an error is thrown during the serialization of the object.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreator">
            <summary>
            获取或设置用于创建对象的默认创建者方法。
            </summary>
            <value>The default creator method used to create the object.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreatorNonPublic">
            <summary>
            获取或设置一个值, 该值指示默认创建者是否为非公共创建者。
            </summary>
            <value><c>true</c> if the default object creator is non-public; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonDictionaryContract">
            <summary>
            <see cref="T:System.Type"/>使用的<see cref="T:Newtonsoft.Json.JsonSerializer"/>的合同细节。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.DictionaryKeyResolver">
            <summary>
            获取或设置字典密钥解析程序。
            </summary>
            <value>The dictionary key resolver.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.DictionaryKeyType">
            <summary>
            获取字典键的<see cref="T:System.Type"/>。
            </summary>
            <value>The <see cref="T:System.Type"/> of the dictionary keys.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.DictionaryValueType">
            <summary>
            获取字典值的<see cref="T:System.Type"/>。
            </summary>
            <value>The <see cref="T:System.Type"/> of the dictionary values.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.OverrideCreator">
            <summary>
            获取或设置用于创建对象的函数。设置此函数将覆盖<see cref="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreator"/>。
            </summary>
            <value>The function used to create the object.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.HasParameterizedCreator">
            <summary>
            获取一个值, 该值指示创建者是否具有具有字典值的参数。
            </summary>
            <value><c>true</c> if the creator has a parameter with the dictionary values; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonDictionaryContract.#ctor(System.Type)">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract"/>类的新实例。
            </summary>
            <param name="underlyingType">协定的基础类型。</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonDynamicContract">
            <summary>
            <see cref="T:System.Type"/>使用的<see cref="T:Newtonsoft.Json.JsonSerializer"/>的合同细节。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonDynamicContract.Properties">
            <summary>
            获取对象的属性。
            </summary>
            <value>The object's properties.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonDynamicContract.PropertyNameResolver">
            <summary>
            获取或设置属性名称解析程序。
            </summary>
            <value>The property name resolver.</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonDynamicContract.#ctor(System.Type)">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.Serialization.JsonDynamicContract"/>类的新实例。
            </summary>
            <param name="underlyingType">协定的基础类型。</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonISerializableContract">
            <summary>
            <see cref="T:System.Type"/>使用的<see cref="T:Newtonsoft.Json.JsonSerializer"/>的合同细节。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonISerializableContract.ISerializableCreator">
            <summary>
            获取或设置<see cref="T:System.Runtime.Serialization.ISerializable"/>对象构造函数。
            </summary>
            <value>The <see cref="T:System.Runtime.Serialization.ISerializable"/> object constructor.</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonISerializableContract.#ctor(System.Type)">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract"/>类的新实例。
            </summary>
            <param name="underlyingType">协定的基础类型。</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonLinqContract">
            <summary>
            <see cref="T:System.Type"/>使用的<see cref="T:Newtonsoft.Json.JsonSerializer"/>的合同细节。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonLinqContract.#ctor(System.Type)">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract"/>类的新实例。
            </summary>
            <param name="underlyingType">协定的基础类型。</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonObjectContract">
            <summary>
            <see cref="T:System.Type"/>使用的<see cref="T:Newtonsoft.Json.JsonSerializer"/>的合同细节。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.MemberSerialization">
            <summary>
            获取或设置对象成员序列化。
            </summary>
            <value>The member object serialization.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ItemRequired">
            <summary>
            获取或设置一个值, 该值指示是否需要对象的属性。
            </summary>
            <value>
            	A value indicating whether the object's properties are required.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ItemNullValueHandling">
            <summary>
            获取或设置在序列化和反序列化过程中如何处理具有空值的对象的属性。
            </summary>
            <value>How the object's properties with null values are handled during serialization and deserialization.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.Properties">
            <summary>
            获取对象的属性。
            </summary>
            <value>The object's properties.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.CreatorParameters">
            <summary>
            获取定义与<see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/>一起使用的参数的<see cref="P:Newtonsoft.Json.Serialization.JsonObjectContract.OverrideCreator"/>实例的集合。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.OverrideCreator">
            <summary>
            获取或设置用于创建对象的函数。设置此函数将覆盖<see cref="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreator"/>。
            此函数是用<see cref="P:Newtonsoft.Json.Serialization.JsonObjectContract.CreatorParameters"/>集合定义的参数集合调用的。
            </summary>
            <value>The function used to create the object.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ExtensionDataSetter">
            <summary>
            获取或设置扩展数据设置器。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ExtensionDataGetter">
            <summary>
            获取或设置扩展数据 getter。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ExtensionDataValueType">
            <summary>
            获取或设置扩展数据值类型。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ExtensionDataNameResolver">
            <summary>
            获取或设置扩展数据名称解析程序。
            </summary>
            <value>The extension data name resolver.</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonObjectContract.#ctor(System.Type)">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract"/>类的新实例。
            </summary>
            <param name="underlyingType">协定的基础类型。</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract">
            <summary>
            <see cref="T:System.Type"/>使用的<see cref="T:Newtonsoft.Json.JsonSerializer"/>的合同细节。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonPrimitiveContract.#ctor(System.Type)">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract"/>类的新实例。
            </summary>
            <param name="underlyingType">协定的基础类型。</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonProperty">
            <summary>
            将 JSON 属性映射到. net 成员或构造函数参数。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.PropertyName">
            <summary>
            获取或设置属性的名称。
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.DeclaringType">
            <summary>
            获取或设置声明此属性的类型。
            </summary>
            <value>The type that declared this property.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Order">
            <summary>
            获取或设置成员的序列化顺序。
            </summary>
            <value>The numeric order of serialization.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.UnderlyingName">
            <summary>
            获取或设置基础成员或参数的名称。
            </summary>
            <value>The name of the underlying member or parameter.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ValueProvider">
            <summary>
            获取将在序列化过程中获取并设置<see cref="T:Newtonsoft.Json.Serialization.IValueProvider"/>的<see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/>。
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Serialization.IValueProvider"/> that will get and set the <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> during serialization.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.AttributeProvider">
            <summary>
            获取或设置此属性的<see cref="T:Newtonsoft.Json.Serialization.IAttributeProvider"/>。
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Serialization.IAttributeProvider"/> for this property.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.PropertyType">
            <summary>
            获取或设置属性的类型。
            </summary>
            <value>The type of the property.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Converter">
            <summary>
            获取或设置属性的<see cref="T:Newtonsoft.Json.JsonConverter" />。
            如果设置此转换器, 则优先于属性类型的协定转换器。
            </summary>
            <value>The converter.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.MemberConverter">
            <summary>
            获取或设置成员转换器。
            </summary>
            <value>The member converter.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Ignored">
            <summary>
            获取或设置一个值, 该值指示是否忽略此<see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/>。
            </summary>
            <value><c>true</c> if ignored; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Readable">
            <summary>
            获取或设置一个值, 该值指示此<see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/>是否可读。
            </summary>
            <value><c>true</c> if readable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Writable">
            <summary>
            获取或设置一个值, 该值指示此<see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/>是否可写。
            </summary>
            <value><c>true</c> if writable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.HasMemberAttribute">
            <summary>
            获取或设置一个值, 该值指示此<see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/>是否具有成员属性。
            </summary>
            <value><c>true</c> if has a member attribute; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.DefaultValue">
            <summary>
            获取默认值。
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Required">
            <summary>
            获取或设置一个值, 该值指示是否需要此<see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/>。
            </summary>
            <value>A value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/> is required.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.IsReference">
            <summary>
            获取或设置一个值, 该值指示此属性是否保留对象引用。
            </summary>
            <value>
            	<c>true</c> if this instance is reference; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.NullValueHandling">
            <summary>
            获取或设置属性空值处理。
            </summary>
            <value>The null value handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.DefaultValueHandling">
            <summary>
            获取或设置属性默认值处理。
            </summary>
            <value>The default value handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ReferenceLoopHandling">
            <summary>
            获取或设置属性引用循环处理。
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ObjectCreationHandling">
            <summary>
            获取或设置属性对象创建处理。
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.TypeNameHandling">
            <summary>
            获取、设置或设置类型名称处理。
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ShouldSerialize">
            <summary>
            获取或设置用于确定是否应序列化属性的谓词。
            </summary>
            <value>A predicate used to determine whether the property should be serialized.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ShouldDeserialize">
            <summary>
            获取或设置用于确定是否应反序列化属性的谓词。
            </summary>
            <value>A predicate used to determine whether the property should be deserialized.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.GetIsSpecified">
            <summary>
            获取或设置用于确定是否应序列化属性的谓词。
            </summary>
            <value>A predicate used to determine whether the property should be serialized.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.SetIsSpecified">
            <summary>
            获取或设置用于设置属性是否已反序列化的操作。
            </summary>
            <value>An action used to set whether the property has been deserialized.</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonProperty.ToString">
            <summary>
            返回表示此实例的<see cref="T:System.String"/>。
            </summary>
            <returns>
            一个代表这个实例的<see cref="T:System.String"/>。
            </returns>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemConverter">
            <summary>
            获取或设置序列化属性的集合项时使用的转换器。
            </summary>
            <value>The collection's items converter.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemIsReference">
            <summary>
            获取或设置是否将此属性的集合项序列化为引用。
            </summary>
            <value>Whether this property's collection items are serialized as a reference.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemTypeNameHandling">
            <summary>
            获取或设置序列化属性的集合项时使用的类型名称处理。
            </summary>
            <value>The collection's items type name handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemReferenceLoopHandling">
            <summary>
            获取或设置序列化属性的集合项时使用的引用循环处理。
            </summary>
            <value>The collection's items reference loop handling.</value>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonPropertyCollection">
            <summary>
            <see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/>物体的集合。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.#ctor(System.Type)">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.Serialization.JsonPropertyCollection"/>类的新实例。
            </summary>
            <param name="type">类型。</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetKeyForItem(Newtonsoft.Json.Serialization.JsonProperty)">
            <summary>
            在派生类中实现时, 从指定的元素中提取键。
            </summary>
            <param name="item">从中提取键的元素。</param>
            <returns>指定元素的键。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.AddProperty(Newtonsoft.Json.Serialization.JsonProperty)">
            <summary>
            添加一个<see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/>对象。
            </summary>
            <param name="property">要添加到集合的属性。</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetClosestMatchProperty(System.String)">
            <summary>
            获取最近的匹配<see cref="T:Newtonsoft.Json.Serialization.JsonProperty"/>对象。
            第一次尝试得到一个精确的大小像<paramref name="propertyName"/>的情况下匹配, 然后
            不区分大小写的匹配。
            </summary>
            <param name="propertyName">属性的名称。</param>
            <returns>如果找到匹配的属性, 则为匹配的属性。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetProperty(System.String,System.StringComparison)">
            <summary>
            按属性名称获取属性。
            </summary>
            <param name="propertyName">要获取的属性的名称。</param>
            <param name="comparisonType">键入属性名称字符串比较。</param>
            <returns>如果找到匹配的属性, 则为匹配的属性。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonStringContract">
            <summary>
            <see cref="T:System.Type"/>使用的<see cref="T:Newtonsoft.Json.JsonSerializer"/>的合同细节。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonStringContract.#ctor(System.Type)">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.Serialization.JsonStringContract"/>类的新实例。
            </summary>
            <param name="underlyingType">协定的基础类型。</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonTypeReflector.CreateJsonConverterInstance(System.Type,System.Object[])">
            <summary>
            查找并创建参数所描述的<see cref="T:Newtonsoft.Json.JsonConverter"/>类型的实例。
            </summary>
            <param name="converterType">要创建的<see cref="T:Newtonsoft.Json.JsonConverter"/>类型。</param>
            <param name="converterArgs">要传递给 Json转换器的初始化构造函数的可选参数。
            如果 <c> null </c>, 则使用默认构造函数。</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.MemoryTraceWriter">
            <summary>
            表示写入内存的跟踪编写器。当跟踪消息限制为
            然后, 在添加新邮件时, 将删除旧的跟踪消息。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.MemoryTraceWriter.LevelFilter">
            <summary>
            获取将用于筛选传递给编写器的跟踪消息的<see cref="T:System.Diagnostics.TraceLevel"/>。
            例如, <see cref="F:System.Diagnostics.TraceLevel.Info"/>的滤光层将排除<see cref="F:System.Diagnostics.TraceLevel.Verbose"/>信息, 并包括<see cref="F:System.Diagnostics.TraceLevel.Info"/>,
            <see cref="F:System.Diagnostics.TraceLevel.Warning"/>和<see cref="F:System.Diagnostics.TraceLevel.Error"/>的信息。
            </summary>
            <value>
            The <see cref="T:System.Diagnostics.TraceLevel"/> that will be used to filter the trace messages passed to the writer.
            </value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.#ctor">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.Serialization.MemoryTraceWriter"/>类的新实例。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
            <summary>
            写入指定的跟踪级别、消息和可选异常。
            </summary>
            <param name="level">在那里写这个痕迹的<see cref="T:System.Diagnostics.TraceLevel"/>。</param>
            <param name="message">跟踪消息。</param>
            <param name="ex">跟踪异常。此参数是可选的。</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.GetTraceMessages">
            <summary>
            返回最新跟踪消息的枚举。
            </summary>
            <returns>最新跟踪消息的枚举。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.ToString">
            <summary>
            返回最新跟踪消息的<see cref="T:System.String"/>。
            </summary>
            <returns>
            一个<see cref="T:System.String"/>的最新的跟踪消息。
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.NamingStrategy">
            <summary>
            用于解析属性名称和字典键序列化方式的基类。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.NamingStrategy.ProcessDictionaryKeys">
            <summary>
            指示是否应处理字典键的标志。
            默认为 <c> 虚假 </c>。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.NamingStrategy.ProcessExtensionDataNames">
            <summary>
            指示是否应处理扩展数据名称的标志。
            默认为 <c> 虚假 </c>。
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.NamingStrategy.OverrideSpecifiedNames">
            <summary>
            指示是否显式指定属性名称的标志,
            例如, 应该对用<see cref="T:Newtonsoft.Json.JsonPropertyAttribute"/>定制的属性名称进行处理。
            默认为 <c> 虚假 </c>。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.NamingStrategy.GetPropertyName(System.String,System.Boolean)">
            <summary>
            获取给定属性名称的序列化名称。
            </summary>
            <param name="name">初始属性名称。</param>
            <param name="hasSpecifiedName">指示属性是否已显式指定名称的标志。</param>
            <returns>序列化的属性名称。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.NamingStrategy.GetExtensionDataName(System.String)">
            <summary>
            获取给定扩展数据名称的序列化名称。
            </summary>
            <param name="name">初始扩展数据名称。</param>
            <returns>序列化的扩展数据名称。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.NamingStrategy.GetDictionaryKey(System.String)">
            <summary>
            获取给定字典键的序列化键。
            </summary>
            <param name="key">初始字典键。</param>
            <returns>序列化的字典键。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.NamingStrategy.ResolvePropertyName(System.String)">
            <summary>
            解析指定的属性名称。
            </summary>
            <param name="name">要解析的属性名称。</param>
            <returns>解析的属性名称。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ObjectConstructor`1">
            <summary>
            表示构造对象的方法。
            </summary>
            <typeparam name="T">要创建的对象类型。</typeparam>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.OnErrorAttribute">
            <summary>
            当应用于方法时, 指定在序列化对象时调用该方法。
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ReflectionAttributeProvider">
            <summary>
            提供从<see cref="T:System.Type"/>、<see cref="T:System.Reflection.MemberInfo"/>、<see cref="T:System.Reflection.ParameterInfo"/>或<see cref="T:System.Reflection.Assembly"/>获取属性的方法。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ReflectionAttributeProvider.#ctor(System.Object)">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.Serialization.ReflectionAttributeProvider"/>类的新实例。
            </summary>
            <param name="attributeProvider">要为其获取属性的实例。这个参数应该是<see cref="T:System.Type"/>、<see cref="T:System.Reflection.MemberInfo"/>、<see cref="T:System.Reflection.ParameterInfo"/>或<see cref="T:System.Reflection.Assembly"/>。</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ReflectionAttributeProvider.GetAttributes(System.Boolean)">
            <summary>
            返回所有属性的集合, 如果没有属性, 则返回空集合。
            </summary>
            <param name="inherit">当 <c> 真实 </c> 时, 请查找继承的自定义属性的层次结构链。</param>
            <returns><see cref="T:System.Attribute"/>的集合, 或空的集合。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ReflectionAttributeProvider.GetAttributes(System.Type,System.Boolean)">
            <summary>
            返回属性的集合 (按类型标识), 如果没有属性, 则返回空集合。
            </summary>
            <param name="attributeType">属性的类型。</param>
            <param name="inherit">当 <c> 真实 </c> 时, 请查找继承的自定义属性的层次结构链。</param>
            <returns><see cref="T:System.Attribute"/>的集合, 或空的集合。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ReflectionValueProvider">
            <summary>
            使用反射获取和设置<see cref="T:System.Reflection.MemberInfo"/>的值。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.#ctor(System.Reflection.MemberInfo)">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.Serialization.ReflectionValueProvider"/>类的新实例。
            </summary>
            <param name="memberInfo">成员信息。</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.SetValue(System.Object,System.Object)">
            <summary>
            设置值。
            </summary>
            <param name="target">要在其上设置值的目标。</param>
            <param name="value">要在目标上设置的值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.GetValue(System.Object)">
            <summary>
            获取值。
            </summary>
            <param name="target">要从中获取值的目标。</param>
            <returns>值。</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy">
            <summary>
            蛇箱命名策略。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy.#ctor(System.Boolean,System.Boolean)">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy"/>类的新实例。
            </summary>
            <param name="processDictionaryKeys">
            指示是否应处理字典键的标志。
            </param>
            <param name="overrideSpecifiedNames">
            指示是否应处理显式指定的属性名称的标志,
            用<see cref="T:Newtonsoft.Json.JsonPropertyAttribute"/>定制的属性名称。
            </param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy"/>类的新实例。
            </summary>
            <param name="processDictionaryKeys">
            指示是否应处理字典键的标志。
            </param>
            <param name="overrideSpecifiedNames">
            指示是否应处理显式指定的属性名称的标志,
            用<see cref="T:Newtonsoft.Json.JsonPropertyAttribute"/>定制的属性名称。
            </param>
            <param name="processExtensionDataNames">
            指示是否应处理扩展数据名称的标志。
            </param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy.#ctor">
            <summary>
            初始化<see cref="T:Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy"/>类的新实例。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy.ResolvePropertyName(System.String)">
            <summary>
            解析指定的属性名称。
            </summary>
            <param name="name">要解析的属性名称。</param>
            <returns>解析的属性名称。</returns>
        </member>
        <member name="T:Newtonsoft.Json.StringEscapeHandling">
            <summary>
            指定编写 JSON 文本时如何转义字符串。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.StringEscapeHandling.Default">
            <summary>
            仅转义控制字符 (例如换行符)。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.StringEscapeHandling.EscapeNonAscii">
            <summary>
            所有非 ascii 和控制字符 (例如换行符) 都将被转义。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.StringEscapeHandling.EscapeHtml">
            <summary>
            Html (&lt;、&gt;、&amp;、') 和控件字符 (例如换行符)。
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.TypeNameAssemblyFormatHandling">
            <summary>
            指示将在反序列化过程中用于定位和加载程序集的方法。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.TypeNameAssemblyFormatHandling.Simple">
            <summary>
            在简单模式下, 反序列化过程中使用的程序集不需要与序列化过程中使用的程序集完全匹配。具体来说, 版本号不需要匹配, 因为 <c> 这样的 "松散名称" </c> 的方法用于加载程序集。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.TypeNameAssemblyFormatHandling.Full">
            <summary>
            在完全模式下, 反序列化过程中使用的程序集必须与序列化过程中使用的程序集完全匹配。使用 <c> </C> 方法加载程序集。
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.TypeNameHandling">
            <summary>
            指定<see cref="T:Newtonsoft.Json.JsonSerializer"/>的类型名称处理选项。
            </summary>
            <remarks>
            当您的应用程序从外部源反序列化 JSON 时, 应谨慎使用<see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling"/>。
            传入类型应使用自定义<see cref="P:Newtonsoft.Json.JsonSerializer.SerializationBinder"/>进行验证
            当反序列化与<see cref="F:Newtonsoft.Json.TypeNameHandling.None"/>以外的值。
            </remarks>
        </member>
        <member name="F:Newtonsoft.Json.TypeNameHandling.None">
            <summary>
            序列化类型时不包括. net 类型名称。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.TypeNameHandling.Objects">
            <summary>
            在序列化到 JSON 对象结构时包括. net 类型名称。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.TypeNameHandling.Arrays">
            <summary>
            在序列化到 JSON 数组结构时包括. net 类型名称。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.TypeNameHandling.All">
            <summary>
            序列化时始终包括. net 类型名称。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.TypeNameHandling.Auto">
            <summary>
            当序列化的对象类型与其声明的类型不同时, 包括. net 类型名称。
            请注意, 默认情况下不包括根序列化对象。在 JSON 中包括根对象的类型名称
            必须使用<see cref="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,System.Type,Newtonsoft.Json.JsonSerializerSettings)"/>指定根型对象
            或<see cref="M:Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter,System.Object,System.Type)"/>。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            确定集合是 <c> 空 </c> 还是空。
            </summary>
            <param name="collection">集合。</param>
            <returns>
            	如果集合 <c> 为空 </c> 或空, 则 <c> 为 true </c>; 如果集合为空, 则为 true。否则, <c> 虚假的 </c>。
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            将指定集合的元素添加到指定的泛型<see cref="T:System.Collections.Generic.IList`1"/>。
            </summary>
            <param name="initial">要添加到的列表。</param>
            <param name="collection">要添加的元素的集合。</param>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.ConvertOrCast(System.Object,System.Globalization.CultureInfo,System.Type)">
            <summary>
            将值转换为指定的类型。如果无法转换该值, 则
            值是否可分配给指定的类型。
            </summary>
            <param name="initialValue">要转换的值。</param>
            <param name="culture">转换时要使用的区域性。</param>
            <param name="targetType">要将值转换或强制转换为的类型。</param>
            <returns>
            转换后的类型。如果转换不成功, 则初始值
            如果可分配给目标类型, 则返回。
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodWithResult(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback,Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
            <summary>
            用于生成元对象的帮助器方法, 该方法调用
            动态上的特定方法, 返回结果
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodReturnLast(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
            <summary>
            用于生成元对象的帮助器方法, 该方法调用
            动态上的特定方法, 但使用其中一个参数
            的结果。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodNoResult(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
            <summary>
            用于生成元对象的帮助器方法, 该方法调用
            动态上的特定方法, 但使用其中一个参数
            的结果。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.GetRestrictions">
            <summary>
            返回一个限制对象, 其中包括我们当前合并的限制
            限制我们的类型
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Utilities.ImmutableCollectionsUtils">
            <summary>
            用于序列化不可变集合的帮助器类。
            请注意, 这是所有版本使用, 即使是那些不支持不可变的集合, 在情况下 Dll 是 Gac
            https://github.com/JamesNK/Newtonsoft.Json/issues/652
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetCollectionItemType(System.Type)">
            <summary>
            获取类型化集合的项的类型。
            </summary>
            <param name="type">类型。</param>
            <returns>类型化集合的项的类型。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberUnderlyingType(System.Reflection.MemberInfo)">
            <summary>
            获取成员的基础类型。
            </summary>
            <param name="member">成员。</param>
            <returns>成员的基础类型。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.MemberInfo)">
            <summary>
            确定成员是否为索引属性。
            </summary>
            <param name="member">成员。</param>
            <returns>
            	如果成员是索引属性, 则 <c> 真正的 </c>; 如果成员是索引属性, 则真实的。否则, <c> 虚假的 </c>。
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.PropertyInfo)">
            <summary>
            确定该属性是否为索引属性。
            </summary>
            <param name="property">属性。</param>
            <returns>
            	如果属性是索引属性, 则 <c> true </c>; 如果属性是索引属性, 则为 true。否则, <c> 虚假的 </c>。
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberValue(System.Reflection.MemberInfo,System.Object)">
            <summary>
            获取对象上的成员的值。
            </summary>
            <param name="member">成员。</param>
            <param name="target">目标对象。</param>
            <returns>对象上的成员的值。</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.SetMemberValue(System.Reflection.MemberInfo,System.Object,System.Object)">
            <summary>
            在目标对象上设置成员的值。
            </summary>
            <param name="member">成员。</param>
            <param name="target">目标。</param>
            <param name="value">值。</param>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            确定是否可以读取指定的成员信息。
            </summary>
            <param name="member">成员信息, 以确定是否可以读取。</param>
            /// <param name="nonPublic">如果设置为 <c> 真实 </c> 则允许非公开获取该成员。</param>
            <returns>
            	如果可以读取指定的成员信息, <c> 真实的 </c>; 如果可以读取指定的成员信息, 则真实的。否则, <c> 虚假的 </c>。
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo,System.Boolean,System.Boolean)">
            <summary>
            确定是否可以设置指定的成员信息。
            </summary>
            <param name="member">用于确定是否可以设置的成员信息。</param>
            <param name="nonPublic">如果设置为 <c> true </c> 则允许非公开设置成员。</param>
            <param name="canSetReadOnly">如果设置为 <c> true </c> 则允许将成员设置为只读。</param>
            <returns>
            	如果可以设置指定的成员信息, 则 <c> 真实 </c>; 如果可以设置指定的成员信息, 则真实的。否则, <c> 虚假的 </c>。
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Utilities.StringBuffer">
            <summary>
            生成一个字符串。与<see cref="T:System.Text.StringBuilder"/>不同, 此类允许您重用其内部缓冲区。
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.StringUtils.IsWhiteSpace(System.String)">
            <summary>
            确定字符串是否为所有空白。空字符串将返回 <c> 错误的 </c>。
            </summary>
            <param name="s">用于测试它是否都是空白的字符串。</param>
            <returns>
            	如果字符串都是空白, 则 <c> 真正的 </c>; 如果字符串都是空白的, 则为真的。否则, <c> 虚假的 </c>。
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.WriteState">
            <summary>
            指定<see cref="T:Newtonsoft.Json.JsonWriter"/>的状态。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Error">
            <summary>
            引发了一个异常, 使<see cref="T:Newtonsoft.Json.JsonWriter"/>处于无效状态。
            你可以调用<see cref="M:Newtonsoft.Json.JsonWriter.Close"/>的方法, 把<see cref="T:Newtonsoft.Json.JsonWriter"/>在 <c> 封闭 </c> 状态。
            任何其他<see cref="T:Newtonsoft.Json.JsonWriter"/>方法调用都会导致<see cref="T:System.InvalidOperationException"/>被抛出。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Closed">
            <summary>
            <see cref="M:Newtonsoft.Json.JsonWriter.Close"/>的方法被称为。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Object">
            <summary>
            正在写入一个对象。 
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Array">
            <summary>
            正在编写一个数组。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Constructor">
            <summary>
            正在编写构造函数。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Property">
            <summary>
            正在写入属性。
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Start">
            <summary>
            没有调用<see cref="T:Newtonsoft.Json.JsonWriter"/>写入方法。
            </summary>
        </member>
    </members>
</doc>
