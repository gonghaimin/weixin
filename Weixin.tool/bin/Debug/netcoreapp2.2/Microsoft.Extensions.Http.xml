<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Extensions.Http</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Extensions.Http.HttpClientFactoryOptions">
            <summary>
            用于配置默认<see cref="T:System.Net.Http.IHttpClientFactory"/>的选项类。
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Http.HttpClientFactoryOptions.HttpMessageHandlerBuilderActions">
            <summary>
            获取用于配置<see cref="T:Microsoft.Extensions.Http.HttpMessageHandlerBuilder"/>的操作的列表。
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Http.HttpClientFactoryOptions.HttpClientActions">
            <summary>
            获取用于配置<see cref="T:System.Net.Http.HttpClient"/>的操作的列表。
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Http.HttpClientFactoryOptions.HandlerLifetime">
            <summary>
            获取或设置可以重用<see cref="T:System.Net.Http.HttpMessageHandler"/>实例的时间长度。每个命名客户端都可以有自己配置的处理程序生存期值。此属性的默认值为两分钟。
            将生存期设置为 "<see cref="F:System.Threading.Timeout.InfiniteTimeSpan"/>" 以禁用处理程序过期。
            </summary>
            <remarks>
            <para>
            <see cref="T:System.Net.Http.IHttpClientFactory"/>的默认实现将汇集<see cref="T:System.Net.Http.HttpMessageHandler"/>
            工厂为减少资源消耗而创建的实例。此设置配置的时间量
            在计划从池中删除和处置处理程序之前, 可以对其进行池化处理程序。
            </para>
            <para>
            由于每个处理程序都可以典型地管理其自己的基础 HTTP 连接, 因此需要汇集处理程序。创建
            超过所需的处理程序可能会导致连接延迟。一些处理程序还不确定地保持连接打开状态
            这可以防止处理程序对 DNS 更改做出反应。<see cref="P:Microsoft.Extensions.Http.HttpClientFactoryOptions.HandlerLifetime"/>的价值应该是
            选择时了解应用程序响应网络环境中的更改的要求。
            </para>
            <para>
            处理程序的过期不会立即释放处理程序。过期的处理程序被放置在一个单独的池中, 该池每隔一段时间进行处理, 以便仅在处理程序变得无法访问时才对其进行处理。使用长寿命
            <see cref="T:System.Net.Http.HttpClient"/>实例将阻止潜在的<see cref="T:System.Net.Http.HttpMessageHandler"/>
            释放, 直到所有引用都被垃圾回收。
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.Extensions.Http.HttpMessageHandlerBuilder">
            <summary>
            用于配置<see cref="T:System.Net.Http.HttpMessageHandler"/>实例的生成器抽象。
            </summary>
            <remarks>
            <see cref="T:Microsoft.Extensions.Http.HttpMessageHandlerBuilder"/>在服务集合中被登记为
            一个短暂的服务。呼叫者应检索每个<see cref="T:System.Net.Http.HttpMessageHandler"/>的新实例, 以
            被创建。实现者应该期望每个实例只使用一次。
            </remarks>
        </member>
        <member name="P:Microsoft.Extensions.Http.HttpMessageHandlerBuilder.Name">
            <summary>
            获取或设置要创建的<see cref="T:System.Net.Http.HttpClient"/>的名称。
            </summary>
            <remarks>
            <see cref="P:Microsoft.Extensions.Http.HttpMessageHandlerBuilder.Name"/>是由<see cref="T:System.Net.Http.IHttpClientFactory"/>的结构所设置的
            并且仅用于单元测试目的是公开的。把<see cref="P:Microsoft.Extensions.Http.HttpMessageHandlerBuilder.Name"/>设置在
            测试方案可能会产生不可预知的结果。
            </remarks>
        </member>
        <member name="P:Microsoft.Extensions.Http.HttpMessageHandlerBuilder.PrimaryHandler">
            <summary>
            获取或设置主<see cref="T:System.Net.Http.HttpMessageHandler"/>。
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Http.HttpMessageHandlerBuilder.AdditionalHandlers">
            <summary>
            获取用于配置
            <see cref="T:System.Net.Http.DelegatingHandler"/>管道。
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Http.HttpMessageHandlerBuilder.Build">
            <summary>
            创建一个<see cref="T:System.Net.Http.HttpMessageHandler"/>。
            </summary>
            <returns>
            一个由<see cref="T:System.Net.Http.HttpMessageHandler"/>建造的<see cref="P:Microsoft.Extensions.Http.HttpMessageHandlerBuilder.PrimaryHandler"/>
            <see cref="P:Microsoft.Extensions.Http.HttpMessageHandlerBuilder.AdditionalHandlers"/>。
            </returns>
        </member>
        <member name="T:Microsoft.Extensions.Http.IHttpMessageHandlerBuilderFilter">
            <summary>
            <see cref="T:Microsoft.Extensions.Http.DefaultHttpClientFactory"/>用于在<see cref="T:Microsoft.Extensions.Http.HttpMessageHandlerBuilder"/>之前对配置<see cref="M:Microsoft.Extensions.Http.HttpMessageHandlerBuilder.Build"/>进行额外的初始化
            被称为。
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Http.IHttpMessageHandlerBuilderFilter.Configure(System.Action{Microsoft.Extensions.Http.HttpMessageHandlerBuilder})">
            <summary>
            将其他初始化应用于<see cref="T:Microsoft.Extensions.Http.HttpMessageHandlerBuilder"/>
            </summary>
            <param name="next">将运行下一个<see cref="T:Microsoft.Extensions.Http.IHttpMessageHandlerBuilderFilter"/>的代表。</param>
        </member>
        <member name="T:Microsoft.Extensions.Http.ITypedHttpClientFactory`1">
             <summary>
             可以使用自定义创建类型化客户端实例的组件的工厂抽象
             配置给定的逻辑名称。
             </summary>
             <typeparam name="TClient">要创建的类型化客户端的类型。</typeparam>
             <remarks>
             <para>
             <see cref="T:Microsoft.Extensions.Http.ITypedHttpClientFactory`1"/>是支持
             <see cref="M:Microsoft.Extensions.DependencyInjection.HttpClientFactoryServiceCollectionExtensions.AddHttpClient``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)"/>和
             <see cref="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddTypedClient``1(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder)"/>的功能。这种类型
             应该很少直接在应用程序代码中使用, 而是使用<see cref="M:System.IServiceProvider.GetService(System.Type)"/>
             以检索类型化的客户端。
             </para>
             <para>
             一个默认的<see cref="T:Microsoft.Extensions.Http.ITypedHttpClientFactory`1"/>可以在一个<see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>中注册
             通过调用<see cref="M:Microsoft.Extensions.DependencyInjection.HttpClientFactoryServiceCollectionExtensions.AddHttpClient(Microsoft.Extensions.DependencyInjection.IServiceCollection)"/>。
             默认<see cref="T:Microsoft.Extensions.Http.ITypedHttpClientFactory`1"/>将在服务集合中注册为单例
             开放通用服务。
             </para>
             <para>
             默认<see cref="T:Microsoft.Extensions.Http.ITypedHttpClientFactory`1"/>使用类型激活来创建类型化的客户端实例。类型
             客户端类型不会直接从<see cref="T:System.IServiceProvider"/>中检索。有关详细信息, 请参阅<see cref="M:Microsoft.Extensions.DependencyInjection.ActivatorUtilities.CreateInstance(System.IServiceProvider,System.Type,System.Object[])" />。
             </para>
             </remarks>
             <example>
             This sample shows the basic pattern for defining a typed client class.
             <code>
             class ExampleClient
             {
                 private readonly HttpClient _httpClient;
                 private readonly ILogger _logger;
            
                 // typed clients can use constructor injection to access additional services
                 public ExampleClient(HttpClient httpClient, ILogger&lt;ExampleClient&gt; logger)
                 {
                     _httpClient = httpClient;
                     _logger = logger;     
                 }
            
                 // typed clients can expose the HttpClient for application code to call directly
                 public HttpClient HttpClient => _httpClient;
            
                 // typed clients can also define methods that abstract usage of the HttpClient
                 public async Task SendHelloRequest()
                 {
                     var response = await _httpClient.GetAsync("/helloworld");
                     response.EnsureSuccessStatusCode();
                 }
             }
             </code>
             </example>
             <example>
             This sample shows how to consume a typed client from an ASP.NET Core middleware.
             <code>
             // in Startup.cs
             public void Configure(IApplicationBuilder app, ExampleClient exampleClient)
             {
                 app.Run(async (context) =>
                 {
                     var response = await _exampleClient.GetAsync("/helloworld");
                     await context.Response.WriteAsync("Remote server said: ");
                     await response.Content.CopyToAsync(context.Response.Body);
                 });
             }
             </code>
             </example>
             <example>
             This sample shows how to consume a typed client from an ASP.NET Core MVC Controller.
             <code>
             // in Controllers/HomeController.cs
             public class HomeController : ControllerBase(IApplicationBuilder app, ExampleClient exampleClient)
             {
                 private readonly ExampleClient _exampleClient;
            
                 public HomeController(ExampleClient exampleClient)
                 {
                     _exampleClient = exampleClient;
                 }
            
                 public async Task&lt;IActionResult&gt; Index()
                 {
                     var response = await _exampleClient.GetAsync("/helloworld");
                     var text = await response.Content.ReadAsStringAsync();
                     return Content("Remote server said: " + text, "text/plain");
                 };
             }
             </code>
             </example>
        </member>
        <member name="M:Microsoft.Extensions.Http.ITypedHttpClientFactory`1.CreateClient(System.Net.Http.HttpClient)">
            <summary>
            在给定关联<see cref="T:System.Net.Http.HttpClient"/>的情况下创建类型化客户端。
            </summary>
            <param name="httpClient">
            <see cref="T:System.Net.Http.HttpClient"/>为命名的客户创造的<see cref="T:System.Net.Http.IHttpClientFactory"/>
            与 < typeparcef 名称 = "TClient"/。
            </param>
            <returns>一个实例 < typemref 名称 = "TClient"/>。</returns>
        </member>
        <member name="P:Microsoft.Extensions.Http.Resources.HttpMessageHandlerBuilder_AdditionalHandlerIsNull">
            <summary>
            "{0}" 不得包含空条目。
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Http.Resources.FormatHttpMessageHandlerBuilder_AdditionalHandlerIsNull(System.Object)">
            <summary>
            "{0}" 不得包含空条目。
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Http.Resources.HttpMessageHandlerBuilder_AdditionHandlerIsInvalid">
            <summary>
            The '{0}' property must be null. '{1}' instances provided to '{2}' must not be reused or cached.{3}Handler: '{4}'
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Http.Resources.FormatHttpMessageHandlerBuilder_AdditionHandlerIsInvalid(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            The '{0}' property must be null. '{1}' instances provided to '{2}' must not be reused or cached.{3}Handler: '{4}'
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Http.Resources.HttpMessageHandlerBuilder_PrimaryHandlerIsNull">
            <summary>
            "{0}" 不能为空。
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Http.Resources.FormatHttpMessageHandlerBuilder_PrimaryHandlerIsNull(System.Object)">
            <summary>
            "{0}" 不能为空。
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.Http.Resources.HandlerLifetime_InvalidValue">
            <summary>
            处理程序生存期必须至少为1秒。
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Http.Resources.FormatHandlerLifetime_InvalidValue">
            <summary>
            处理程序生存期必须至少为1秒。
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions">
            <summary>
            配置<see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder"/>的扩展方法
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.ConfigureHttpClient(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Action{System.Net.Http.HttpClient})">
            <summary>
            添加将用于配置命名<see cref="T:System.Net.Http.HttpClient"/>的委托。
            </summary>
            <param name="builder"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>。</param>
            <param name="configureClient">用于配置<see cref="T:System.Net.Http.HttpClient"/>的委托。</param>
            <returns>可用于配置客户端的<see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder"/>。</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.ConfigureHttpClient(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Action{System.IServiceProvider,System.Net.Http.HttpClient})">
            <summary>
            添加将用于配置命名<see cref="T:System.Net.Http.HttpClient"/>的委托。
            </summary>
            <param name="builder"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>。</param>
            <param name="configureClient">用于配置<see cref="T:System.Net.Http.HttpClient"/>的委托。</param>
            <returns>可用于配置客户端的<see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder"/>。</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddHttpMessageHandler(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Func{System.Net.Http.DelegatingHandler})">
            <summary>
            添加将用于为命名<see cref="T:System.Net.Http.HttpClient"/>创建其他消息处理程序的委托。
            </summary>
            <param name="builder"><see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder"/>。</param>
            <param name="configureHandler">用于创建<see cref="T:System.Net.Http.DelegatingHandler"/>的委托。</param>
            <returns>可用于配置客户端的<see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder"/>。</returns>
            <remarks>
            每次回调委托时, 它都应返回消息处理程序的新实例
            被调用。
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddHttpMessageHandler(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Func{System.IServiceProvider,System.Net.Http.DelegatingHandler})">
            <summary>
            添加将用于为命名<see cref="T:System.Net.Http.HttpClient"/>创建其他消息处理程序的委托。
            </summary>
            <param name="builder"><see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder"/>。</param>
            <param name="configureHandler">用于创建<see cref="T:System.Net.Http.DelegatingHandler"/>的委托。</param>       /// <returns>可用于配置客户端的<see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder"/>。</returns>
            <remarks>
            每次回调委托时, 它都应返回消息处理程序的新实例
            被调用。
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddHttpMessageHandler``1(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder)">
            <summary>
            从命名<see cref="T:System.Net.Http.HttpClient"/>的依赖注入容器中添加附加消息处理程序。
            </summary>
            <param name="builder"><see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder"/>。</param>
            <returns>可用于配置客户端的<see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder"/>。</returns>
            <typeparam name="THandler">
            <see cref="T:System.Net.Http.DelegatingHandler"/>的类型。处理程序类型必须注册为临时服务。
            </typeparam>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.ConfigurePrimaryHttpMessageHandler(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Func{System.Net.Http.HttpMessageHandler})">
            <summary>
            添加将用于配置命名<see cref="T:System.Net.Http.HttpMessageHandler"/>的主<see cref="T:System.Net.Http.HttpClient"/>的委托。
            </summary>
            <param name="builder"><see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder"/>。</param>
            <param name="configureHandler">用于创建<see cref="T:System.Net.Http.HttpMessageHandler"/>的委托。</param>
            <returns>可用于配置客户端的<see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder"/>。</returns>
            <remarks>
            每次回调委托时, 它都应返回消息处理程序的新实例
            被调用。
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.ConfigurePrimaryHttpMessageHandler(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Func{System.IServiceProvider,System.Net.Http.HttpMessageHandler})">
            <summary>
            添加将用于配置命名<see cref="T:System.Net.Http.HttpMessageHandler"/>的主<see cref="T:System.Net.Http.HttpClient"/>的委托。
            </summary>
            <param name="builder"><see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder"/>。</param>
            <param name="configureHandler">用于创建<see cref="T:System.Net.Http.HttpMessageHandler"/>的委托。</param>
            <returns>可用于配置客户端的<see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder"/>。</returns>
            <remarks>
            每次回调委托时, 它都应返回消息处理程序的新实例
            被调用。
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.ConfigurePrimaryHttpMessageHandler``1(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder)">
            <summary>
            从依赖转换容器中配置主<see cref="T:System.Net.Http.HttpMessageHandler"/>
            为了一个命名的<see cref="T:System.Net.Http.HttpClient"/>
            </summary>
            <param name="builder"><see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder"/>。</param>
            <returns>可用于配置客户端的<see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder"/>。</returns>
            <typeparam name="THandler">
            <see cref="T:System.Net.Http.DelegatingHandler"/>的类型。处理程序类型必须注册为临时服务。
            </typeparam>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.ConfigureHttpMessageHandlerBuilder(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Action{Microsoft.Extensions.Http.HttpMessageHandlerBuilder})">
            <summary>
            添加一个委托, 该委托将用于使用已命名<see cref="T:Microsoft.Extensions.Http.HttpMessageHandlerBuilder"/>的<see cref="T:System.Net.Http.HttpClient"/>配置消息处理程序。
            </summary>
            <param name="builder"><see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder"/>。</param>
            <param name="configureBuilder">用于配置<see cref="T:Microsoft.Extensions.Http.HttpMessageHandlerBuilder"/>的委托。</param>
            <returns>可用于配置客户端的<see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder"/>。</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddTypedClient``1(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder)">
            <summary>
            在 "类型参数" 名称 = "TClient"/> 类型与命名<see cref="T:System.Net.Http.HttpClient"/>之间配置绑定
            与<see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder"/>有关
            </summary>
            <typeparam name="TClient">
            类型化客户端的类型。它们指定的类型将在服务集合中注册为
            一个短暂的服务。有关创作类型化客户端的详细信息, 请参阅<see cref="T:Microsoft.Extensions.Http.ITypedHttpClientFactory`1" />。
            </typeparam>
            <param name="builder"><see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder"/>。</param>
            <remarks>
            <para>
            < 类型参数名称 = "TClient"/> 实例由适当的<see cref="T:System.Net.Http.HttpClient" />构造
            可以从<see cref="M:System.IServiceProvider.GetService(System.Type)" /> (和相关方法) 中检索, 方法是提供
            < typemref 名称 = "TClient"/> 作为服务类型。
            </para>
            <para>
            调用<see cref="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddTypedClient``1(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder)"/>将注册一个类型化
            使用<see cref="T:Microsoft.Extensions.Http.ITypedHttpClientFactory`1" />创建 < typeparref 名称 = "TClient"/> 的客户端绑定。
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddTypedClient``2(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder)">
            <summary>
            在 "类型参数" 名称 = "TClient"/> 类型与命名<see cref="T:System.Net.Http.HttpClient"/>之间配置绑定
            与<see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder"/>有关创建的实例将是类型 < typeref 名称 = "T实现"/>。
            </summary>
            <typeparam name="TClient">
            类型化客户端的声明类型。它们指定的类型将在服务集合中注册为
            一个短暂的服务。有关创作类型化客户端的详细信息, 请参阅<see cref="T:Microsoft.Extensions.Http.ITypedHttpClientFactory`1" />。
            </typeparam>
            <typeparam name="TImplementation">
            类型化客户端的实现类型。由指定的类型将由<see cref="T:Microsoft.Extensions.Http.ITypedHttpClientFactory`1"/>实例化。
            </typeparam>
            <param name="builder"><see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder"/>。</param>
            <remarks>
            <para>
            < 类型参数名称 = "TClient"/> 实例由适当的<see cref="T:System.Net.Http.HttpClient" />构造
            可以从<see cref="M:System.IServiceProvider.GetService(System.Type)" /> (和相关方法) 中检索, 方法是提供
            < typemref 名称 = "TClient"/> 作为服务类型。
            </para>
            <para>
            呼唤<see cref="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddTypedClient``2(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder)"/>
            将注册一个类型化的客户端绑定, 使用<see cref="T:Microsoft.Extensions.Http.ITypedHttpClientFactory`1" />创建 < typeparcef 名称 = "T实现"。
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddTypedClient``1(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Func{System.Net.Http.HttpClient,``0})">
            <summary>
            在 "类型参数" 名称 = "TClient"/> 类型与命名<see cref="T:System.Net.Http.HttpClient"/>之间配置绑定
            与<see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder"/>有关
            </summary>
            <typeparam name="TClient">
            类型化客户端的类型。它们指定的类型将在服务集合中注册为
            一个短暂的服务。
            </typeparam>
            <param name="builder"><see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder"/>。</param>
            <param name="factory">将用于构造类型化客户端的工厂函数。</param>
            <remarks>
            <para>
            < 类型参数名称 = "TClient"/> 实例由适当的<see cref="T:System.Net.Http.HttpClient" />构造
            可以从<see cref="M:System.IServiceProvider.GetService(System.Type)" /> (和相关方法) 中检索, 方法是提供
            < typemref 名称 = "TClient"/> 作为服务类型。
            </para>
            <para>
            呼唤<see cref="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddTypedClient``1(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Func{System.Net.Http.HttpClient,``0})"/>
            将注册一个类型化的客户端绑定, 使用提供的工厂函数创建 < typeparcef 名称 = "TClient"/>。
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddTypedClient``1(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Func{System.Net.Http.HttpClient,System.IServiceProvider,``0})">
            <summary>
            在 "类型参数" 名称 = "TClient"/> 类型与命名<see cref="T:System.Net.Http.HttpClient"/>之间配置绑定
            与<see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder"/>有关
            </summary>
            <typeparam name="TClient">
            类型化客户端的类型。它们指定的类型将在服务集合中注册为
            一个短暂的服务。
            </typeparam>
            <param name="builder"><see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder"/>。</param>
            <param name="factory">将用于构造类型化客户端的工厂函数。</param>
            <remarks>
            <para>
            < 类型参数名称 = "TClient"/> 实例由适当的<see cref="T:System.Net.Http.HttpClient" />构造
            可以从<see cref="M:System.IServiceProvider.GetService(System.Type)" /> (和相关方法) 中检索, 方法是提供
            < typemref 名称 = "TClient"/> 作为服务类型。
            </para>
            <para>
            呼唤<see cref="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddTypedClient``1(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Func{System.Net.Http.HttpClient,System.IServiceProvider,``0})"/>
            将注册一个类型化的客户端绑定, 使用提供的工厂函数创建 < typeparcef 名称 = "TClient"/>。
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.SetHandlerLifetime(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.TimeSpan)">
            <summary>
            设置可以重用<see cref="T:System.Net.Http.HttpMessageHandler"/>实例的时间长度。每个命名客户端都可以有自己配置的处理程序生存期值。默认值为两分钟。将生存期设置为
            <see cref="F:System.Threading.Timeout.InfiniteTimeSpan"/>来禁用处理程序过期。
            </summary>
            <remarks>
            <para>
            <see cref="T:System.Net.Http.IHttpClientFactory"/>的默认实现将汇集<see cref="T:System.Net.Http.HttpMessageHandler"/>
            工厂为减少资源消耗而创建的实例。此设置配置的时间量
            在计划从池中删除和处置处理程序之前, 可以对其进行池化处理程序。
            </para>
            <para>
            由于每个处理程序都可以典型地管理其自己的基础 HTTP 连接, 因此需要汇集处理程序。创建
            超过所需的处理程序可能会导致连接延迟。一些处理程序还不确定地保持连接打开状态
            这可以防止处理程序对 DNS 更改做出反应。<paramref name="handlerLifetime"/>的价值应该是
            选择时了解应用程序响应网络环境中的更改的要求。
            </para>
            <para>
            处理程序的过期不会立即释放处理程序。过期的处理程序被放置在一个单独的池中, 该池每隔一段时间进行处理, 以便仅在处理程序变得无法访问时才对其进行处理。使用长寿命
            <see cref="T:System.Net.Http.HttpClient"/>实例将阻止潜在的<see cref="T:System.Net.Http.HttpMessageHandler"/>
            释放, 直到所有引用都被垃圾回收。
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.HttpClientFactoryServiceCollectionExtensions">
            <summary>
            扩展为<see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>配置<see cref="T:System.Net.Http.IHttpClientFactory"/>的方法。
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.HttpClientFactoryServiceCollectionExtensions.AddHttpClient(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            将<see cref="T:System.Net.Http.IHttpClientFactory"/>和相关服务添加到<see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>。
            </summary>
            <param name="services"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>。</param>
            <returns><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>。</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.HttpClientFactoryServiceCollectionExtensions.AddHttpClient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)">
            <summary>
            将<see cref="T:System.Net.Http.IHttpClientFactory"/>和相关服务添加到<see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>并配置
            一个命名的<see cref="T:System.Net.Http.HttpClient"/>
            </summary>
            <param name="services"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>。</param>
            <param name="name">要配置的<see cref="T:System.Net.Http.HttpClient"/>的逻辑名称。</param>
            <returns>可用于配置客户端的<see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder"/>。</returns>
            <remarks>
            <para>
            应用所提供配置的<see cref="T:System.Net.Http.HttpClient"/>实例可以使用<see cref="M:System.Net.Http.IHttpClientFactory.CreateClient(System.String)"/>检索, 并提供匹配的名称。
            </para>
            <para>
            使用<see cref="F:Microsoft.Extensions.Options.Options.DefaultName"/>作为名称来配置默认客户端。
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.HttpClientFactoryServiceCollectionExtensions.AddHttpClient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.Net.Http.HttpClient})">
            <summary>
            将<see cref="T:System.Net.Http.IHttpClientFactory"/>和相关服务添加到<see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>并配置
            一个命名的<see cref="T:System.Net.Http.HttpClient"/>
            </summary>
            <param name="services"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>。</param>
            <param name="name">要配置的<see cref="T:System.Net.Http.HttpClient"/>的逻辑名称。</param>
            <param name="configureClient">用于配置<see cref="T:System.Net.Http.HttpClient"/>的委托。</param>
            <returns>可用于配置客户端的<see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder"/>。</returns>
            <remarks>
            <para>
            应用所提供配置的<see cref="T:System.Net.Http.HttpClient"/>实例可以使用<see cref="M:System.Net.Http.IHttpClientFactory.CreateClient(System.String)"/>检索, 并提供匹配的名称。
            </para>
            <para>
            使用<see cref="F:Microsoft.Extensions.Options.Options.DefaultName"/>作为名称来配置默认客户端。
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.HttpClientFactoryServiceCollectionExtensions.AddHttpClient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.IServiceProvider,System.Net.Http.HttpClient})">
            <summary>
            将<see cref="T:System.Net.Http.IHttpClientFactory"/>和相关服务添加到<see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>并配置
            一个命名的<see cref="T:System.Net.Http.HttpClient"/>
            </summary>
            <param name="services"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>。</param>
            <param name="name">要配置的<see cref="T:System.Net.Http.HttpClient"/>的逻辑名称。</param>
            <param name="configureClient">用于配置<see cref="T:System.Net.Http.HttpClient"/>的委托。</param>
            <returns>可用于配置客户端的<see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder"/>。</returns>
            <remarks>
            <para>
            应用所提供配置的<see cref="T:System.Net.Http.HttpClient"/>实例可以使用<see cref="M:System.Net.Http.IHttpClientFactory.CreateClient(System.String)"/>检索, 并提供匹配的名称。
            </para>
            <para>
            使用<see cref="F:Microsoft.Extensions.Options.Options.DefaultName"/>作为名称来配置默认客户端。
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.HttpClientFactoryServiceCollectionExtensions.AddHttpClient``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            将<see cref="T:System.Net.Http.IHttpClientFactory"/>和相关服务添加到<see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>并配置
            在 "类型参数" 名称 = "TClient"/> 类型和命名<see cref="T:System.Net.Http.HttpClient"/>之间的绑定。客户端名称
            将设置为 "typeparmref 名称 =" TClient "/的全名。
            </summary>
            <typeparam name="TClient">
            类型化客户端的类型。它们指定的类型将在服务集合中注册为
            一个短暂的服务。有关创作类型化客户端的详细信息, 请参阅<see cref="T:Microsoft.Extensions.Http.ITypedHttpClientFactory`1" />。
            </typeparam>
            <param name="services"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>。</param>
            <returns>可用于配置客户端的<see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder"/>。</returns>
            <remarks>
            <para>
            应用所提供配置的<see cref="T:System.Net.Http.HttpClient"/>实例可以使用<see cref="M:System.Net.Http.IHttpClientFactory.CreateClient(System.String)"/>检索, 并提供匹配的名称。
            </para>
            <para>
            < 类型参数名称 = "TClient"/> 实例由适当的<see cref="T:System.Net.Http.HttpClient" />构造
            可以从<see cref="M:System.IServiceProvider.GetService(System.Type)" /> (和相关方法) 中检索, 方法是提供
            < typemref 名称 = "TClient"/> 作为服务类型。
            </para>
            <para>
            使用<see cref="F:Microsoft.Extensions.Options.Options.DefaultName"/>作为名称来配置默认客户端。
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.HttpClientFactoryServiceCollectionExtensions.AddHttpClient``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            将<see cref="T:System.Net.Http.IHttpClientFactory"/>和相关服务添加到<see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>并配置
            在 "类型参数" 名称 = "TClient"/> 类型和命名<see cref="T:System.Net.Http.HttpClient"/>之间的绑定。客户端名称将
            设置为类型名称 = "TClient"/的类型名称。
            </summary>
            <typeparam name="TClient">
            类型化客户端的类型。它们指定的类型将在服务集合中注册为
            一个短暂的服务。有关创作类型化客户端的详细信息, 请参阅<see cref="T:Microsoft.Extensions.Http.ITypedHttpClientFactory`1" />。
            </typeparam>
            <typeparam name="TImplementation">
            类型化客户端的实现类型。它们指定的类型将由
            <see cref="T:Microsoft.Extensions.Http.ITypedHttpClientFactory`1"/>
            </typeparam>
            <param name="services"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>。</param>
            <returns>可用于配置客户端的<see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder"/>。</returns>
            <remarks>
            <para>
            应用所提供配置的<see cref="T:System.Net.Http.HttpClient"/>实例可以使用<see cref="M:System.Net.Http.IHttpClientFactory.CreateClient(System.String)"/>检索, 并提供匹配的名称。
            </para>
            <para>
            < 类型参数名称 = "TClient"/> 实例由适当的<see cref="T:System.Net.Http.HttpClient" />构造
            可以从<see cref="M:System.IServiceProvider.GetService(System.Type)" /> (和相关方法) 中检索, 方法是提供
            < typemref 名称 = "TClient"/> 作为服务类型。
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.HttpClientFactoryServiceCollectionExtensions.AddHttpClient``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)">
            <summary>
            将<see cref="T:System.Net.Http.IHttpClientFactory"/>和相关服务添加到<see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>并配置
            在 "类型参数" 名称 = "TClient"/> 类型和命名<see cref="T:System.Net.Http.HttpClient"/>之间的绑定。
            </summary>
            <typeparam name="TClient">
            类型化客户端的类型。它们指定的类型将在服务集合中注册为
            一个短暂的服务。有关创作类型化客户端的详细信息, 请参阅<see cref="T:Microsoft.Extensions.Http.ITypedHttpClientFactory`1" />。
            </typeparam>
            <param name="services"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>。</param>
            <param name="name">要配置的<see cref="T:System.Net.Http.HttpClient"/>的逻辑名称。</param>
            <returns>可用于配置客户端的<see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder"/>。</returns>
            <remarks>
            <para>
            应用所提供配置的<see cref="T:System.Net.Http.HttpClient"/>实例可以使用<see cref="M:System.Net.Http.IHttpClientFactory.CreateClient(System.String)"/>检索, 并提供匹配的名称。
            </para>
            <para>
            < 类型参数名称 = "TClient"/> 实例由适当的<see cref="T:System.Net.Http.HttpClient" />构造
            可以从<see cref="M:System.IServiceProvider.GetService(System.Type)" /> (和相关方法) 中检索, 方法是提供
            < typemref 名称 = "TClient"/> 作为服务类型。
            </para>
            <para>
            使用<see cref="F:Microsoft.Extensions.Options.Options.DefaultName"/>作为名称来配置默认客户端。
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.HttpClientFactoryServiceCollectionExtensions.AddHttpClient``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)">
            <summary>
            将<see cref="T:System.Net.Http.IHttpClientFactory"/>和相关服务添加到<see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>并配置
            在 "类型参数" 名称 = "TClient"/> 类型和命名<see cref="T:System.Net.Http.HttpClient"/>之间的绑定。客户端名称将
            设置为类型名称 = "TClient"/的类型名称。
            </summary>
            <typeparam name="TClient">
            类型化客户端的类型。它们指定的类型将在服务集合中注册为
            一个短暂的服务。有关创作类型化客户端的详细信息, 请参阅<see cref="T:Microsoft.Extensions.Http.ITypedHttpClientFactory`1" />。
            </typeparam>
            <typeparam name="TImplementation">
            类型化客户端的实现类型。它们指定的类型将由
            <see cref="T:Microsoft.Extensions.Http.ITypedHttpClientFactory`1"/>
            </typeparam>
            <param name="services"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>。</param>
            <param name="name">要配置的<see cref="T:System.Net.Http.HttpClient"/>的逻辑名称。</param>
            <returns>可用于配置客户端的<see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder"/>。</returns>
            <remarks>
            <para>
            应用所提供配置的<see cref="T:System.Net.Http.HttpClient"/>实例可以使用<see cref="M:System.Net.Http.IHttpClientFactory.CreateClient(System.String)"/>检索, 并提供匹配的名称。
            </para>
            <para>
            < 类型参数名称 = "TClient"/> 实例由适当的<see cref="T:System.Net.Http.HttpClient" />构造
            可以从<see cref="M:System.IServiceProvider.GetService(System.Type)" /> (和相关方法) 中检索, 方法是提供
            < typemref 名称 = "TClient"/> 作为服务类型。
            </para>
            <para>
            使用<see cref="F:Microsoft.Extensions.Options.Options.DefaultName"/>作为名称来配置默认客户端。
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.HttpClientFactoryServiceCollectionExtensions.AddHttpClient``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.Net.Http.HttpClient})">
            <summary>
            将<see cref="T:System.Net.Http.IHttpClientFactory"/>和相关服务添加到<see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>并配置
            在 "类型参数" 名称 = "TClient"/> 类型和命名<see cref="T:System.Net.Http.HttpClient"/>之间的绑定。客户端名称将
            设置为类型名称 = "TClient"/的类型名称。
            </summary>
            <typeparam name="TClient">
            类型化客户端的类型。它们指定的类型将在服务集合中注册为
            一个短暂的服务。有关创作类型化客户端的详细信息, 请参阅<see cref="T:Microsoft.Extensions.Http.ITypedHttpClientFactory`1" />。
            </typeparam>
            <param name="services"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>。</param>
            <param name="configureClient">用于配置<see cref="T:System.Net.Http.HttpClient"/>的委托。</param>
            <returns>可用于配置客户端的<see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder"/>。</returns>
            <remarks>
            <para>
            应用所提供配置的<see cref="T:System.Net.Http.HttpClient"/>实例可以使用<see cref="M:System.Net.Http.IHttpClientFactory.CreateClient(System.String)"/>检索, 并提供匹配的名称。
            </para>
            <para>
            < 类型参数名称 = "TClient"/> 实例由适当的<see cref="T:System.Net.Http.HttpClient" />构造
            可以从<see cref="M:System.IServiceProvider.GetService(System.Type)" /> (和相关方法) 中检索, 方法是提供
            < typemref 名称 = "TClient"/> 作为服务类型。
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.HttpClientFactoryServiceCollectionExtensions.AddHttpClient``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{System.Net.Http.HttpClient})">
            <summary>
            将<see cref="T:System.Net.Http.IHttpClientFactory"/>和相关服务添加到<see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>并配置
            在 "类型参数" 名称 = "TClient"/> 类型和命名<see cref="T:System.Net.Http.HttpClient"/>之间的绑定。客户端名称将
            设置为类型名称 = "TClient"/的类型名称。
            </summary>
            <typeparam name="TClient">
            类型化客户端的类型。它们指定的类型将在服务集合中注册为
            一个短暂的服务。有关创作类型化客户端的详细信息, 请参阅<see cref="T:Microsoft.Extensions.Http.ITypedHttpClientFactory`1" />。
            </typeparam>
            <typeparam name="TImplementation">
            类型化客户端的实现类型。它们指定的类型将由
            <see cref="T:Microsoft.Extensions.Http.ITypedHttpClientFactory`1"/>
            </typeparam>
            <param name="services"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>。</param>
            <param name="configureClient">用于配置<see cref="T:System.Net.Http.HttpClient"/>的委托。</param>
            <returns>可用于配置客户端的<see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder"/>。</returns>
            <remarks>
            <para>
            应用所提供配置的<see cref="T:System.Net.Http.HttpClient"/>实例可以使用<see cref="M:System.Net.Http.IHttpClientFactory.CreateClient(System.String)"/>检索, 并提供匹配的名称。
            </para>
            <para>
            < 类型参数名称 = "TClient"/> 实例由适当的<see cref="T:System.Net.Http.HttpClient" />构造
            可以从<see cref="M:System.IServiceProvider.GetService(System.Type)" /> (和相关方法) 中检索, 方法是提供
            < typemref 名称 = "TClient"/> 作为服务类型。
            </para>
            <para>
            使用<see cref="F:Microsoft.Extensions.Options.Options.DefaultName"/>作为名称来配置默认客户端。
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.HttpClientFactoryServiceCollectionExtensions.AddHttpClient``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.Net.Http.HttpClient})">
            <summary>
            将<see cref="T:System.Net.Http.IHttpClientFactory"/>和相关服务添加到<see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>并配置
            在 "类型参数" 名称 = "TClient"/> 类型和命名<see cref="T:System.Net.Http.HttpClient"/>之间的绑定。
            </summary>
            <typeparam name="TClient">
            类型化客户端的类型。它们指定的类型将在服务集合中注册为
            一个短暂的服务。有关创作类型化客户端的详细信息, 请参阅<see cref="T:Microsoft.Extensions.Http.ITypedHttpClientFactory`1" />。
            </typeparam>
            <param name="services"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>。</param>
            <param name="name">要配置的<see cref="T:System.Net.Http.HttpClient"/>的逻辑名称。</param>
            <param name="configureClient">用于配置<see cref="T:System.Net.Http.HttpClient"/>的委托。</param>
            <returns>可用于配置客户端的<see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder"/>。</returns>
            <remarks>
            <para>
            应用所提供配置的<see cref="T:System.Net.Http.HttpClient"/>实例可以使用<see cref="M:System.Net.Http.IHttpClientFactory.CreateClient(System.String)"/>检索, 并提供匹配的名称。
            </para>
            <para>
            < 类型参数名称 = "TClient"/> 实例由适当的<see cref="T:System.Net.Http.HttpClient" />构造
            可以从<see cref="M:System.IServiceProvider.GetService(System.Type)" /> (和相关方法) 中检索, 方法是提供
            < typemref 名称 = "TClient"/> 作为服务类型。
            </para>
            <para>
            使用<see cref="F:Microsoft.Extensions.Options.Options.DefaultName"/>作为名称来配置默认客户端。
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.HttpClientFactoryServiceCollectionExtensions.AddHttpClient``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{System.Net.Http.HttpClient})">
            <summary>
            将<see cref="T:System.Net.Http.IHttpClientFactory"/>和相关服务添加到<see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>并配置
            在 "类型参数" 名称 = "TClient"/> 类型和命名<see cref="T:System.Net.Http.HttpClient"/>之间的绑定。
            </summary>
            <typeparam name="TClient">
            类型化客户端的类型。它们指定的类型将在服务集合中注册为
            一个短暂的服务。有关创作类型化客户端的详细信息, 请参阅<see cref="T:Microsoft.Extensions.Http.ITypedHttpClientFactory`1" />。
            </typeparam>
            <typeparam name="TImplementation">
            类型化客户端的实现类型。它们指定的类型将由
            <see cref="T:Microsoft.Extensions.Http.ITypedHttpClientFactory`1"/>
            </typeparam>
            <param name="services"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>。</param>
            <param name="name">要配置的<see cref="T:System.Net.Http.HttpClient"/>的逻辑名称。</param>
            <param name="configureClient">用于配置<see cref="T:System.Net.Http.HttpClient"/>的委托。</param>
            <returns>可用于配置客户端的<see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder"/>。</returns>
            <remarks>
            <para>
            应用所提供配置的<see cref="T:System.Net.Http.HttpClient"/>实例可以使用<see cref="M:System.Net.Http.IHttpClientFactory.CreateClient(System.String)"/>检索, 并提供匹配的名称。
            </para>
            <para>
            < 类型参数名称 = "TClient"/> 实例由适当的<see cref="T:System.Net.Http.HttpClient" />构造
            可以从<see cref="M:System.IServiceProvider.GetService(System.Type)" /> (和相关方法) 中检索, 方法是提供
            < typemref 名称 = "TClient"/> 作为服务类型。
            </para>
            <para>
            使用<see cref="F:Microsoft.Extensions.Options.Options.DefaultName"/>作为名称来配置默认客户端。
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder">
            <summary>
            用于配置由<see cref="T:System.Net.Http.HttpClient"/>返回的命名<see cref="T:System.Net.Http.IHttpClientFactory"/>实例的生成器。
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder.Name">
            <summary>
            获取此生成器配置的客户端的名称。
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder.Services">
            <summary>
            获取应用程序服务集合。
            </summary>
        </member>
        <member name="T:System.Net.Http.HttpClientFactoryExtensions">
            <summary>
            <see cref="T:System.Net.Http.IHttpClientFactory"/>的扩展方法。
            </summary>
        </member>
        <member name="M:System.Net.Http.HttpClientFactoryExtensions.CreateClient(System.Net.Http.IHttpClientFactory)">
            <summary>
            使用默认配置创建新<see cref="T:System.Net.Http.HttpClient"/>。
            </summary>
            <param name="factory"><see cref="T:System.Net.Http.IHttpClientFactory"/>。</param>
            <returns>使用默认配置配置的<see cref="T:System.Net.Http.HttpClient"/>。</returns>
        </member>
        <member name="T:System.Net.Http.IHttpClientFactory">
            <summary>
            可以使用自定义创建<see cref="T:System.Net.Http.HttpClient"/>实例的组件的工厂抽象
            配置给定的逻辑名称。
            </summary>
            <remarks>
            一个默认的<see cref="T:System.Net.Http.IHttpClientFactory"/>可以在一个<see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>中注册
            通过调用<see cref="M:Microsoft.Extensions.DependencyInjection.HttpClientFactoryServiceCollectionExtensions.AddHttpClient(Microsoft.Extensions.DependencyInjection.IServiceCollection)"/>。
            默认<see cref="T:System.Net.Http.IHttpClientFactory"/>将在服务集合中注册为单例。
            </remarks>
        </member>
        <member name="M:System.Net.Http.IHttpClientFactory.CreateClient(System.String)">
            <summary>
            使用对应的配置创建和配置<see cref="T:System.Net.Http.HttpClient"/>实例
            到<paramref name="name"/>指定的逻辑名称。
            </summary>
            <param name="name">要创建的客户端的逻辑名称。</param>
            <returns>一个新的<see cref="T:System.Net.Http.HttpClient"/>实例。</returns>
            <remarks>
            <para>
            每一次对<see cref="M:System.Net.Http.IHttpClientFactory.CreateClient(System.String)"/>的召唤都保证返回一个新的<see cref="T:System.Net.Http.HttpClient"/>
            实例。呼叫者可以无限期地缓存返回的<see cref="T:System.Net.Http.HttpClient"/>实例或环绕
            它在 <langword> 中使用 </langword> 块在需要时进行处置。
            </para>
            <para>
            默认的<see cref="T:System.Net.Http.IHttpClientFactory"/>实现可能会缓存底层
            <see cref="T:System.Net.Http.HttpMessageHandler"/>实例, 以提高性能。
            </para>
            <para>
            打电话的人也可以自由地改变返回的<see cref="T:System.Net.Http.HttpClient"/>实例的公共属性
            所需的。
            </para>
            </remarks>
        </member>
    </members>
</doc>
